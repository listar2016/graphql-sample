module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateAsset {
  count: Int!
}

type AggregateAssumption {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateCompany {
  count: Int!
}

type AggregateDepartment {
  count: Int!
}

type AggregateEquity {
  count: Int!
}

type AggregateExpense {
  count: Int!
}

type AggregateGrowthFunnel {
  count: Int!
}

type AggregateIntegration {
  count: Int!
}

type AggregateLiability {
  count: Int!
}

type AggregateMetric {
  count: Int!
}

type AggregatePaymentCard {
  count: Int!
}

type AggregatePaymentMethod {
  count: Int!
}

type AggregatePerson {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateRegistration {
  count: Int!
}

type AggregateRevenueStream {
  count: Int!
}

type AggregateScenario {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateTimeline {
  count: Int!
}

type AggregateTimelineEntry {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Asset {
  id: ID!
  company: Company!
  scenarios(where: ScenarioWhereInput, orderBy: ScenarioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Scenario!]
  category: Category
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  assetType: AssetType!
  name: String!
  data: Json!
  metrics(where: MetricWhereInput, orderBy: MetricOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Metric!]
  isPublished: Boolean
  startTimestamp: DateTime
  endTimestamp: DateTime
}

type AssetConnection {
  pageInfo: PageInfo!
  edges: [AssetEdge]!
  aggregate: AggregateAsset!
}

input AssetCreateInput {
  id: ID
  company: CompanyCreateOneWithoutAssetsInput!
  scenarios: ScenarioCreateManyWithoutAssetsInput
  category: CategoryCreateOneWithoutAssetsInput
  tags: TagCreateManyWithoutAssetsInput
  assetType: AssetType!
  name: String!
  data: Json!
  metrics: MetricCreateManyWithoutAssetInput
  isPublished: Boolean
  startTimestamp: DateTime
  endTimestamp: DateTime
}

input AssetCreateManyWithoutCategoryInput {
  create: [AssetCreateWithoutCategoryInput!]
  connect: [AssetWhereUniqueInput!]
}

input AssetCreateManyWithoutCompanyInput {
  create: [AssetCreateWithoutCompanyInput!]
  connect: [AssetWhereUniqueInput!]
}

input AssetCreateManyWithoutScenariosInput {
  create: [AssetCreateWithoutScenariosInput!]
  connect: [AssetWhereUniqueInput!]
}

input AssetCreateManyWithoutTagsInput {
  create: [AssetCreateWithoutTagsInput!]
  connect: [AssetWhereUniqueInput!]
}

input AssetCreateOneWithoutMetricsInput {
  create: AssetCreateWithoutMetricsInput
  connect: AssetWhereUniqueInput
}

input AssetCreateWithoutCategoryInput {
  id: ID
  company: CompanyCreateOneWithoutAssetsInput!
  scenarios: ScenarioCreateManyWithoutAssetsInput
  tags: TagCreateManyWithoutAssetsInput
  assetType: AssetType!
  name: String!
  data: Json!
  metrics: MetricCreateManyWithoutAssetInput
  isPublished: Boolean
  startTimestamp: DateTime
  endTimestamp: DateTime
}

input AssetCreateWithoutCompanyInput {
  id: ID
  scenarios: ScenarioCreateManyWithoutAssetsInput
  category: CategoryCreateOneWithoutAssetsInput
  tags: TagCreateManyWithoutAssetsInput
  assetType: AssetType!
  name: String!
  data: Json!
  metrics: MetricCreateManyWithoutAssetInput
  isPublished: Boolean
  startTimestamp: DateTime
  endTimestamp: DateTime
}

input AssetCreateWithoutMetricsInput {
  id: ID
  company: CompanyCreateOneWithoutAssetsInput!
  scenarios: ScenarioCreateManyWithoutAssetsInput
  category: CategoryCreateOneWithoutAssetsInput
  tags: TagCreateManyWithoutAssetsInput
  assetType: AssetType!
  name: String!
  data: Json!
  isPublished: Boolean
  startTimestamp: DateTime
  endTimestamp: DateTime
}

input AssetCreateWithoutScenariosInput {
  id: ID
  company: CompanyCreateOneWithoutAssetsInput!
  category: CategoryCreateOneWithoutAssetsInput
  tags: TagCreateManyWithoutAssetsInput
  assetType: AssetType!
  name: String!
  data: Json!
  metrics: MetricCreateManyWithoutAssetInput
  isPublished: Boolean
  startTimestamp: DateTime
  endTimestamp: DateTime
}

input AssetCreateWithoutTagsInput {
  id: ID
  company: CompanyCreateOneWithoutAssetsInput!
  scenarios: ScenarioCreateManyWithoutAssetsInput
  category: CategoryCreateOneWithoutAssetsInput
  assetType: AssetType!
  name: String!
  data: Json!
  metrics: MetricCreateManyWithoutAssetInput
  isPublished: Boolean
  startTimestamp: DateTime
  endTimestamp: DateTime
}

type AssetEdge {
  node: Asset!
  cursor: String!
}

enum AssetOrderByInput {
  id_ASC
  id_DESC
  assetType_ASC
  assetType_DESC
  name_ASC
  name_DESC
  data_ASC
  data_DESC
  isPublished_ASC
  isPublished_DESC
  startTimestamp_ASC
  startTimestamp_DESC
  endTimestamp_ASC
  endTimestamp_DESC
}

type AssetPreviousValues {
  id: ID!
  assetType: AssetType!
  name: String!
  data: Json!
  isPublished: Boolean
  startTimestamp: DateTime
  endTimestamp: DateTime
}

input AssetScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  assetType: AssetType
  assetType_not: AssetType
  assetType_in: [AssetType!]
  assetType_not_in: [AssetType!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  isPublished: Boolean
  isPublished_not: Boolean
  startTimestamp: DateTime
  startTimestamp_not: DateTime
  startTimestamp_in: [DateTime!]
  startTimestamp_not_in: [DateTime!]
  startTimestamp_lt: DateTime
  startTimestamp_lte: DateTime
  startTimestamp_gt: DateTime
  startTimestamp_gte: DateTime
  endTimestamp: DateTime
  endTimestamp_not: DateTime
  endTimestamp_in: [DateTime!]
  endTimestamp_not_in: [DateTime!]
  endTimestamp_lt: DateTime
  endTimestamp_lte: DateTime
  endTimestamp_gt: DateTime
  endTimestamp_gte: DateTime
  AND: [AssetScalarWhereInput!]
  OR: [AssetScalarWhereInput!]
  NOT: [AssetScalarWhereInput!]
}

type AssetSubscriptionPayload {
  mutation: MutationType!
  node: Asset
  updatedFields: [String!]
  previousValues: AssetPreviousValues
}

input AssetSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AssetWhereInput
  AND: [AssetSubscriptionWhereInput!]
  OR: [AssetSubscriptionWhereInput!]
  NOT: [AssetSubscriptionWhereInput!]
}

enum AssetType {
  ASSETS_CUSTOM
  ASSETS_CASH
  ASSETS_INVENTORY
  ASSETS_ACCOUNTS_RECEIVABLE
  ASSETS_FIXED_ASSETS
}

input AssetUpdateInput {
  company: CompanyUpdateOneRequiredWithoutAssetsInput
  scenarios: ScenarioUpdateManyWithoutAssetsInput
  category: CategoryUpdateOneWithoutAssetsInput
  tags: TagUpdateManyWithoutAssetsInput
  assetType: AssetType
  name: String
  data: Json
  metrics: MetricUpdateManyWithoutAssetInput
  isPublished: Boolean
  startTimestamp: DateTime
  endTimestamp: DateTime
}

input AssetUpdateManyDataInput {
  assetType: AssetType
  name: String
  data: Json
  isPublished: Boolean
  startTimestamp: DateTime
  endTimestamp: DateTime
}

input AssetUpdateManyMutationInput {
  assetType: AssetType
  name: String
  data: Json
  isPublished: Boolean
  startTimestamp: DateTime
  endTimestamp: DateTime
}

input AssetUpdateManyWithoutCategoryInput {
  create: [AssetCreateWithoutCategoryInput!]
  delete: [AssetWhereUniqueInput!]
  connect: [AssetWhereUniqueInput!]
  set: [AssetWhereUniqueInput!]
  disconnect: [AssetWhereUniqueInput!]
  update: [AssetUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [AssetUpsertWithWhereUniqueWithoutCategoryInput!]
  deleteMany: [AssetScalarWhereInput!]
  updateMany: [AssetUpdateManyWithWhereNestedInput!]
}

input AssetUpdateManyWithoutCompanyInput {
  create: [AssetCreateWithoutCompanyInput!]
  delete: [AssetWhereUniqueInput!]
  connect: [AssetWhereUniqueInput!]
  set: [AssetWhereUniqueInput!]
  disconnect: [AssetWhereUniqueInput!]
  update: [AssetUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [AssetUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [AssetScalarWhereInput!]
  updateMany: [AssetUpdateManyWithWhereNestedInput!]
}

input AssetUpdateManyWithoutScenariosInput {
  create: [AssetCreateWithoutScenariosInput!]
  delete: [AssetWhereUniqueInput!]
  connect: [AssetWhereUniqueInput!]
  set: [AssetWhereUniqueInput!]
  disconnect: [AssetWhereUniqueInput!]
  update: [AssetUpdateWithWhereUniqueWithoutScenariosInput!]
  upsert: [AssetUpsertWithWhereUniqueWithoutScenariosInput!]
  deleteMany: [AssetScalarWhereInput!]
  updateMany: [AssetUpdateManyWithWhereNestedInput!]
}

input AssetUpdateManyWithoutTagsInput {
  create: [AssetCreateWithoutTagsInput!]
  delete: [AssetWhereUniqueInput!]
  connect: [AssetWhereUniqueInput!]
  set: [AssetWhereUniqueInput!]
  disconnect: [AssetWhereUniqueInput!]
  update: [AssetUpdateWithWhereUniqueWithoutTagsInput!]
  upsert: [AssetUpsertWithWhereUniqueWithoutTagsInput!]
  deleteMany: [AssetScalarWhereInput!]
  updateMany: [AssetUpdateManyWithWhereNestedInput!]
}

input AssetUpdateManyWithWhereNestedInput {
  where: AssetScalarWhereInput!
  data: AssetUpdateManyDataInput!
}

input AssetUpdateOneWithoutMetricsInput {
  create: AssetCreateWithoutMetricsInput
  update: AssetUpdateWithoutMetricsDataInput
  upsert: AssetUpsertWithoutMetricsInput
  delete: Boolean
  disconnect: Boolean
  connect: AssetWhereUniqueInput
}

input AssetUpdateWithoutCategoryDataInput {
  company: CompanyUpdateOneRequiredWithoutAssetsInput
  scenarios: ScenarioUpdateManyWithoutAssetsInput
  tags: TagUpdateManyWithoutAssetsInput
  assetType: AssetType
  name: String
  data: Json
  metrics: MetricUpdateManyWithoutAssetInput
  isPublished: Boolean
  startTimestamp: DateTime
  endTimestamp: DateTime
}

input AssetUpdateWithoutCompanyDataInput {
  scenarios: ScenarioUpdateManyWithoutAssetsInput
  category: CategoryUpdateOneWithoutAssetsInput
  tags: TagUpdateManyWithoutAssetsInput
  assetType: AssetType
  name: String
  data: Json
  metrics: MetricUpdateManyWithoutAssetInput
  isPublished: Boolean
  startTimestamp: DateTime
  endTimestamp: DateTime
}

input AssetUpdateWithoutMetricsDataInput {
  company: CompanyUpdateOneRequiredWithoutAssetsInput
  scenarios: ScenarioUpdateManyWithoutAssetsInput
  category: CategoryUpdateOneWithoutAssetsInput
  tags: TagUpdateManyWithoutAssetsInput
  assetType: AssetType
  name: String
  data: Json
  isPublished: Boolean
  startTimestamp: DateTime
  endTimestamp: DateTime
}

input AssetUpdateWithoutScenariosDataInput {
  company: CompanyUpdateOneRequiredWithoutAssetsInput
  category: CategoryUpdateOneWithoutAssetsInput
  tags: TagUpdateManyWithoutAssetsInput
  assetType: AssetType
  name: String
  data: Json
  metrics: MetricUpdateManyWithoutAssetInput
  isPublished: Boolean
  startTimestamp: DateTime
  endTimestamp: DateTime
}

input AssetUpdateWithoutTagsDataInput {
  company: CompanyUpdateOneRequiredWithoutAssetsInput
  scenarios: ScenarioUpdateManyWithoutAssetsInput
  category: CategoryUpdateOneWithoutAssetsInput
  assetType: AssetType
  name: String
  data: Json
  metrics: MetricUpdateManyWithoutAssetInput
  isPublished: Boolean
  startTimestamp: DateTime
  endTimestamp: DateTime
}

input AssetUpdateWithWhereUniqueWithoutCategoryInput {
  where: AssetWhereUniqueInput!
  data: AssetUpdateWithoutCategoryDataInput!
}

input AssetUpdateWithWhereUniqueWithoutCompanyInput {
  where: AssetWhereUniqueInput!
  data: AssetUpdateWithoutCompanyDataInput!
}

input AssetUpdateWithWhereUniqueWithoutScenariosInput {
  where: AssetWhereUniqueInput!
  data: AssetUpdateWithoutScenariosDataInput!
}

input AssetUpdateWithWhereUniqueWithoutTagsInput {
  where: AssetWhereUniqueInput!
  data: AssetUpdateWithoutTagsDataInput!
}

input AssetUpsertWithoutMetricsInput {
  update: AssetUpdateWithoutMetricsDataInput!
  create: AssetCreateWithoutMetricsInput!
}

input AssetUpsertWithWhereUniqueWithoutCategoryInput {
  where: AssetWhereUniqueInput!
  update: AssetUpdateWithoutCategoryDataInput!
  create: AssetCreateWithoutCategoryInput!
}

input AssetUpsertWithWhereUniqueWithoutCompanyInput {
  where: AssetWhereUniqueInput!
  update: AssetUpdateWithoutCompanyDataInput!
  create: AssetCreateWithoutCompanyInput!
}

input AssetUpsertWithWhereUniqueWithoutScenariosInput {
  where: AssetWhereUniqueInput!
  update: AssetUpdateWithoutScenariosDataInput!
  create: AssetCreateWithoutScenariosInput!
}

input AssetUpsertWithWhereUniqueWithoutTagsInput {
  where: AssetWhereUniqueInput!
  update: AssetUpdateWithoutTagsDataInput!
  create: AssetCreateWithoutTagsInput!
}

input AssetWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  company: CompanyWhereInput
  scenarios_every: ScenarioWhereInput
  scenarios_some: ScenarioWhereInput
  scenarios_none: ScenarioWhereInput
  category: CategoryWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  assetType: AssetType
  assetType_not: AssetType
  assetType_in: [AssetType!]
  assetType_not_in: [AssetType!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  metrics_every: MetricWhereInput
  metrics_some: MetricWhereInput
  metrics_none: MetricWhereInput
  isPublished: Boolean
  isPublished_not: Boolean
  startTimestamp: DateTime
  startTimestamp_not: DateTime
  startTimestamp_in: [DateTime!]
  startTimestamp_not_in: [DateTime!]
  startTimestamp_lt: DateTime
  startTimestamp_lte: DateTime
  startTimestamp_gt: DateTime
  startTimestamp_gte: DateTime
  endTimestamp: DateTime
  endTimestamp_not: DateTime
  endTimestamp_in: [DateTime!]
  endTimestamp_not_in: [DateTime!]
  endTimestamp_lt: DateTime
  endTimestamp_lte: DateTime
  endTimestamp_gt: DateTime
  endTimestamp_gte: DateTime
  AND: [AssetWhereInput!]
  OR: [AssetWhereInput!]
  NOT: [AssetWhereInput!]
}

input AssetWhereUniqueInput {
  id: ID
}

type Assumption {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  metric: Metric!
  assumptionType: AssumptionType!
  name: String
  timeUnit: TimeUnit
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json!
}

type AssumptionConnection {
  pageInfo: PageInfo!
  edges: [AssumptionEdge]!
  aggregate: AggregateAssumption!
}

input AssumptionCreateInput {
  id: ID
  metric: MetricCreateOneWithoutAssumptionsInput!
  assumptionType: AssumptionType!
  name: String
  timeUnit: TimeUnit
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json!
}

input AssumptionCreateManyWithoutMetricInput {
  create: [AssumptionCreateWithoutMetricInput!]
  connect: [AssumptionWhereUniqueInput!]
}

input AssumptionCreateWithoutMetricInput {
  id: ID
  assumptionType: AssumptionType!
  name: String
  timeUnit: TimeUnit
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json!
}

type AssumptionEdge {
  node: Assumption!
  cursor: String!
}

enum AssumptionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  assumptionType_ASC
  assumptionType_DESC
  name_ASC
  name_DESC
  timeUnit_ASC
  timeUnit_DESC
  startTimestamp_ASC
  startTimestamp_DESC
  endTimestamp_ASC
  endTimestamp_DESC
  data_ASC
  data_DESC
}

type AssumptionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  assumptionType: AssumptionType!
  name: String
  timeUnit: TimeUnit
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json!
}

input AssumptionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  assumptionType: AssumptionType
  assumptionType_not: AssumptionType
  assumptionType_in: [AssumptionType!]
  assumptionType_not_in: [AssumptionType!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  timeUnit: TimeUnit
  timeUnit_not: TimeUnit
  timeUnit_in: [TimeUnit!]
  timeUnit_not_in: [TimeUnit!]
  startTimestamp: DateTime
  startTimestamp_not: DateTime
  startTimestamp_in: [DateTime!]
  startTimestamp_not_in: [DateTime!]
  startTimestamp_lt: DateTime
  startTimestamp_lte: DateTime
  startTimestamp_gt: DateTime
  startTimestamp_gte: DateTime
  endTimestamp: DateTime
  endTimestamp_not: DateTime
  endTimestamp_in: [DateTime!]
  endTimestamp_not_in: [DateTime!]
  endTimestamp_lt: DateTime
  endTimestamp_lte: DateTime
  endTimestamp_gt: DateTime
  endTimestamp_gte: DateTime
  AND: [AssumptionScalarWhereInput!]
  OR: [AssumptionScalarWhereInput!]
  NOT: [AssumptionScalarWhereInput!]
}

type AssumptionSubscriptionPayload {
  mutation: MutationType!
  node: Assumption
  updatedFields: [String!]
  previousValues: AssumptionPreviousValues
}

input AssumptionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AssumptionWhereInput
  AND: [AssumptionSubscriptionWhereInput!]
  OR: [AssumptionSubscriptionWhereInput!]
  NOT: [AssumptionSubscriptionWhereInput!]
}

enum AssumptionType {
  GROWTH
  ONE_TIME_CHANGE
  OPTIMIZE_RATE
  OPTIMIZE_VALUE
}

input AssumptionUpdateInput {
  metric: MetricUpdateOneRequiredWithoutAssumptionsInput
  assumptionType: AssumptionType
  name: String
  timeUnit: TimeUnit
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
}

input AssumptionUpdateManyDataInput {
  assumptionType: AssumptionType
  name: String
  timeUnit: TimeUnit
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
}

input AssumptionUpdateManyMutationInput {
  assumptionType: AssumptionType
  name: String
  timeUnit: TimeUnit
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
}

input AssumptionUpdateManyWithoutMetricInput {
  create: [AssumptionCreateWithoutMetricInput!]
  delete: [AssumptionWhereUniqueInput!]
  connect: [AssumptionWhereUniqueInput!]
  set: [AssumptionWhereUniqueInput!]
  disconnect: [AssumptionWhereUniqueInput!]
  update: [AssumptionUpdateWithWhereUniqueWithoutMetricInput!]
  upsert: [AssumptionUpsertWithWhereUniqueWithoutMetricInput!]
  deleteMany: [AssumptionScalarWhereInput!]
  updateMany: [AssumptionUpdateManyWithWhereNestedInput!]
}

input AssumptionUpdateManyWithWhereNestedInput {
  where: AssumptionScalarWhereInput!
  data: AssumptionUpdateManyDataInput!
}

input AssumptionUpdateWithoutMetricDataInput {
  assumptionType: AssumptionType
  name: String
  timeUnit: TimeUnit
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
}

input AssumptionUpdateWithWhereUniqueWithoutMetricInput {
  where: AssumptionWhereUniqueInput!
  data: AssumptionUpdateWithoutMetricDataInput!
}

input AssumptionUpsertWithWhereUniqueWithoutMetricInput {
  where: AssumptionWhereUniqueInput!
  update: AssumptionUpdateWithoutMetricDataInput!
  create: AssumptionCreateWithoutMetricInput!
}

input AssumptionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  metric: MetricWhereInput
  assumptionType: AssumptionType
  assumptionType_not: AssumptionType
  assumptionType_in: [AssumptionType!]
  assumptionType_not_in: [AssumptionType!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  timeUnit: TimeUnit
  timeUnit_not: TimeUnit
  timeUnit_in: [TimeUnit!]
  timeUnit_not_in: [TimeUnit!]
  startTimestamp: DateTime
  startTimestamp_not: DateTime
  startTimestamp_in: [DateTime!]
  startTimestamp_not_in: [DateTime!]
  startTimestamp_lt: DateTime
  startTimestamp_lte: DateTime
  startTimestamp_gt: DateTime
  startTimestamp_gte: DateTime
  endTimestamp: DateTime
  endTimestamp_not: DateTime
  endTimestamp_in: [DateTime!]
  endTimestamp_not_in: [DateTime!]
  endTimestamp_lt: DateTime
  endTimestamp_lte: DateTime
  endTimestamp_gt: DateTime
  endTimestamp_gte: DateTime
  AND: [AssumptionWhereInput!]
  OR: [AssumptionWhereInput!]
  NOT: [AssumptionWhereInput!]
}

input AssumptionWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

enum BuildType {
  NONE
  BASIC_ECOMMERCE
  USER_GROWTH_ECOMMERCE
  BASIC_MARKETPLACE
  USER_GROWTH_MARKETPLACE
  HOURLY_BILLING_BASIC_SERVICES
  HOURLY_BILLING_USER_GROWTH_SERVICES
  PROJECT_BASED_BASIC_SERVICES
  PROJECT_BASED_USER_GROWTH_SERVICES
  BASIC_SUBSCRIPTION
  USER_GROWTH_SUBSCRIPTION
  PER_UNIT_PRICING_SUBSCRIPTION
  USAGE_BASED_PRICING_SUBSCRIPTION
  USAGE_BASED_ANNUAL_SUBSCRIPTION
  PER_UNIT_ANNUAL_SUBSCRIPTION
  ADVANCED_ANNUAL_SUBSCRIPTION
  USAGE_BASED_QUARTERLY_SUBSCRIPTION
  PER_UNIT_QUARTERLY_SUBSCRIPTION
  ADVANCED_QUARTERLY_SUBSCRIPTION
  BASIC_TRANSACTIONAL
  USER_GROWTH_TRANSACTIONAL
  GROWTH_FUNNEL_AFFILIATE_LEADS
  GROWTH_FUNNEL_CONFERENCE_LEADS
  GROWTH_FUNNEL_INFLUENCER_LEADS
  GROWTH_FUNNEL_LEADS_FROM_SOURCE
  GROWTH_FUNNEL_LEADS_VALUE
  GROWTH_FUNNEL_PAID_LEADS
  GROWTH_FUNNEL_PARTNERSHIP_LEADS
  GROWTH_FUNNEL_CUSTOMER_REFERRAL_LEADS
  GROWTH_FUNNEL_EMAIL_MARKETING_LEADS
  GROWTH_FUNNEL_CONTENT_MARKETING_LEADS
  DEFAULT
  MONTHLY_SALARY
  ANNUAL_SALARY
}

type Category {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  subjectType: SubjectType!
  name: String!
  key: String!
  company: Company
  assets(where: AssetWhereInput, orderBy: AssetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Asset!]
  equities(where: EquityWhereInput, orderBy: EquityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Equity!]
  expenses(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense!]
  growthFunnels(where: GrowthFunnelWhereInput, orderBy: GrowthFunnelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GrowthFunnel!]
  liabilities(where: LiabilityWhereInput, orderBy: LiabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Liability!]
  people(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person!]
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  id: ID
  subjectType: SubjectType!
  name: String!
  key: String!
  company: CompanyCreateOneWithoutCategoriesInput
  assets: AssetCreateManyWithoutCategoryInput
  equities: EquityCreateManyWithoutCategoryInput
  expenses: ExpenseCreateManyWithoutCategoryInput
  growthFunnels: GrowthFunnelCreateManyWithoutCategoryInput
  liabilities: LiabilityCreateManyWithoutCategoryInput
  people: PersonCreateManyWithoutCategoryInput
  products: ProductCreateManyWithoutCategoryInput
}

input CategoryCreateManyWithoutCompanyInput {
  create: [CategoryCreateWithoutCompanyInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CategoryCreateOneWithoutAssetsInput {
  create: CategoryCreateWithoutAssetsInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateOneWithoutEquitiesInput {
  create: CategoryCreateWithoutEquitiesInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateOneWithoutExpensesInput {
  create: CategoryCreateWithoutExpensesInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateOneWithoutGrowthFunnelsInput {
  create: CategoryCreateWithoutGrowthFunnelsInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateOneWithoutLiabilitiesInput {
  create: CategoryCreateWithoutLiabilitiesInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateOneWithoutPeopleInput {
  create: CategoryCreateWithoutPeopleInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateOneWithoutProductsInput {
  create: CategoryCreateWithoutProductsInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutAssetsInput {
  id: ID
  subjectType: SubjectType!
  name: String!
  key: String!
  company: CompanyCreateOneWithoutCategoriesInput
  equities: EquityCreateManyWithoutCategoryInput
  expenses: ExpenseCreateManyWithoutCategoryInput
  growthFunnels: GrowthFunnelCreateManyWithoutCategoryInput
  liabilities: LiabilityCreateManyWithoutCategoryInput
  people: PersonCreateManyWithoutCategoryInput
  products: ProductCreateManyWithoutCategoryInput
}

input CategoryCreateWithoutCompanyInput {
  id: ID
  subjectType: SubjectType!
  name: String!
  key: String!
  assets: AssetCreateManyWithoutCategoryInput
  equities: EquityCreateManyWithoutCategoryInput
  expenses: ExpenseCreateManyWithoutCategoryInput
  growthFunnels: GrowthFunnelCreateManyWithoutCategoryInput
  liabilities: LiabilityCreateManyWithoutCategoryInput
  people: PersonCreateManyWithoutCategoryInput
  products: ProductCreateManyWithoutCategoryInput
}

input CategoryCreateWithoutEquitiesInput {
  id: ID
  subjectType: SubjectType!
  name: String!
  key: String!
  company: CompanyCreateOneWithoutCategoriesInput
  assets: AssetCreateManyWithoutCategoryInput
  expenses: ExpenseCreateManyWithoutCategoryInput
  growthFunnels: GrowthFunnelCreateManyWithoutCategoryInput
  liabilities: LiabilityCreateManyWithoutCategoryInput
  people: PersonCreateManyWithoutCategoryInput
  products: ProductCreateManyWithoutCategoryInput
}

input CategoryCreateWithoutExpensesInput {
  id: ID
  subjectType: SubjectType!
  name: String!
  key: String!
  company: CompanyCreateOneWithoutCategoriesInput
  assets: AssetCreateManyWithoutCategoryInput
  equities: EquityCreateManyWithoutCategoryInput
  growthFunnels: GrowthFunnelCreateManyWithoutCategoryInput
  liabilities: LiabilityCreateManyWithoutCategoryInput
  people: PersonCreateManyWithoutCategoryInput
  products: ProductCreateManyWithoutCategoryInput
}

input CategoryCreateWithoutGrowthFunnelsInput {
  id: ID
  subjectType: SubjectType!
  name: String!
  key: String!
  company: CompanyCreateOneWithoutCategoriesInput
  assets: AssetCreateManyWithoutCategoryInput
  equities: EquityCreateManyWithoutCategoryInput
  expenses: ExpenseCreateManyWithoutCategoryInput
  liabilities: LiabilityCreateManyWithoutCategoryInput
  people: PersonCreateManyWithoutCategoryInput
  products: ProductCreateManyWithoutCategoryInput
}

input CategoryCreateWithoutLiabilitiesInput {
  id: ID
  subjectType: SubjectType!
  name: String!
  key: String!
  company: CompanyCreateOneWithoutCategoriesInput
  assets: AssetCreateManyWithoutCategoryInput
  equities: EquityCreateManyWithoutCategoryInput
  expenses: ExpenseCreateManyWithoutCategoryInput
  growthFunnels: GrowthFunnelCreateManyWithoutCategoryInput
  people: PersonCreateManyWithoutCategoryInput
  products: ProductCreateManyWithoutCategoryInput
}

input CategoryCreateWithoutPeopleInput {
  id: ID
  subjectType: SubjectType!
  name: String!
  key: String!
  company: CompanyCreateOneWithoutCategoriesInput
  assets: AssetCreateManyWithoutCategoryInput
  equities: EquityCreateManyWithoutCategoryInput
  expenses: ExpenseCreateManyWithoutCategoryInput
  growthFunnels: GrowthFunnelCreateManyWithoutCategoryInput
  liabilities: LiabilityCreateManyWithoutCategoryInput
  products: ProductCreateManyWithoutCategoryInput
}

input CategoryCreateWithoutProductsInput {
  id: ID
  subjectType: SubjectType!
  name: String!
  key: String!
  company: CompanyCreateOneWithoutCategoriesInput
  assets: AssetCreateManyWithoutCategoryInput
  equities: EquityCreateManyWithoutCategoryInput
  expenses: ExpenseCreateManyWithoutCategoryInput
  growthFunnels: GrowthFunnelCreateManyWithoutCategoryInput
  liabilities: LiabilityCreateManyWithoutCategoryInput
  people: PersonCreateManyWithoutCategoryInput
}

type CategoryEdge {
  node: Category!
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  subjectType_ASC
  subjectType_DESC
  name_ASC
  name_DESC
  key_ASC
  key_DESC
}

type CategoryPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  subjectType: SubjectType!
  name: String!
  key: String!
}

input CategoryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  subjectType: SubjectType
  subjectType_not: SubjectType
  subjectType_in: [SubjectType!]
  subjectType_not_in: [SubjectType!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_lt: String
  key_lte: String
  key_gt: String
  key_gte: String
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  AND: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  NOT: [CategoryScalarWhereInput!]
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
  AND: [CategorySubscriptionWhereInput!]
  OR: [CategorySubscriptionWhereInput!]
  NOT: [CategorySubscriptionWhereInput!]
}

input CategoryUpdateInput {
  subjectType: SubjectType
  name: String
  key: String
  company: CompanyUpdateOneWithoutCategoriesInput
  assets: AssetUpdateManyWithoutCategoryInput
  equities: EquityUpdateManyWithoutCategoryInput
  expenses: ExpenseUpdateManyWithoutCategoryInput
  growthFunnels: GrowthFunnelUpdateManyWithoutCategoryInput
  liabilities: LiabilityUpdateManyWithoutCategoryInput
  people: PersonUpdateManyWithoutCategoryInput
  products: ProductUpdateManyWithoutCategoryInput
}

input CategoryUpdateManyDataInput {
  subjectType: SubjectType
  name: String
  key: String
}

input CategoryUpdateManyMutationInput {
  subjectType: SubjectType
  name: String
  key: String
}

input CategoryUpdateManyWithoutCompanyInput {
  create: [CategoryCreateWithoutCompanyInput!]
  delete: [CategoryWhereUniqueInput!]
  connect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [CategoryScalarWhereInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
}

input CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput!
  data: CategoryUpdateManyDataInput!
}

input CategoryUpdateOneWithoutAssetsInput {
  create: CategoryCreateWithoutAssetsInput
  update: CategoryUpdateWithoutAssetsDataInput
  upsert: CategoryUpsertWithoutAssetsInput
  delete: Boolean
  disconnect: Boolean
  connect: CategoryWhereUniqueInput
}

input CategoryUpdateOneWithoutEquitiesInput {
  create: CategoryCreateWithoutEquitiesInput
  update: CategoryUpdateWithoutEquitiesDataInput
  upsert: CategoryUpsertWithoutEquitiesInput
  delete: Boolean
  disconnect: Boolean
  connect: CategoryWhereUniqueInput
}

input CategoryUpdateOneWithoutExpensesInput {
  create: CategoryCreateWithoutExpensesInput
  update: CategoryUpdateWithoutExpensesDataInput
  upsert: CategoryUpsertWithoutExpensesInput
  delete: Boolean
  disconnect: Boolean
  connect: CategoryWhereUniqueInput
}

input CategoryUpdateOneWithoutGrowthFunnelsInput {
  create: CategoryCreateWithoutGrowthFunnelsInput
  update: CategoryUpdateWithoutGrowthFunnelsDataInput
  upsert: CategoryUpsertWithoutGrowthFunnelsInput
  delete: Boolean
  disconnect: Boolean
  connect: CategoryWhereUniqueInput
}

input CategoryUpdateOneWithoutLiabilitiesInput {
  create: CategoryCreateWithoutLiabilitiesInput
  update: CategoryUpdateWithoutLiabilitiesDataInput
  upsert: CategoryUpsertWithoutLiabilitiesInput
  delete: Boolean
  disconnect: Boolean
  connect: CategoryWhereUniqueInput
}

input CategoryUpdateOneWithoutPeopleInput {
  create: CategoryCreateWithoutPeopleInput
  update: CategoryUpdateWithoutPeopleDataInput
  upsert: CategoryUpsertWithoutPeopleInput
  delete: Boolean
  disconnect: Boolean
  connect: CategoryWhereUniqueInput
}

input CategoryUpdateOneWithoutProductsInput {
  create: CategoryCreateWithoutProductsInput
  update: CategoryUpdateWithoutProductsDataInput
  upsert: CategoryUpsertWithoutProductsInput
  delete: Boolean
  disconnect: Boolean
  connect: CategoryWhereUniqueInput
}

input CategoryUpdateWithoutAssetsDataInput {
  subjectType: SubjectType
  name: String
  key: String
  company: CompanyUpdateOneWithoutCategoriesInput
  equities: EquityUpdateManyWithoutCategoryInput
  expenses: ExpenseUpdateManyWithoutCategoryInput
  growthFunnels: GrowthFunnelUpdateManyWithoutCategoryInput
  liabilities: LiabilityUpdateManyWithoutCategoryInput
  people: PersonUpdateManyWithoutCategoryInput
  products: ProductUpdateManyWithoutCategoryInput
}

input CategoryUpdateWithoutCompanyDataInput {
  subjectType: SubjectType
  name: String
  key: String
  assets: AssetUpdateManyWithoutCategoryInput
  equities: EquityUpdateManyWithoutCategoryInput
  expenses: ExpenseUpdateManyWithoutCategoryInput
  growthFunnels: GrowthFunnelUpdateManyWithoutCategoryInput
  liabilities: LiabilityUpdateManyWithoutCategoryInput
  people: PersonUpdateManyWithoutCategoryInput
  products: ProductUpdateManyWithoutCategoryInput
}

input CategoryUpdateWithoutEquitiesDataInput {
  subjectType: SubjectType
  name: String
  key: String
  company: CompanyUpdateOneWithoutCategoriesInput
  assets: AssetUpdateManyWithoutCategoryInput
  expenses: ExpenseUpdateManyWithoutCategoryInput
  growthFunnels: GrowthFunnelUpdateManyWithoutCategoryInput
  liabilities: LiabilityUpdateManyWithoutCategoryInput
  people: PersonUpdateManyWithoutCategoryInput
  products: ProductUpdateManyWithoutCategoryInput
}

input CategoryUpdateWithoutExpensesDataInput {
  subjectType: SubjectType
  name: String
  key: String
  company: CompanyUpdateOneWithoutCategoriesInput
  assets: AssetUpdateManyWithoutCategoryInput
  equities: EquityUpdateManyWithoutCategoryInput
  growthFunnels: GrowthFunnelUpdateManyWithoutCategoryInput
  liabilities: LiabilityUpdateManyWithoutCategoryInput
  people: PersonUpdateManyWithoutCategoryInput
  products: ProductUpdateManyWithoutCategoryInput
}

input CategoryUpdateWithoutGrowthFunnelsDataInput {
  subjectType: SubjectType
  name: String
  key: String
  company: CompanyUpdateOneWithoutCategoriesInput
  assets: AssetUpdateManyWithoutCategoryInput
  equities: EquityUpdateManyWithoutCategoryInput
  expenses: ExpenseUpdateManyWithoutCategoryInput
  liabilities: LiabilityUpdateManyWithoutCategoryInput
  people: PersonUpdateManyWithoutCategoryInput
  products: ProductUpdateManyWithoutCategoryInput
}

input CategoryUpdateWithoutLiabilitiesDataInput {
  subjectType: SubjectType
  name: String
  key: String
  company: CompanyUpdateOneWithoutCategoriesInput
  assets: AssetUpdateManyWithoutCategoryInput
  equities: EquityUpdateManyWithoutCategoryInput
  expenses: ExpenseUpdateManyWithoutCategoryInput
  growthFunnels: GrowthFunnelUpdateManyWithoutCategoryInput
  people: PersonUpdateManyWithoutCategoryInput
  products: ProductUpdateManyWithoutCategoryInput
}

input CategoryUpdateWithoutPeopleDataInput {
  subjectType: SubjectType
  name: String
  key: String
  company: CompanyUpdateOneWithoutCategoriesInput
  assets: AssetUpdateManyWithoutCategoryInput
  equities: EquityUpdateManyWithoutCategoryInput
  expenses: ExpenseUpdateManyWithoutCategoryInput
  growthFunnels: GrowthFunnelUpdateManyWithoutCategoryInput
  liabilities: LiabilityUpdateManyWithoutCategoryInput
  products: ProductUpdateManyWithoutCategoryInput
}

input CategoryUpdateWithoutProductsDataInput {
  subjectType: SubjectType
  name: String
  key: String
  company: CompanyUpdateOneWithoutCategoriesInput
  assets: AssetUpdateManyWithoutCategoryInput
  equities: EquityUpdateManyWithoutCategoryInput
  expenses: ExpenseUpdateManyWithoutCategoryInput
  growthFunnels: GrowthFunnelUpdateManyWithoutCategoryInput
  liabilities: LiabilityUpdateManyWithoutCategoryInput
  people: PersonUpdateManyWithoutCategoryInput
}

input CategoryUpdateWithWhereUniqueWithoutCompanyInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateWithoutCompanyDataInput!
}

input CategoryUpsertWithoutAssetsInput {
  update: CategoryUpdateWithoutAssetsDataInput!
  create: CategoryCreateWithoutAssetsInput!
}

input CategoryUpsertWithoutEquitiesInput {
  update: CategoryUpdateWithoutEquitiesDataInput!
  create: CategoryCreateWithoutEquitiesInput!
}

input CategoryUpsertWithoutExpensesInput {
  update: CategoryUpdateWithoutExpensesDataInput!
  create: CategoryCreateWithoutExpensesInput!
}

input CategoryUpsertWithoutGrowthFunnelsInput {
  update: CategoryUpdateWithoutGrowthFunnelsDataInput!
  create: CategoryCreateWithoutGrowthFunnelsInput!
}

input CategoryUpsertWithoutLiabilitiesInput {
  update: CategoryUpdateWithoutLiabilitiesDataInput!
  create: CategoryCreateWithoutLiabilitiesInput!
}

input CategoryUpsertWithoutPeopleInput {
  update: CategoryUpdateWithoutPeopleDataInput!
  create: CategoryCreateWithoutPeopleInput!
}

input CategoryUpsertWithoutProductsInput {
  update: CategoryUpdateWithoutProductsDataInput!
  create: CategoryCreateWithoutProductsInput!
}

input CategoryUpsertWithWhereUniqueWithoutCompanyInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateWithoutCompanyDataInput!
  create: CategoryCreateWithoutCompanyInput!
}

input CategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  subjectType: SubjectType
  subjectType_not: SubjectType
  subjectType_in: [SubjectType!]
  subjectType_not_in: [SubjectType!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_lt: String
  key_lte: String
  key_gt: String
  key_gte: String
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  company: CompanyWhereInput
  assets_every: AssetWhereInput
  assets_some: AssetWhereInput
  assets_none: AssetWhereInput
  equities_every: EquityWhereInput
  equities_some: EquityWhereInput
  equities_none: EquityWhereInput
  expenses_every: ExpenseWhereInput
  expenses_some: ExpenseWhereInput
  expenses_none: ExpenseWhereInput
  growthFunnels_every: GrowthFunnelWhereInput
  growthFunnels_some: GrowthFunnelWhereInput
  growthFunnels_none: GrowthFunnelWhereInput
  liabilities_every: LiabilityWhereInput
  liabilities_some: LiabilityWhereInput
  liabilities_none: LiabilityWhereInput
  people_every: PersonWhereInput
  people_some: PersonWhereInput
  people_none: PersonWhereInput
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
}

input CategoryWhereUniqueInput {
  id: ID
  key: String
}

type Company {
  id: ID!
  createdAt: DateTime!
  name: String!
  industry: String!
  size: String!
  fundingStage: FundingStage!
  customerId: String
  team(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  assets(where: AssetWhereInput, orderBy: AssetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Asset!]
  departments(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Department!]
  equities(where: EquityWhereInput, orderBy: EquityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Equity!]
  expenses(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense!]
  growthFunnels(where: GrowthFunnelWhereInput, orderBy: GrowthFunnelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GrowthFunnel!]
  liabilities(where: LiabilityWhereInput, orderBy: LiabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Liability!]
  revenueStreams(where: RevenueStreamWhereInput, orderBy: RevenueStreamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RevenueStream!]
  scenarios(where: ScenarioWhereInput, orderBy: ScenarioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Scenario!]
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
}

type CompanyConnection {
  pageInfo: PageInfo!
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

input CompanyCreateInput {
  id: ID
  name: String!
  industry: String!
  size: String!
  fundingStage: FundingStage!
  customerId: String
  team: UserCreateManyWithoutCompanyInput
  assets: AssetCreateManyWithoutCompanyInput
  departments: DepartmentCreateManyWithoutCompanyInput
  equities: EquityCreateManyWithoutCompanyInput
  expenses: ExpenseCreateManyWithoutCompanyInput
  growthFunnels: GrowthFunnelCreateManyWithoutCompanyInput
  liabilities: LiabilityCreateManyWithoutCompanyInput
  revenueStreams: RevenueStreamCreateManyWithoutCompanyInput
  scenarios: ScenarioCreateManyWithoutCompanyInput
  categories: CategoryCreateManyWithoutCompanyInput
}

input CompanyCreateOneInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutAssetsInput {
  create: CompanyCreateWithoutAssetsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutCategoriesInput {
  create: CompanyCreateWithoutCategoriesInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutDepartmentsInput {
  create: CompanyCreateWithoutDepartmentsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutEquitiesInput {
  create: CompanyCreateWithoutEquitiesInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutExpensesInput {
  create: CompanyCreateWithoutExpensesInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutGrowthFunnelsInput {
  create: CompanyCreateWithoutGrowthFunnelsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutLiabilitiesInput {
  create: CompanyCreateWithoutLiabilitiesInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutRevenueStreamsInput {
  create: CompanyCreateWithoutRevenueStreamsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutScenariosInput {
  create: CompanyCreateWithoutScenariosInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutTeamInput {
  create: CompanyCreateWithoutTeamInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutAssetsInput {
  id: ID
  name: String!
  industry: String!
  size: String!
  fundingStage: FundingStage!
  customerId: String
  team: UserCreateManyWithoutCompanyInput
  departments: DepartmentCreateManyWithoutCompanyInput
  equities: EquityCreateManyWithoutCompanyInput
  expenses: ExpenseCreateManyWithoutCompanyInput
  growthFunnels: GrowthFunnelCreateManyWithoutCompanyInput
  liabilities: LiabilityCreateManyWithoutCompanyInput
  revenueStreams: RevenueStreamCreateManyWithoutCompanyInput
  scenarios: ScenarioCreateManyWithoutCompanyInput
  categories: CategoryCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutCategoriesInput {
  id: ID
  name: String!
  industry: String!
  size: String!
  fundingStage: FundingStage!
  customerId: String
  team: UserCreateManyWithoutCompanyInput
  assets: AssetCreateManyWithoutCompanyInput
  departments: DepartmentCreateManyWithoutCompanyInput
  equities: EquityCreateManyWithoutCompanyInput
  expenses: ExpenseCreateManyWithoutCompanyInput
  growthFunnels: GrowthFunnelCreateManyWithoutCompanyInput
  liabilities: LiabilityCreateManyWithoutCompanyInput
  revenueStreams: RevenueStreamCreateManyWithoutCompanyInput
  scenarios: ScenarioCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutDepartmentsInput {
  id: ID
  name: String!
  industry: String!
  size: String!
  fundingStage: FundingStage!
  customerId: String
  team: UserCreateManyWithoutCompanyInput
  assets: AssetCreateManyWithoutCompanyInput
  equities: EquityCreateManyWithoutCompanyInput
  expenses: ExpenseCreateManyWithoutCompanyInput
  growthFunnels: GrowthFunnelCreateManyWithoutCompanyInput
  liabilities: LiabilityCreateManyWithoutCompanyInput
  revenueStreams: RevenueStreamCreateManyWithoutCompanyInput
  scenarios: ScenarioCreateManyWithoutCompanyInput
  categories: CategoryCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutEquitiesInput {
  id: ID
  name: String!
  industry: String!
  size: String!
  fundingStage: FundingStage!
  customerId: String
  team: UserCreateManyWithoutCompanyInput
  assets: AssetCreateManyWithoutCompanyInput
  departments: DepartmentCreateManyWithoutCompanyInput
  expenses: ExpenseCreateManyWithoutCompanyInput
  growthFunnels: GrowthFunnelCreateManyWithoutCompanyInput
  liabilities: LiabilityCreateManyWithoutCompanyInput
  revenueStreams: RevenueStreamCreateManyWithoutCompanyInput
  scenarios: ScenarioCreateManyWithoutCompanyInput
  categories: CategoryCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutExpensesInput {
  id: ID
  name: String!
  industry: String!
  size: String!
  fundingStage: FundingStage!
  customerId: String
  team: UserCreateManyWithoutCompanyInput
  assets: AssetCreateManyWithoutCompanyInput
  departments: DepartmentCreateManyWithoutCompanyInput
  equities: EquityCreateManyWithoutCompanyInput
  growthFunnels: GrowthFunnelCreateManyWithoutCompanyInput
  liabilities: LiabilityCreateManyWithoutCompanyInput
  revenueStreams: RevenueStreamCreateManyWithoutCompanyInput
  scenarios: ScenarioCreateManyWithoutCompanyInput
  categories: CategoryCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutGrowthFunnelsInput {
  id: ID
  name: String!
  industry: String!
  size: String!
  fundingStage: FundingStage!
  customerId: String
  team: UserCreateManyWithoutCompanyInput
  assets: AssetCreateManyWithoutCompanyInput
  departments: DepartmentCreateManyWithoutCompanyInput
  equities: EquityCreateManyWithoutCompanyInput
  expenses: ExpenseCreateManyWithoutCompanyInput
  liabilities: LiabilityCreateManyWithoutCompanyInput
  revenueStreams: RevenueStreamCreateManyWithoutCompanyInput
  scenarios: ScenarioCreateManyWithoutCompanyInput
  categories: CategoryCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutLiabilitiesInput {
  id: ID
  name: String!
  industry: String!
  size: String!
  fundingStage: FundingStage!
  customerId: String
  team: UserCreateManyWithoutCompanyInput
  assets: AssetCreateManyWithoutCompanyInput
  departments: DepartmentCreateManyWithoutCompanyInput
  equities: EquityCreateManyWithoutCompanyInput
  expenses: ExpenseCreateManyWithoutCompanyInput
  growthFunnels: GrowthFunnelCreateManyWithoutCompanyInput
  revenueStreams: RevenueStreamCreateManyWithoutCompanyInput
  scenarios: ScenarioCreateManyWithoutCompanyInput
  categories: CategoryCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutRevenueStreamsInput {
  id: ID
  name: String!
  industry: String!
  size: String!
  fundingStage: FundingStage!
  customerId: String
  team: UserCreateManyWithoutCompanyInput
  assets: AssetCreateManyWithoutCompanyInput
  departments: DepartmentCreateManyWithoutCompanyInput
  equities: EquityCreateManyWithoutCompanyInput
  expenses: ExpenseCreateManyWithoutCompanyInput
  growthFunnels: GrowthFunnelCreateManyWithoutCompanyInput
  liabilities: LiabilityCreateManyWithoutCompanyInput
  scenarios: ScenarioCreateManyWithoutCompanyInput
  categories: CategoryCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutScenariosInput {
  id: ID
  name: String!
  industry: String!
  size: String!
  fundingStage: FundingStage!
  customerId: String
  team: UserCreateManyWithoutCompanyInput
  assets: AssetCreateManyWithoutCompanyInput
  departments: DepartmentCreateManyWithoutCompanyInput
  equities: EquityCreateManyWithoutCompanyInput
  expenses: ExpenseCreateManyWithoutCompanyInput
  growthFunnels: GrowthFunnelCreateManyWithoutCompanyInput
  liabilities: LiabilityCreateManyWithoutCompanyInput
  revenueStreams: RevenueStreamCreateManyWithoutCompanyInput
  categories: CategoryCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutTeamInput {
  id: ID
  name: String!
  industry: String!
  size: String!
  fundingStage: FundingStage!
  customerId: String
  assets: AssetCreateManyWithoutCompanyInput
  departments: DepartmentCreateManyWithoutCompanyInput
  equities: EquityCreateManyWithoutCompanyInput
  expenses: ExpenseCreateManyWithoutCompanyInput
  growthFunnels: GrowthFunnelCreateManyWithoutCompanyInput
  liabilities: LiabilityCreateManyWithoutCompanyInput
  revenueStreams: RevenueStreamCreateManyWithoutCompanyInput
  scenarios: ScenarioCreateManyWithoutCompanyInput
  categories: CategoryCreateManyWithoutCompanyInput
}

type CompanyEdge {
  node: Company!
  cursor: String!
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  industry_ASC
  industry_DESC
  size_ASC
  size_DESC
  fundingStage_ASC
  fundingStage_DESC
  customerId_ASC
  customerId_DESC
}

type CompanyPreviousValues {
  id: ID!
  createdAt: DateTime!
  name: String!
  industry: String!
  size: String!
  fundingStage: FundingStage!
  customerId: String
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
  AND: [CompanySubscriptionWhereInput!]
  OR: [CompanySubscriptionWhereInput!]
  NOT: [CompanySubscriptionWhereInput!]
}

input CompanyUpdateDataInput {
  name: String
  industry: String
  size: String
  fundingStage: FundingStage
  customerId: String
  team: UserUpdateManyWithoutCompanyInput
  assets: AssetUpdateManyWithoutCompanyInput
  departments: DepartmentUpdateManyWithoutCompanyInput
  equities: EquityUpdateManyWithoutCompanyInput
  expenses: ExpenseUpdateManyWithoutCompanyInput
  growthFunnels: GrowthFunnelUpdateManyWithoutCompanyInput
  liabilities: LiabilityUpdateManyWithoutCompanyInput
  revenueStreams: RevenueStreamUpdateManyWithoutCompanyInput
  scenarios: ScenarioUpdateManyWithoutCompanyInput
  categories: CategoryUpdateManyWithoutCompanyInput
}

input CompanyUpdateInput {
  name: String
  industry: String
  size: String
  fundingStage: FundingStage
  customerId: String
  team: UserUpdateManyWithoutCompanyInput
  assets: AssetUpdateManyWithoutCompanyInput
  departments: DepartmentUpdateManyWithoutCompanyInput
  equities: EquityUpdateManyWithoutCompanyInput
  expenses: ExpenseUpdateManyWithoutCompanyInput
  growthFunnels: GrowthFunnelUpdateManyWithoutCompanyInput
  liabilities: LiabilityUpdateManyWithoutCompanyInput
  revenueStreams: RevenueStreamUpdateManyWithoutCompanyInput
  scenarios: ScenarioUpdateManyWithoutCompanyInput
  categories: CategoryUpdateManyWithoutCompanyInput
}

input CompanyUpdateManyMutationInput {
  name: String
  industry: String
  size: String
  fundingStage: FundingStage
  customerId: String
}

input CompanyUpdateOneInput {
  create: CompanyCreateInput
  update: CompanyUpdateDataInput
  upsert: CompanyUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateOneRequiredWithoutAssetsInput {
  create: CompanyCreateWithoutAssetsInput
  update: CompanyUpdateWithoutAssetsDataInput
  upsert: CompanyUpsertWithoutAssetsInput
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateOneRequiredWithoutDepartmentsInput {
  create: CompanyCreateWithoutDepartmentsInput
  update: CompanyUpdateWithoutDepartmentsDataInput
  upsert: CompanyUpsertWithoutDepartmentsInput
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateOneRequiredWithoutEquitiesInput {
  create: CompanyCreateWithoutEquitiesInput
  update: CompanyUpdateWithoutEquitiesDataInput
  upsert: CompanyUpsertWithoutEquitiesInput
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateOneRequiredWithoutExpensesInput {
  create: CompanyCreateWithoutExpensesInput
  update: CompanyUpdateWithoutExpensesDataInput
  upsert: CompanyUpsertWithoutExpensesInput
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateOneRequiredWithoutGrowthFunnelsInput {
  create: CompanyCreateWithoutGrowthFunnelsInput
  update: CompanyUpdateWithoutGrowthFunnelsDataInput
  upsert: CompanyUpsertWithoutGrowthFunnelsInput
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateOneRequiredWithoutLiabilitiesInput {
  create: CompanyCreateWithoutLiabilitiesInput
  update: CompanyUpdateWithoutLiabilitiesDataInput
  upsert: CompanyUpsertWithoutLiabilitiesInput
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateOneRequiredWithoutRevenueStreamsInput {
  create: CompanyCreateWithoutRevenueStreamsInput
  update: CompanyUpdateWithoutRevenueStreamsDataInput
  upsert: CompanyUpsertWithoutRevenueStreamsInput
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateOneRequiredWithoutScenariosInput {
  create: CompanyCreateWithoutScenariosInput
  update: CompanyUpdateWithoutScenariosDataInput
  upsert: CompanyUpsertWithoutScenariosInput
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateOneWithoutCategoriesInput {
  create: CompanyCreateWithoutCategoriesInput
  update: CompanyUpdateWithoutCategoriesDataInput
  upsert: CompanyUpsertWithoutCategoriesInput
  delete: Boolean
  disconnect: Boolean
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateOneWithoutTeamInput {
  create: CompanyCreateWithoutTeamInput
  update: CompanyUpdateWithoutTeamDataInput
  upsert: CompanyUpsertWithoutTeamInput
  delete: Boolean
  disconnect: Boolean
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateWithoutAssetsDataInput {
  name: String
  industry: String
  size: String
  fundingStage: FundingStage
  customerId: String
  team: UserUpdateManyWithoutCompanyInput
  departments: DepartmentUpdateManyWithoutCompanyInput
  equities: EquityUpdateManyWithoutCompanyInput
  expenses: ExpenseUpdateManyWithoutCompanyInput
  growthFunnels: GrowthFunnelUpdateManyWithoutCompanyInput
  liabilities: LiabilityUpdateManyWithoutCompanyInput
  revenueStreams: RevenueStreamUpdateManyWithoutCompanyInput
  scenarios: ScenarioUpdateManyWithoutCompanyInput
  categories: CategoryUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutCategoriesDataInput {
  name: String
  industry: String
  size: String
  fundingStage: FundingStage
  customerId: String
  team: UserUpdateManyWithoutCompanyInput
  assets: AssetUpdateManyWithoutCompanyInput
  departments: DepartmentUpdateManyWithoutCompanyInput
  equities: EquityUpdateManyWithoutCompanyInput
  expenses: ExpenseUpdateManyWithoutCompanyInput
  growthFunnels: GrowthFunnelUpdateManyWithoutCompanyInput
  liabilities: LiabilityUpdateManyWithoutCompanyInput
  revenueStreams: RevenueStreamUpdateManyWithoutCompanyInput
  scenarios: ScenarioUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutDepartmentsDataInput {
  name: String
  industry: String
  size: String
  fundingStage: FundingStage
  customerId: String
  team: UserUpdateManyWithoutCompanyInput
  assets: AssetUpdateManyWithoutCompanyInput
  equities: EquityUpdateManyWithoutCompanyInput
  expenses: ExpenseUpdateManyWithoutCompanyInput
  growthFunnels: GrowthFunnelUpdateManyWithoutCompanyInput
  liabilities: LiabilityUpdateManyWithoutCompanyInput
  revenueStreams: RevenueStreamUpdateManyWithoutCompanyInput
  scenarios: ScenarioUpdateManyWithoutCompanyInput
  categories: CategoryUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutEquitiesDataInput {
  name: String
  industry: String
  size: String
  fundingStage: FundingStage
  customerId: String
  team: UserUpdateManyWithoutCompanyInput
  assets: AssetUpdateManyWithoutCompanyInput
  departments: DepartmentUpdateManyWithoutCompanyInput
  expenses: ExpenseUpdateManyWithoutCompanyInput
  growthFunnels: GrowthFunnelUpdateManyWithoutCompanyInput
  liabilities: LiabilityUpdateManyWithoutCompanyInput
  revenueStreams: RevenueStreamUpdateManyWithoutCompanyInput
  scenarios: ScenarioUpdateManyWithoutCompanyInput
  categories: CategoryUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutExpensesDataInput {
  name: String
  industry: String
  size: String
  fundingStage: FundingStage
  customerId: String
  team: UserUpdateManyWithoutCompanyInput
  assets: AssetUpdateManyWithoutCompanyInput
  departments: DepartmentUpdateManyWithoutCompanyInput
  equities: EquityUpdateManyWithoutCompanyInput
  growthFunnels: GrowthFunnelUpdateManyWithoutCompanyInput
  liabilities: LiabilityUpdateManyWithoutCompanyInput
  revenueStreams: RevenueStreamUpdateManyWithoutCompanyInput
  scenarios: ScenarioUpdateManyWithoutCompanyInput
  categories: CategoryUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutGrowthFunnelsDataInput {
  name: String
  industry: String
  size: String
  fundingStage: FundingStage
  customerId: String
  team: UserUpdateManyWithoutCompanyInput
  assets: AssetUpdateManyWithoutCompanyInput
  departments: DepartmentUpdateManyWithoutCompanyInput
  equities: EquityUpdateManyWithoutCompanyInput
  expenses: ExpenseUpdateManyWithoutCompanyInput
  liabilities: LiabilityUpdateManyWithoutCompanyInput
  revenueStreams: RevenueStreamUpdateManyWithoutCompanyInput
  scenarios: ScenarioUpdateManyWithoutCompanyInput
  categories: CategoryUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutLiabilitiesDataInput {
  name: String
  industry: String
  size: String
  fundingStage: FundingStage
  customerId: String
  team: UserUpdateManyWithoutCompanyInput
  assets: AssetUpdateManyWithoutCompanyInput
  departments: DepartmentUpdateManyWithoutCompanyInput
  equities: EquityUpdateManyWithoutCompanyInput
  expenses: ExpenseUpdateManyWithoutCompanyInput
  growthFunnels: GrowthFunnelUpdateManyWithoutCompanyInput
  revenueStreams: RevenueStreamUpdateManyWithoutCompanyInput
  scenarios: ScenarioUpdateManyWithoutCompanyInput
  categories: CategoryUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutRevenueStreamsDataInput {
  name: String
  industry: String
  size: String
  fundingStage: FundingStage
  customerId: String
  team: UserUpdateManyWithoutCompanyInput
  assets: AssetUpdateManyWithoutCompanyInput
  departments: DepartmentUpdateManyWithoutCompanyInput
  equities: EquityUpdateManyWithoutCompanyInput
  expenses: ExpenseUpdateManyWithoutCompanyInput
  growthFunnels: GrowthFunnelUpdateManyWithoutCompanyInput
  liabilities: LiabilityUpdateManyWithoutCompanyInput
  scenarios: ScenarioUpdateManyWithoutCompanyInput
  categories: CategoryUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutScenariosDataInput {
  name: String
  industry: String
  size: String
  fundingStage: FundingStage
  customerId: String
  team: UserUpdateManyWithoutCompanyInput
  assets: AssetUpdateManyWithoutCompanyInput
  departments: DepartmentUpdateManyWithoutCompanyInput
  equities: EquityUpdateManyWithoutCompanyInput
  expenses: ExpenseUpdateManyWithoutCompanyInput
  growthFunnels: GrowthFunnelUpdateManyWithoutCompanyInput
  liabilities: LiabilityUpdateManyWithoutCompanyInput
  revenueStreams: RevenueStreamUpdateManyWithoutCompanyInput
  categories: CategoryUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutTeamDataInput {
  name: String
  industry: String
  size: String
  fundingStage: FundingStage
  customerId: String
  assets: AssetUpdateManyWithoutCompanyInput
  departments: DepartmentUpdateManyWithoutCompanyInput
  equities: EquityUpdateManyWithoutCompanyInput
  expenses: ExpenseUpdateManyWithoutCompanyInput
  growthFunnels: GrowthFunnelUpdateManyWithoutCompanyInput
  liabilities: LiabilityUpdateManyWithoutCompanyInput
  revenueStreams: RevenueStreamUpdateManyWithoutCompanyInput
  scenarios: ScenarioUpdateManyWithoutCompanyInput
  categories: CategoryUpdateManyWithoutCompanyInput
}

input CompanyUpsertNestedInput {
  update: CompanyUpdateDataInput!
  create: CompanyCreateInput!
}

input CompanyUpsertWithoutAssetsInput {
  update: CompanyUpdateWithoutAssetsDataInput!
  create: CompanyCreateWithoutAssetsInput!
}

input CompanyUpsertWithoutCategoriesInput {
  update: CompanyUpdateWithoutCategoriesDataInput!
  create: CompanyCreateWithoutCategoriesInput!
}

input CompanyUpsertWithoutDepartmentsInput {
  update: CompanyUpdateWithoutDepartmentsDataInput!
  create: CompanyCreateWithoutDepartmentsInput!
}

input CompanyUpsertWithoutEquitiesInput {
  update: CompanyUpdateWithoutEquitiesDataInput!
  create: CompanyCreateWithoutEquitiesInput!
}

input CompanyUpsertWithoutExpensesInput {
  update: CompanyUpdateWithoutExpensesDataInput!
  create: CompanyCreateWithoutExpensesInput!
}

input CompanyUpsertWithoutGrowthFunnelsInput {
  update: CompanyUpdateWithoutGrowthFunnelsDataInput!
  create: CompanyCreateWithoutGrowthFunnelsInput!
}

input CompanyUpsertWithoutLiabilitiesInput {
  update: CompanyUpdateWithoutLiabilitiesDataInput!
  create: CompanyCreateWithoutLiabilitiesInput!
}

input CompanyUpsertWithoutRevenueStreamsInput {
  update: CompanyUpdateWithoutRevenueStreamsDataInput!
  create: CompanyCreateWithoutRevenueStreamsInput!
}

input CompanyUpsertWithoutScenariosInput {
  update: CompanyUpdateWithoutScenariosDataInput!
  create: CompanyCreateWithoutScenariosInput!
}

input CompanyUpsertWithoutTeamInput {
  update: CompanyUpdateWithoutTeamDataInput!
  create: CompanyCreateWithoutTeamInput!
}

input CompanyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  industry: String
  industry_not: String
  industry_in: [String!]
  industry_not_in: [String!]
  industry_lt: String
  industry_lte: String
  industry_gt: String
  industry_gte: String
  industry_contains: String
  industry_not_contains: String
  industry_starts_with: String
  industry_not_starts_with: String
  industry_ends_with: String
  industry_not_ends_with: String
  size: String
  size_not: String
  size_in: [String!]
  size_not_in: [String!]
  size_lt: String
  size_lte: String
  size_gt: String
  size_gte: String
  size_contains: String
  size_not_contains: String
  size_starts_with: String
  size_not_starts_with: String
  size_ends_with: String
  size_not_ends_with: String
  fundingStage: FundingStage
  fundingStage_not: FundingStage
  fundingStage_in: [FundingStage!]
  fundingStage_not_in: [FundingStage!]
  customerId: String
  customerId_not: String
  customerId_in: [String!]
  customerId_not_in: [String!]
  customerId_lt: String
  customerId_lte: String
  customerId_gt: String
  customerId_gte: String
  customerId_contains: String
  customerId_not_contains: String
  customerId_starts_with: String
  customerId_not_starts_with: String
  customerId_ends_with: String
  customerId_not_ends_with: String
  team_every: UserWhereInput
  team_some: UserWhereInput
  team_none: UserWhereInput
  assets_every: AssetWhereInput
  assets_some: AssetWhereInput
  assets_none: AssetWhereInput
  departments_every: DepartmentWhereInput
  departments_some: DepartmentWhereInput
  departments_none: DepartmentWhereInput
  equities_every: EquityWhereInput
  equities_some: EquityWhereInput
  equities_none: EquityWhereInput
  expenses_every: ExpenseWhereInput
  expenses_some: ExpenseWhereInput
  expenses_none: ExpenseWhereInput
  growthFunnels_every: GrowthFunnelWhereInput
  growthFunnels_some: GrowthFunnelWhereInput
  growthFunnels_none: GrowthFunnelWhereInput
  liabilities_every: LiabilityWhereInput
  liabilities_some: LiabilityWhereInput
  liabilities_none: LiabilityWhereInput
  revenueStreams_every: RevenueStreamWhereInput
  revenueStreams_some: RevenueStreamWhereInput
  revenueStreams_none: RevenueStreamWhereInput
  scenarios_every: ScenarioWhereInput
  scenarios_some: ScenarioWhereInput
  scenarios_none: ScenarioWhereInput
  categories_every: CategoryWhereInput
  categories_some: CategoryWhereInput
  categories_none: CategoryWhereInput
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
}

input CompanyWhereUniqueInput {
  id: ID
}

scalar DateTime

type Department {
  id: ID!
  createdAt: DateTime!
  company: Company!
  scenarios(where: ScenarioWhereInput, orderBy: ScenarioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Scenario!]
  buildType: BuildType
  name: String!
  data: Json!
  people(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person!]
  isPublished: Boolean
}

type DepartmentConnection {
  pageInfo: PageInfo!
  edges: [DepartmentEdge]!
  aggregate: AggregateDepartment!
}

input DepartmentCreateInput {
  id: ID
  company: CompanyCreateOneWithoutDepartmentsInput!
  scenarios: ScenarioCreateManyWithoutDepartmentsInput
  buildType: BuildType
  name: String!
  data: Json!
  people: PersonCreateManyWithoutDepartmentInput
  isPublished: Boolean
}

input DepartmentCreateManyWithoutCompanyInput {
  create: [DepartmentCreateWithoutCompanyInput!]
  connect: [DepartmentWhereUniqueInput!]
}

input DepartmentCreateManyWithoutScenariosInput {
  create: [DepartmentCreateWithoutScenariosInput!]
  connect: [DepartmentWhereUniqueInput!]
}

input DepartmentCreateOneWithoutPeopleInput {
  create: DepartmentCreateWithoutPeopleInput
  connect: DepartmentWhereUniqueInput
}

input DepartmentCreateWithoutCompanyInput {
  id: ID
  scenarios: ScenarioCreateManyWithoutDepartmentsInput
  buildType: BuildType
  name: String!
  data: Json!
  people: PersonCreateManyWithoutDepartmentInput
  isPublished: Boolean
}

input DepartmentCreateWithoutPeopleInput {
  id: ID
  company: CompanyCreateOneWithoutDepartmentsInput!
  scenarios: ScenarioCreateManyWithoutDepartmentsInput
  buildType: BuildType
  name: String!
  data: Json!
  isPublished: Boolean
}

input DepartmentCreateWithoutScenariosInput {
  id: ID
  company: CompanyCreateOneWithoutDepartmentsInput!
  buildType: BuildType
  name: String!
  data: Json!
  people: PersonCreateManyWithoutDepartmentInput
  isPublished: Boolean
}

type DepartmentEdge {
  node: Department!
  cursor: String!
}

enum DepartmentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  buildType_ASC
  buildType_DESC
  name_ASC
  name_DESC
  data_ASC
  data_DESC
  isPublished_ASC
  isPublished_DESC
}

type DepartmentPreviousValues {
  id: ID!
  createdAt: DateTime!
  buildType: BuildType
  name: String!
  data: Json!
  isPublished: Boolean
}

input DepartmentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  buildType: BuildType
  buildType_not: BuildType
  buildType_in: [BuildType!]
  buildType_not_in: [BuildType!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  isPublished: Boolean
  isPublished_not: Boolean
  AND: [DepartmentScalarWhereInput!]
  OR: [DepartmentScalarWhereInput!]
  NOT: [DepartmentScalarWhereInput!]
}

type DepartmentSubscriptionPayload {
  mutation: MutationType!
  node: Department
  updatedFields: [String!]
  previousValues: DepartmentPreviousValues
}

input DepartmentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DepartmentWhereInput
  AND: [DepartmentSubscriptionWhereInput!]
  OR: [DepartmentSubscriptionWhereInput!]
  NOT: [DepartmentSubscriptionWhereInput!]
}

input DepartmentUpdateInput {
  company: CompanyUpdateOneRequiredWithoutDepartmentsInput
  scenarios: ScenarioUpdateManyWithoutDepartmentsInput
  buildType: BuildType
  name: String
  data: Json
  people: PersonUpdateManyWithoutDepartmentInput
  isPublished: Boolean
}

input DepartmentUpdateManyDataInput {
  buildType: BuildType
  name: String
  data: Json
  isPublished: Boolean
}

input DepartmentUpdateManyMutationInput {
  buildType: BuildType
  name: String
  data: Json
  isPublished: Boolean
}

input DepartmentUpdateManyWithoutCompanyInput {
  create: [DepartmentCreateWithoutCompanyInput!]
  delete: [DepartmentWhereUniqueInput!]
  connect: [DepartmentWhereUniqueInput!]
  set: [DepartmentWhereUniqueInput!]
  disconnect: [DepartmentWhereUniqueInput!]
  update: [DepartmentUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [DepartmentUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [DepartmentScalarWhereInput!]
  updateMany: [DepartmentUpdateManyWithWhereNestedInput!]
}

input DepartmentUpdateManyWithoutScenariosInput {
  create: [DepartmentCreateWithoutScenariosInput!]
  delete: [DepartmentWhereUniqueInput!]
  connect: [DepartmentWhereUniqueInput!]
  set: [DepartmentWhereUniqueInput!]
  disconnect: [DepartmentWhereUniqueInput!]
  update: [DepartmentUpdateWithWhereUniqueWithoutScenariosInput!]
  upsert: [DepartmentUpsertWithWhereUniqueWithoutScenariosInput!]
  deleteMany: [DepartmentScalarWhereInput!]
  updateMany: [DepartmentUpdateManyWithWhereNestedInput!]
}

input DepartmentUpdateManyWithWhereNestedInput {
  where: DepartmentScalarWhereInput!
  data: DepartmentUpdateManyDataInput!
}

input DepartmentUpdateOneRequiredWithoutPeopleInput {
  create: DepartmentCreateWithoutPeopleInput
  update: DepartmentUpdateWithoutPeopleDataInput
  upsert: DepartmentUpsertWithoutPeopleInput
  connect: DepartmentWhereUniqueInput
}

input DepartmentUpdateWithoutCompanyDataInput {
  scenarios: ScenarioUpdateManyWithoutDepartmentsInput
  buildType: BuildType
  name: String
  data: Json
  people: PersonUpdateManyWithoutDepartmentInput
  isPublished: Boolean
}

input DepartmentUpdateWithoutPeopleDataInput {
  company: CompanyUpdateOneRequiredWithoutDepartmentsInput
  scenarios: ScenarioUpdateManyWithoutDepartmentsInput
  buildType: BuildType
  name: String
  data: Json
  isPublished: Boolean
}

input DepartmentUpdateWithoutScenariosDataInput {
  company: CompanyUpdateOneRequiredWithoutDepartmentsInput
  buildType: BuildType
  name: String
  data: Json
  people: PersonUpdateManyWithoutDepartmentInput
  isPublished: Boolean
}

input DepartmentUpdateWithWhereUniqueWithoutCompanyInput {
  where: DepartmentWhereUniqueInput!
  data: DepartmentUpdateWithoutCompanyDataInput!
}

input DepartmentUpdateWithWhereUniqueWithoutScenariosInput {
  where: DepartmentWhereUniqueInput!
  data: DepartmentUpdateWithoutScenariosDataInput!
}

input DepartmentUpsertWithoutPeopleInput {
  update: DepartmentUpdateWithoutPeopleDataInput!
  create: DepartmentCreateWithoutPeopleInput!
}

input DepartmentUpsertWithWhereUniqueWithoutCompanyInput {
  where: DepartmentWhereUniqueInput!
  update: DepartmentUpdateWithoutCompanyDataInput!
  create: DepartmentCreateWithoutCompanyInput!
}

input DepartmentUpsertWithWhereUniqueWithoutScenariosInput {
  where: DepartmentWhereUniqueInput!
  update: DepartmentUpdateWithoutScenariosDataInput!
  create: DepartmentCreateWithoutScenariosInput!
}

input DepartmentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  company: CompanyWhereInput
  scenarios_every: ScenarioWhereInput
  scenarios_some: ScenarioWhereInput
  scenarios_none: ScenarioWhereInput
  buildType: BuildType
  buildType_not: BuildType
  buildType_in: [BuildType!]
  buildType_not_in: [BuildType!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  people_every: PersonWhereInput
  people_some: PersonWhereInput
  people_none: PersonWhereInput
  isPublished: Boolean
  isPublished_not: Boolean
  AND: [DepartmentWhereInput!]
  OR: [DepartmentWhereInput!]
  NOT: [DepartmentWhereInput!]
}

input DepartmentWhereUniqueInput {
  id: ID
}

type Equity {
  id: ID!
  createdAt: DateTime!
  company: Company!
  scenarios(where: ScenarioWhereInput, orderBy: ScenarioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Scenario!]
  category: Category
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  equityType: EquityType!
  name: String!
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json!
  metrics(where: MetricWhereInput, orderBy: MetricOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Metric!]
  isPublished: Boolean
}

type EquityConnection {
  pageInfo: PageInfo!
  edges: [EquityEdge]!
  aggregate: AggregateEquity!
}

input EquityCreateInput {
  id: ID
  company: CompanyCreateOneWithoutEquitiesInput!
  scenarios: ScenarioCreateManyWithoutEquitiesInput
  category: CategoryCreateOneWithoutEquitiesInput
  tags: TagCreateManyWithoutEquitiesInput
  equityType: EquityType!
  name: String!
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json!
  metrics: MetricCreateManyWithoutEquityInput
  isPublished: Boolean
}

input EquityCreateManyWithoutCategoryInput {
  create: [EquityCreateWithoutCategoryInput!]
  connect: [EquityWhereUniqueInput!]
}

input EquityCreateManyWithoutCompanyInput {
  create: [EquityCreateWithoutCompanyInput!]
  connect: [EquityWhereUniqueInput!]
}

input EquityCreateManyWithoutScenariosInput {
  create: [EquityCreateWithoutScenariosInput!]
  connect: [EquityWhereUniqueInput!]
}

input EquityCreateManyWithoutTagsInput {
  create: [EquityCreateWithoutTagsInput!]
  connect: [EquityWhereUniqueInput!]
}

input EquityCreateOneWithoutMetricsInput {
  create: EquityCreateWithoutMetricsInput
  connect: EquityWhereUniqueInput
}

input EquityCreateWithoutCategoryInput {
  id: ID
  company: CompanyCreateOneWithoutEquitiesInput!
  scenarios: ScenarioCreateManyWithoutEquitiesInput
  tags: TagCreateManyWithoutEquitiesInput
  equityType: EquityType!
  name: String!
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json!
  metrics: MetricCreateManyWithoutEquityInput
  isPublished: Boolean
}

input EquityCreateWithoutCompanyInput {
  id: ID
  scenarios: ScenarioCreateManyWithoutEquitiesInput
  category: CategoryCreateOneWithoutEquitiesInput
  tags: TagCreateManyWithoutEquitiesInput
  equityType: EquityType!
  name: String!
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json!
  metrics: MetricCreateManyWithoutEquityInput
  isPublished: Boolean
}

input EquityCreateWithoutMetricsInput {
  id: ID
  company: CompanyCreateOneWithoutEquitiesInput!
  scenarios: ScenarioCreateManyWithoutEquitiesInput
  category: CategoryCreateOneWithoutEquitiesInput
  tags: TagCreateManyWithoutEquitiesInput
  equityType: EquityType!
  name: String!
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json!
  isPublished: Boolean
}

input EquityCreateWithoutScenariosInput {
  id: ID
  company: CompanyCreateOneWithoutEquitiesInput!
  category: CategoryCreateOneWithoutEquitiesInput
  tags: TagCreateManyWithoutEquitiesInput
  equityType: EquityType!
  name: String!
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json!
  metrics: MetricCreateManyWithoutEquityInput
  isPublished: Boolean
}

input EquityCreateWithoutTagsInput {
  id: ID
  company: CompanyCreateOneWithoutEquitiesInput!
  scenarios: ScenarioCreateManyWithoutEquitiesInput
  category: CategoryCreateOneWithoutEquitiesInput
  equityType: EquityType!
  name: String!
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json!
  metrics: MetricCreateManyWithoutEquityInput
  isPublished: Boolean
}

type EquityEdge {
  node: Equity!
  cursor: String!
}

enum EquityOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  equityType_ASC
  equityType_DESC
  name_ASC
  name_DESC
  startTimestamp_ASC
  startTimestamp_DESC
  endTimestamp_ASC
  endTimestamp_DESC
  data_ASC
  data_DESC
  isPublished_ASC
  isPublished_DESC
}

type EquityPreviousValues {
  id: ID!
  createdAt: DateTime!
  equityType: EquityType!
  name: String!
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json!
  isPublished: Boolean
}

input EquityScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  equityType: EquityType
  equityType_not: EquityType
  equityType_in: [EquityType!]
  equityType_not_in: [EquityType!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  startTimestamp: DateTime
  startTimestamp_not: DateTime
  startTimestamp_in: [DateTime!]
  startTimestamp_not_in: [DateTime!]
  startTimestamp_lt: DateTime
  startTimestamp_lte: DateTime
  startTimestamp_gt: DateTime
  startTimestamp_gte: DateTime
  endTimestamp: DateTime
  endTimestamp_not: DateTime
  endTimestamp_in: [DateTime!]
  endTimestamp_not_in: [DateTime!]
  endTimestamp_lt: DateTime
  endTimestamp_lte: DateTime
  endTimestamp_gt: DateTime
  endTimestamp_gte: DateTime
  isPublished: Boolean
  isPublished_not: Boolean
  AND: [EquityScalarWhereInput!]
  OR: [EquityScalarWhereInput!]
  NOT: [EquityScalarWhereInput!]
}

type EquitySubscriptionPayload {
  mutation: MutationType!
  node: Equity
  updatedFields: [String!]
  previousValues: EquityPreviousValues
}

input EquitySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EquityWhereInput
  AND: [EquitySubscriptionWhereInput!]
  OR: [EquitySubscriptionWhereInput!]
  NOT: [EquitySubscriptionWhereInput!]
}

enum EquityType {
  EQUITY_INVESTMENT
  EQUITY_ACCUMULATED_RETAINED_EARNINGS
  CUSTOM
}

input EquityUpdateInput {
  company: CompanyUpdateOneRequiredWithoutEquitiesInput
  scenarios: ScenarioUpdateManyWithoutEquitiesInput
  category: CategoryUpdateOneWithoutEquitiesInput
  tags: TagUpdateManyWithoutEquitiesInput
  equityType: EquityType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  metrics: MetricUpdateManyWithoutEquityInput
  isPublished: Boolean
}

input EquityUpdateManyDataInput {
  equityType: EquityType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  isPublished: Boolean
}

input EquityUpdateManyMutationInput {
  equityType: EquityType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  isPublished: Boolean
}

input EquityUpdateManyWithoutCategoryInput {
  create: [EquityCreateWithoutCategoryInput!]
  delete: [EquityWhereUniqueInput!]
  connect: [EquityWhereUniqueInput!]
  set: [EquityWhereUniqueInput!]
  disconnect: [EquityWhereUniqueInput!]
  update: [EquityUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [EquityUpsertWithWhereUniqueWithoutCategoryInput!]
  deleteMany: [EquityScalarWhereInput!]
  updateMany: [EquityUpdateManyWithWhereNestedInput!]
}

input EquityUpdateManyWithoutCompanyInput {
  create: [EquityCreateWithoutCompanyInput!]
  delete: [EquityWhereUniqueInput!]
  connect: [EquityWhereUniqueInput!]
  set: [EquityWhereUniqueInput!]
  disconnect: [EquityWhereUniqueInput!]
  update: [EquityUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [EquityUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [EquityScalarWhereInput!]
  updateMany: [EquityUpdateManyWithWhereNestedInput!]
}

input EquityUpdateManyWithoutScenariosInput {
  create: [EquityCreateWithoutScenariosInput!]
  delete: [EquityWhereUniqueInput!]
  connect: [EquityWhereUniqueInput!]
  set: [EquityWhereUniqueInput!]
  disconnect: [EquityWhereUniqueInput!]
  update: [EquityUpdateWithWhereUniqueWithoutScenariosInput!]
  upsert: [EquityUpsertWithWhereUniqueWithoutScenariosInput!]
  deleteMany: [EquityScalarWhereInput!]
  updateMany: [EquityUpdateManyWithWhereNestedInput!]
}

input EquityUpdateManyWithoutTagsInput {
  create: [EquityCreateWithoutTagsInput!]
  delete: [EquityWhereUniqueInput!]
  connect: [EquityWhereUniqueInput!]
  set: [EquityWhereUniqueInput!]
  disconnect: [EquityWhereUniqueInput!]
  update: [EquityUpdateWithWhereUniqueWithoutTagsInput!]
  upsert: [EquityUpsertWithWhereUniqueWithoutTagsInput!]
  deleteMany: [EquityScalarWhereInput!]
  updateMany: [EquityUpdateManyWithWhereNestedInput!]
}

input EquityUpdateManyWithWhereNestedInput {
  where: EquityScalarWhereInput!
  data: EquityUpdateManyDataInput!
}

input EquityUpdateOneWithoutMetricsInput {
  create: EquityCreateWithoutMetricsInput
  update: EquityUpdateWithoutMetricsDataInput
  upsert: EquityUpsertWithoutMetricsInput
  delete: Boolean
  disconnect: Boolean
  connect: EquityWhereUniqueInput
}

input EquityUpdateWithoutCategoryDataInput {
  company: CompanyUpdateOneRequiredWithoutEquitiesInput
  scenarios: ScenarioUpdateManyWithoutEquitiesInput
  tags: TagUpdateManyWithoutEquitiesInput
  equityType: EquityType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  metrics: MetricUpdateManyWithoutEquityInput
  isPublished: Boolean
}

input EquityUpdateWithoutCompanyDataInput {
  scenarios: ScenarioUpdateManyWithoutEquitiesInput
  category: CategoryUpdateOneWithoutEquitiesInput
  tags: TagUpdateManyWithoutEquitiesInput
  equityType: EquityType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  metrics: MetricUpdateManyWithoutEquityInput
  isPublished: Boolean
}

input EquityUpdateWithoutMetricsDataInput {
  company: CompanyUpdateOneRequiredWithoutEquitiesInput
  scenarios: ScenarioUpdateManyWithoutEquitiesInput
  category: CategoryUpdateOneWithoutEquitiesInput
  tags: TagUpdateManyWithoutEquitiesInput
  equityType: EquityType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  isPublished: Boolean
}

input EquityUpdateWithoutScenariosDataInput {
  company: CompanyUpdateOneRequiredWithoutEquitiesInput
  category: CategoryUpdateOneWithoutEquitiesInput
  tags: TagUpdateManyWithoutEquitiesInput
  equityType: EquityType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  metrics: MetricUpdateManyWithoutEquityInput
  isPublished: Boolean
}

input EquityUpdateWithoutTagsDataInput {
  company: CompanyUpdateOneRequiredWithoutEquitiesInput
  scenarios: ScenarioUpdateManyWithoutEquitiesInput
  category: CategoryUpdateOneWithoutEquitiesInput
  equityType: EquityType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  metrics: MetricUpdateManyWithoutEquityInput
  isPublished: Boolean
}

input EquityUpdateWithWhereUniqueWithoutCategoryInput {
  where: EquityWhereUniqueInput!
  data: EquityUpdateWithoutCategoryDataInput!
}

input EquityUpdateWithWhereUniqueWithoutCompanyInput {
  where: EquityWhereUniqueInput!
  data: EquityUpdateWithoutCompanyDataInput!
}

input EquityUpdateWithWhereUniqueWithoutScenariosInput {
  where: EquityWhereUniqueInput!
  data: EquityUpdateWithoutScenariosDataInput!
}

input EquityUpdateWithWhereUniqueWithoutTagsInput {
  where: EquityWhereUniqueInput!
  data: EquityUpdateWithoutTagsDataInput!
}

input EquityUpsertWithoutMetricsInput {
  update: EquityUpdateWithoutMetricsDataInput!
  create: EquityCreateWithoutMetricsInput!
}

input EquityUpsertWithWhereUniqueWithoutCategoryInput {
  where: EquityWhereUniqueInput!
  update: EquityUpdateWithoutCategoryDataInput!
  create: EquityCreateWithoutCategoryInput!
}

input EquityUpsertWithWhereUniqueWithoutCompanyInput {
  where: EquityWhereUniqueInput!
  update: EquityUpdateWithoutCompanyDataInput!
  create: EquityCreateWithoutCompanyInput!
}

input EquityUpsertWithWhereUniqueWithoutScenariosInput {
  where: EquityWhereUniqueInput!
  update: EquityUpdateWithoutScenariosDataInput!
  create: EquityCreateWithoutScenariosInput!
}

input EquityUpsertWithWhereUniqueWithoutTagsInput {
  where: EquityWhereUniqueInput!
  update: EquityUpdateWithoutTagsDataInput!
  create: EquityCreateWithoutTagsInput!
}

input EquityWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  company: CompanyWhereInput
  scenarios_every: ScenarioWhereInput
  scenarios_some: ScenarioWhereInput
  scenarios_none: ScenarioWhereInput
  category: CategoryWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  equityType: EquityType
  equityType_not: EquityType
  equityType_in: [EquityType!]
  equityType_not_in: [EquityType!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  startTimestamp: DateTime
  startTimestamp_not: DateTime
  startTimestamp_in: [DateTime!]
  startTimestamp_not_in: [DateTime!]
  startTimestamp_lt: DateTime
  startTimestamp_lte: DateTime
  startTimestamp_gt: DateTime
  startTimestamp_gte: DateTime
  endTimestamp: DateTime
  endTimestamp_not: DateTime
  endTimestamp_in: [DateTime!]
  endTimestamp_not_in: [DateTime!]
  endTimestamp_lt: DateTime
  endTimestamp_lte: DateTime
  endTimestamp_gt: DateTime
  endTimestamp_gte: DateTime
  metrics_every: MetricWhereInput
  metrics_some: MetricWhereInput
  metrics_none: MetricWhereInput
  isPublished: Boolean
  isPublished_not: Boolean
  AND: [EquityWhereInput!]
  OR: [EquityWhereInput!]
  NOT: [EquityWhereInput!]
}

input EquityWhereUniqueInput {
  id: ID
}

type Expense {
  id: ID!
  createdAt: DateTime!
  company: Company!
  scenarios(where: ScenarioWhereInput, orderBy: ScenarioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Scenario!]
  category: Category
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  expenseType: ExpenseType!
  expenseCategory: String!
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  data: Json!
  metrics(where: MetricWhereInput, orderBy: MetricOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Metric!]
  isPublished: Boolean
}

type ExpenseConnection {
  pageInfo: PageInfo!
  edges: [ExpenseEdge]!
  aggregate: AggregateExpense!
}

input ExpenseCreateInput {
  id: ID
  company: CompanyCreateOneWithoutExpensesInput!
  scenarios: ScenarioCreateManyWithoutExpensesInput
  category: CategoryCreateOneWithoutExpensesInput
  tags: TagCreateManyWithoutExpensesInput
  expenseType: ExpenseType!
  expenseCategory: String!
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  data: Json!
  metrics: MetricCreateManyWithoutExpenseInput
  isPublished: Boolean
}

input ExpenseCreateManyWithoutCategoryInput {
  create: [ExpenseCreateWithoutCategoryInput!]
  connect: [ExpenseWhereUniqueInput!]
}

input ExpenseCreateManyWithoutCompanyInput {
  create: [ExpenseCreateWithoutCompanyInput!]
  connect: [ExpenseWhereUniqueInput!]
}

input ExpenseCreateManyWithoutScenariosInput {
  create: [ExpenseCreateWithoutScenariosInput!]
  connect: [ExpenseWhereUniqueInput!]
}

input ExpenseCreateManyWithoutTagsInput {
  create: [ExpenseCreateWithoutTagsInput!]
  connect: [ExpenseWhereUniqueInput!]
}

input ExpenseCreateOneWithoutMetricsInput {
  create: ExpenseCreateWithoutMetricsInput
  connect: ExpenseWhereUniqueInput
}

input ExpenseCreateWithoutCategoryInput {
  id: ID
  company: CompanyCreateOneWithoutExpensesInput!
  scenarios: ScenarioCreateManyWithoutExpensesInput
  tags: TagCreateManyWithoutExpensesInput
  expenseType: ExpenseType!
  expenseCategory: String!
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  data: Json!
  metrics: MetricCreateManyWithoutExpenseInput
  isPublished: Boolean
}

input ExpenseCreateWithoutCompanyInput {
  id: ID
  scenarios: ScenarioCreateManyWithoutExpensesInput
  category: CategoryCreateOneWithoutExpensesInput
  tags: TagCreateManyWithoutExpensesInput
  expenseType: ExpenseType!
  expenseCategory: String!
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  data: Json!
  metrics: MetricCreateManyWithoutExpenseInput
  isPublished: Boolean
}

input ExpenseCreateWithoutMetricsInput {
  id: ID
  company: CompanyCreateOneWithoutExpensesInput!
  scenarios: ScenarioCreateManyWithoutExpensesInput
  category: CategoryCreateOneWithoutExpensesInput
  tags: TagCreateManyWithoutExpensesInput
  expenseType: ExpenseType!
  expenseCategory: String!
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  data: Json!
  isPublished: Boolean
}

input ExpenseCreateWithoutScenariosInput {
  id: ID
  company: CompanyCreateOneWithoutExpensesInput!
  category: CategoryCreateOneWithoutExpensesInput
  tags: TagCreateManyWithoutExpensesInput
  expenseType: ExpenseType!
  expenseCategory: String!
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  data: Json!
  metrics: MetricCreateManyWithoutExpenseInput
  isPublished: Boolean
}

input ExpenseCreateWithoutTagsInput {
  id: ID
  company: CompanyCreateOneWithoutExpensesInput!
  scenarios: ScenarioCreateManyWithoutExpensesInput
  category: CategoryCreateOneWithoutExpensesInput
  expenseType: ExpenseType!
  expenseCategory: String!
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  data: Json!
  metrics: MetricCreateManyWithoutExpenseInput
  isPublished: Boolean
}

type ExpenseEdge {
  node: Expense!
  cursor: String!
}

enum ExpenseOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  expenseType_ASC
  expenseType_DESC
  expenseCategory_ASC
  expenseCategory_DESC
  name_ASC
  name_DESC
  startTimestamp_ASC
  startTimestamp_DESC
  endTimestamp_ASC
  endTimestamp_DESC
  data_ASC
  data_DESC
  isPublished_ASC
  isPublished_DESC
}

type ExpensePreviousValues {
  id: ID!
  createdAt: DateTime!
  expenseType: ExpenseType!
  expenseCategory: String!
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  data: Json!
  isPublished: Boolean
}

input ExpenseScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  expenseType: ExpenseType
  expenseType_not: ExpenseType
  expenseType_in: [ExpenseType!]
  expenseType_not_in: [ExpenseType!]
  expenseCategory: String
  expenseCategory_not: String
  expenseCategory_in: [String!]
  expenseCategory_not_in: [String!]
  expenseCategory_lt: String
  expenseCategory_lte: String
  expenseCategory_gt: String
  expenseCategory_gte: String
  expenseCategory_contains: String
  expenseCategory_not_contains: String
  expenseCategory_starts_with: String
  expenseCategory_not_starts_with: String
  expenseCategory_ends_with: String
  expenseCategory_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  startTimestamp: DateTime
  startTimestamp_not: DateTime
  startTimestamp_in: [DateTime!]
  startTimestamp_not_in: [DateTime!]
  startTimestamp_lt: DateTime
  startTimestamp_lte: DateTime
  startTimestamp_gt: DateTime
  startTimestamp_gte: DateTime
  endTimestamp: DateTime
  endTimestamp_not: DateTime
  endTimestamp_in: [DateTime!]
  endTimestamp_not_in: [DateTime!]
  endTimestamp_lt: DateTime
  endTimestamp_lte: DateTime
  endTimestamp_gt: DateTime
  endTimestamp_gte: DateTime
  isPublished: Boolean
  isPublished_not: Boolean
  AND: [ExpenseScalarWhereInput!]
  OR: [ExpenseScalarWhereInput!]
  NOT: [ExpenseScalarWhereInput!]
}

type ExpenseSubscriptionPayload {
  mutation: MutationType!
  node: Expense
  updatedFields: [String!]
  previousValues: ExpensePreviousValues
}

input ExpenseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ExpenseWhereInput
  AND: [ExpenseSubscriptionWhereInput!]
  OR: [ExpenseSubscriptionWhereInput!]
  NOT: [ExpenseSubscriptionWhereInput!]
}

enum ExpenseType {
  FLAT
  PERCENTAGE_OF_CASH
  PERCENTAGE_OF_REVENUE
  ANNUAL_GROWTH
  MONTHLY_GROWTH
  PER_PERSON
  PERIODIC_GROWTH
  DOLLAR_PER_UNIT
  RELATED_EXPENSE
  CUSTOM
}

input ExpenseUpdateInput {
  company: CompanyUpdateOneRequiredWithoutExpensesInput
  scenarios: ScenarioUpdateManyWithoutExpensesInput
  category: CategoryUpdateOneWithoutExpensesInput
  tags: TagUpdateManyWithoutExpensesInput
  expenseType: ExpenseType
  expenseCategory: String
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  metrics: MetricUpdateManyWithoutExpenseInput
  isPublished: Boolean
}

input ExpenseUpdateManyDataInput {
  expenseType: ExpenseType
  expenseCategory: String
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  isPublished: Boolean
}

input ExpenseUpdateManyMutationInput {
  expenseType: ExpenseType
  expenseCategory: String
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  isPublished: Boolean
}

input ExpenseUpdateManyWithoutCategoryInput {
  create: [ExpenseCreateWithoutCategoryInput!]
  delete: [ExpenseWhereUniqueInput!]
  connect: [ExpenseWhereUniqueInput!]
  set: [ExpenseWhereUniqueInput!]
  disconnect: [ExpenseWhereUniqueInput!]
  update: [ExpenseUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [ExpenseUpsertWithWhereUniqueWithoutCategoryInput!]
  deleteMany: [ExpenseScalarWhereInput!]
  updateMany: [ExpenseUpdateManyWithWhereNestedInput!]
}

input ExpenseUpdateManyWithoutCompanyInput {
  create: [ExpenseCreateWithoutCompanyInput!]
  delete: [ExpenseWhereUniqueInput!]
  connect: [ExpenseWhereUniqueInput!]
  set: [ExpenseWhereUniqueInput!]
  disconnect: [ExpenseWhereUniqueInput!]
  update: [ExpenseUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [ExpenseUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [ExpenseScalarWhereInput!]
  updateMany: [ExpenseUpdateManyWithWhereNestedInput!]
}

input ExpenseUpdateManyWithoutScenariosInput {
  create: [ExpenseCreateWithoutScenariosInput!]
  delete: [ExpenseWhereUniqueInput!]
  connect: [ExpenseWhereUniqueInput!]
  set: [ExpenseWhereUniqueInput!]
  disconnect: [ExpenseWhereUniqueInput!]
  update: [ExpenseUpdateWithWhereUniqueWithoutScenariosInput!]
  upsert: [ExpenseUpsertWithWhereUniqueWithoutScenariosInput!]
  deleteMany: [ExpenseScalarWhereInput!]
  updateMany: [ExpenseUpdateManyWithWhereNestedInput!]
}

input ExpenseUpdateManyWithoutTagsInput {
  create: [ExpenseCreateWithoutTagsInput!]
  delete: [ExpenseWhereUniqueInput!]
  connect: [ExpenseWhereUniqueInput!]
  set: [ExpenseWhereUniqueInput!]
  disconnect: [ExpenseWhereUniqueInput!]
  update: [ExpenseUpdateWithWhereUniqueWithoutTagsInput!]
  upsert: [ExpenseUpsertWithWhereUniqueWithoutTagsInput!]
  deleteMany: [ExpenseScalarWhereInput!]
  updateMany: [ExpenseUpdateManyWithWhereNestedInput!]
}

input ExpenseUpdateManyWithWhereNestedInput {
  where: ExpenseScalarWhereInput!
  data: ExpenseUpdateManyDataInput!
}

input ExpenseUpdateOneWithoutMetricsInput {
  create: ExpenseCreateWithoutMetricsInput
  update: ExpenseUpdateWithoutMetricsDataInput
  upsert: ExpenseUpsertWithoutMetricsInput
  delete: Boolean
  disconnect: Boolean
  connect: ExpenseWhereUniqueInput
}

input ExpenseUpdateWithoutCategoryDataInput {
  company: CompanyUpdateOneRequiredWithoutExpensesInput
  scenarios: ScenarioUpdateManyWithoutExpensesInput
  tags: TagUpdateManyWithoutExpensesInput
  expenseType: ExpenseType
  expenseCategory: String
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  metrics: MetricUpdateManyWithoutExpenseInput
  isPublished: Boolean
}

input ExpenseUpdateWithoutCompanyDataInput {
  scenarios: ScenarioUpdateManyWithoutExpensesInput
  category: CategoryUpdateOneWithoutExpensesInput
  tags: TagUpdateManyWithoutExpensesInput
  expenseType: ExpenseType
  expenseCategory: String
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  metrics: MetricUpdateManyWithoutExpenseInput
  isPublished: Boolean
}

input ExpenseUpdateWithoutMetricsDataInput {
  company: CompanyUpdateOneRequiredWithoutExpensesInput
  scenarios: ScenarioUpdateManyWithoutExpensesInput
  category: CategoryUpdateOneWithoutExpensesInput
  tags: TagUpdateManyWithoutExpensesInput
  expenseType: ExpenseType
  expenseCategory: String
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  isPublished: Boolean
}

input ExpenseUpdateWithoutScenariosDataInput {
  company: CompanyUpdateOneRequiredWithoutExpensesInput
  category: CategoryUpdateOneWithoutExpensesInput
  tags: TagUpdateManyWithoutExpensesInput
  expenseType: ExpenseType
  expenseCategory: String
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  metrics: MetricUpdateManyWithoutExpenseInput
  isPublished: Boolean
}

input ExpenseUpdateWithoutTagsDataInput {
  company: CompanyUpdateOneRequiredWithoutExpensesInput
  scenarios: ScenarioUpdateManyWithoutExpensesInput
  category: CategoryUpdateOneWithoutExpensesInput
  expenseType: ExpenseType
  expenseCategory: String
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  metrics: MetricUpdateManyWithoutExpenseInput
  isPublished: Boolean
}

input ExpenseUpdateWithWhereUniqueWithoutCategoryInput {
  where: ExpenseWhereUniqueInput!
  data: ExpenseUpdateWithoutCategoryDataInput!
}

input ExpenseUpdateWithWhereUniqueWithoutCompanyInput {
  where: ExpenseWhereUniqueInput!
  data: ExpenseUpdateWithoutCompanyDataInput!
}

input ExpenseUpdateWithWhereUniqueWithoutScenariosInput {
  where: ExpenseWhereUniqueInput!
  data: ExpenseUpdateWithoutScenariosDataInput!
}

input ExpenseUpdateWithWhereUniqueWithoutTagsInput {
  where: ExpenseWhereUniqueInput!
  data: ExpenseUpdateWithoutTagsDataInput!
}

input ExpenseUpsertWithoutMetricsInput {
  update: ExpenseUpdateWithoutMetricsDataInput!
  create: ExpenseCreateWithoutMetricsInput!
}

input ExpenseUpsertWithWhereUniqueWithoutCategoryInput {
  where: ExpenseWhereUniqueInput!
  update: ExpenseUpdateWithoutCategoryDataInput!
  create: ExpenseCreateWithoutCategoryInput!
}

input ExpenseUpsertWithWhereUniqueWithoutCompanyInput {
  where: ExpenseWhereUniqueInput!
  update: ExpenseUpdateWithoutCompanyDataInput!
  create: ExpenseCreateWithoutCompanyInput!
}

input ExpenseUpsertWithWhereUniqueWithoutScenariosInput {
  where: ExpenseWhereUniqueInput!
  update: ExpenseUpdateWithoutScenariosDataInput!
  create: ExpenseCreateWithoutScenariosInput!
}

input ExpenseUpsertWithWhereUniqueWithoutTagsInput {
  where: ExpenseWhereUniqueInput!
  update: ExpenseUpdateWithoutTagsDataInput!
  create: ExpenseCreateWithoutTagsInput!
}

input ExpenseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  company: CompanyWhereInput
  scenarios_every: ScenarioWhereInput
  scenarios_some: ScenarioWhereInput
  scenarios_none: ScenarioWhereInput
  category: CategoryWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  expenseType: ExpenseType
  expenseType_not: ExpenseType
  expenseType_in: [ExpenseType!]
  expenseType_not_in: [ExpenseType!]
  expenseCategory: String
  expenseCategory_not: String
  expenseCategory_in: [String!]
  expenseCategory_not_in: [String!]
  expenseCategory_lt: String
  expenseCategory_lte: String
  expenseCategory_gt: String
  expenseCategory_gte: String
  expenseCategory_contains: String
  expenseCategory_not_contains: String
  expenseCategory_starts_with: String
  expenseCategory_not_starts_with: String
  expenseCategory_ends_with: String
  expenseCategory_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  startTimestamp: DateTime
  startTimestamp_not: DateTime
  startTimestamp_in: [DateTime!]
  startTimestamp_not_in: [DateTime!]
  startTimestamp_lt: DateTime
  startTimestamp_lte: DateTime
  startTimestamp_gt: DateTime
  startTimestamp_gte: DateTime
  endTimestamp: DateTime
  endTimestamp_not: DateTime
  endTimestamp_in: [DateTime!]
  endTimestamp_not_in: [DateTime!]
  endTimestamp_lt: DateTime
  endTimestamp_lte: DateTime
  endTimestamp_gt: DateTime
  endTimestamp_gte: DateTime
  metrics_every: MetricWhereInput
  metrics_some: MetricWhereInput
  metrics_none: MetricWhereInput
  isPublished: Boolean
  isPublished_not: Boolean
  AND: [ExpenseWhereInput!]
  OR: [ExpenseWhereInput!]
  NOT: [ExpenseWhereInput!]
}

input ExpenseWhereUniqueInput {
  id: ID
}

enum FundingStage {
  SELF_FUNDED_OR_BOOTSTRAPPED
  ANGEL
  SERIES_A
  SERIES_B
  SERIES_C_PLUS
}

type GrowthFunnel {
  id: ID!
  createdAt: DateTime!
  company: Company!
  scenarios(where: ScenarioWhereInput, orderBy: ScenarioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Scenario!]
  category: Category
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  growthFunnelType: GrowthFunnelType!
  buildType: BuildType
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  startMetric: Metric
  growthStages(where: MetricWhereInput, orderBy: MetricOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Metric!]
  endMetric: Metric
  metrics(where: MetricWhereInput, orderBy: MetricOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Metric!]
  data: Json!
  isPublished: Boolean
}

type GrowthFunnelConnection {
  pageInfo: PageInfo!
  edges: [GrowthFunnelEdge]!
  aggregate: AggregateGrowthFunnel!
}

input GrowthFunnelCreateInput {
  id: ID
  company: CompanyCreateOneWithoutGrowthFunnelsInput!
  scenarios: ScenarioCreateManyWithoutGrowthFunnelsInput
  category: CategoryCreateOneWithoutGrowthFunnelsInput
  tags: TagCreateManyWithoutGrowthFunnelsInput
  growthFunnelType: GrowthFunnelType!
  buildType: BuildType
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  startMetric: MetricCreateOneWithoutFunnelStartedInput
  growthStages: MetricCreateManyWithoutGrowthFunnelInput
  endMetric: MetricCreateOneWithoutFunnelEndedInput
  metrics: MetricCreateManyWithoutFunnelInput
  data: Json!
  isPublished: Boolean
}

input GrowthFunnelCreateManyWithoutCategoryInput {
  create: [GrowthFunnelCreateWithoutCategoryInput!]
  connect: [GrowthFunnelWhereUniqueInput!]
}

input GrowthFunnelCreateManyWithoutCompanyInput {
  create: [GrowthFunnelCreateWithoutCompanyInput!]
  connect: [GrowthFunnelWhereUniqueInput!]
}

input GrowthFunnelCreateManyWithoutScenariosInput {
  create: [GrowthFunnelCreateWithoutScenariosInput!]
  connect: [GrowthFunnelWhereUniqueInput!]
}

input GrowthFunnelCreateManyWithoutTagsInput {
  create: [GrowthFunnelCreateWithoutTagsInput!]
  connect: [GrowthFunnelWhereUniqueInput!]
}

input GrowthFunnelCreateOneWithoutEndMetricInput {
  create: GrowthFunnelCreateWithoutEndMetricInput
  connect: GrowthFunnelWhereUniqueInput
}

input GrowthFunnelCreateOneWithoutGrowthStagesInput {
  create: GrowthFunnelCreateWithoutGrowthStagesInput
  connect: GrowthFunnelWhereUniqueInput
}

input GrowthFunnelCreateOneWithoutMetricsInput {
  create: GrowthFunnelCreateWithoutMetricsInput
  connect: GrowthFunnelWhereUniqueInput
}

input GrowthFunnelCreateOneWithoutStartMetricInput {
  create: GrowthFunnelCreateWithoutStartMetricInput
  connect: GrowthFunnelWhereUniqueInput
}

input GrowthFunnelCreateWithoutCategoryInput {
  id: ID
  company: CompanyCreateOneWithoutGrowthFunnelsInput!
  scenarios: ScenarioCreateManyWithoutGrowthFunnelsInput
  tags: TagCreateManyWithoutGrowthFunnelsInput
  growthFunnelType: GrowthFunnelType!
  buildType: BuildType
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  startMetric: MetricCreateOneWithoutFunnelStartedInput
  growthStages: MetricCreateManyWithoutGrowthFunnelInput
  endMetric: MetricCreateOneWithoutFunnelEndedInput
  metrics: MetricCreateManyWithoutFunnelInput
  data: Json!
  isPublished: Boolean
}

input GrowthFunnelCreateWithoutCompanyInput {
  id: ID
  scenarios: ScenarioCreateManyWithoutGrowthFunnelsInput
  category: CategoryCreateOneWithoutGrowthFunnelsInput
  tags: TagCreateManyWithoutGrowthFunnelsInput
  growthFunnelType: GrowthFunnelType!
  buildType: BuildType
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  startMetric: MetricCreateOneWithoutFunnelStartedInput
  growthStages: MetricCreateManyWithoutGrowthFunnelInput
  endMetric: MetricCreateOneWithoutFunnelEndedInput
  metrics: MetricCreateManyWithoutFunnelInput
  data: Json!
  isPublished: Boolean
}

input GrowthFunnelCreateWithoutEndMetricInput {
  id: ID
  company: CompanyCreateOneWithoutGrowthFunnelsInput!
  scenarios: ScenarioCreateManyWithoutGrowthFunnelsInput
  category: CategoryCreateOneWithoutGrowthFunnelsInput
  tags: TagCreateManyWithoutGrowthFunnelsInput
  growthFunnelType: GrowthFunnelType!
  buildType: BuildType
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  startMetric: MetricCreateOneWithoutFunnelStartedInput
  growthStages: MetricCreateManyWithoutGrowthFunnelInput
  metrics: MetricCreateManyWithoutFunnelInput
  data: Json!
  isPublished: Boolean
}

input GrowthFunnelCreateWithoutGrowthStagesInput {
  id: ID
  company: CompanyCreateOneWithoutGrowthFunnelsInput!
  scenarios: ScenarioCreateManyWithoutGrowthFunnelsInput
  category: CategoryCreateOneWithoutGrowthFunnelsInput
  tags: TagCreateManyWithoutGrowthFunnelsInput
  growthFunnelType: GrowthFunnelType!
  buildType: BuildType
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  startMetric: MetricCreateOneWithoutFunnelStartedInput
  endMetric: MetricCreateOneWithoutFunnelEndedInput
  metrics: MetricCreateManyWithoutFunnelInput
  data: Json!
  isPublished: Boolean
}

input GrowthFunnelCreateWithoutMetricsInput {
  id: ID
  company: CompanyCreateOneWithoutGrowthFunnelsInput!
  scenarios: ScenarioCreateManyWithoutGrowthFunnelsInput
  category: CategoryCreateOneWithoutGrowthFunnelsInput
  tags: TagCreateManyWithoutGrowthFunnelsInput
  growthFunnelType: GrowthFunnelType!
  buildType: BuildType
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  startMetric: MetricCreateOneWithoutFunnelStartedInput
  growthStages: MetricCreateManyWithoutGrowthFunnelInput
  endMetric: MetricCreateOneWithoutFunnelEndedInput
  data: Json!
  isPublished: Boolean
}

input GrowthFunnelCreateWithoutScenariosInput {
  id: ID
  company: CompanyCreateOneWithoutGrowthFunnelsInput!
  category: CategoryCreateOneWithoutGrowthFunnelsInput
  tags: TagCreateManyWithoutGrowthFunnelsInput
  growthFunnelType: GrowthFunnelType!
  buildType: BuildType
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  startMetric: MetricCreateOneWithoutFunnelStartedInput
  growthStages: MetricCreateManyWithoutGrowthFunnelInput
  endMetric: MetricCreateOneWithoutFunnelEndedInput
  metrics: MetricCreateManyWithoutFunnelInput
  data: Json!
  isPublished: Boolean
}

input GrowthFunnelCreateWithoutStartMetricInput {
  id: ID
  company: CompanyCreateOneWithoutGrowthFunnelsInput!
  scenarios: ScenarioCreateManyWithoutGrowthFunnelsInput
  category: CategoryCreateOneWithoutGrowthFunnelsInput
  tags: TagCreateManyWithoutGrowthFunnelsInput
  growthFunnelType: GrowthFunnelType!
  buildType: BuildType
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  growthStages: MetricCreateManyWithoutGrowthFunnelInput
  endMetric: MetricCreateOneWithoutFunnelEndedInput
  metrics: MetricCreateManyWithoutFunnelInput
  data: Json!
  isPublished: Boolean
}

input GrowthFunnelCreateWithoutTagsInput {
  id: ID
  company: CompanyCreateOneWithoutGrowthFunnelsInput!
  scenarios: ScenarioCreateManyWithoutGrowthFunnelsInput
  category: CategoryCreateOneWithoutGrowthFunnelsInput
  growthFunnelType: GrowthFunnelType!
  buildType: BuildType
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  startMetric: MetricCreateOneWithoutFunnelStartedInput
  growthStages: MetricCreateManyWithoutGrowthFunnelInput
  endMetric: MetricCreateOneWithoutFunnelEndedInput
  metrics: MetricCreateManyWithoutFunnelInput
  data: Json!
  isPublished: Boolean
}

type GrowthFunnelEdge {
  node: GrowthFunnel!
  cursor: String!
}

enum GrowthFunnelOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  growthFunnelType_ASC
  growthFunnelType_DESC
  buildType_ASC
  buildType_DESC
  name_ASC
  name_DESC
  startTimestamp_ASC
  startTimestamp_DESC
  endTimestamp_ASC
  endTimestamp_DESC
  data_ASC
  data_DESC
  isPublished_ASC
  isPublished_DESC
}

type GrowthFunnelPreviousValues {
  id: ID!
  createdAt: DateTime!
  growthFunnelType: GrowthFunnelType!
  buildType: BuildType
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  data: Json!
  isPublished: Boolean
}

input GrowthFunnelScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  growthFunnelType: GrowthFunnelType
  growthFunnelType_not: GrowthFunnelType
  growthFunnelType_in: [GrowthFunnelType!]
  growthFunnelType_not_in: [GrowthFunnelType!]
  buildType: BuildType
  buildType_not: BuildType
  buildType_in: [BuildType!]
  buildType_not_in: [BuildType!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  startTimestamp: DateTime
  startTimestamp_not: DateTime
  startTimestamp_in: [DateTime!]
  startTimestamp_not_in: [DateTime!]
  startTimestamp_lt: DateTime
  startTimestamp_lte: DateTime
  startTimestamp_gt: DateTime
  startTimestamp_gte: DateTime
  endTimestamp: DateTime
  endTimestamp_not: DateTime
  endTimestamp_in: [DateTime!]
  endTimestamp_not_in: [DateTime!]
  endTimestamp_lt: DateTime
  endTimestamp_lte: DateTime
  endTimestamp_gt: DateTime
  endTimestamp_gte: DateTime
  isPublished: Boolean
  isPublished_not: Boolean
  AND: [GrowthFunnelScalarWhereInput!]
  OR: [GrowthFunnelScalarWhereInput!]
  NOT: [GrowthFunnelScalarWhereInput!]
}

type GrowthFunnelSubscriptionPayload {
  mutation: MutationType!
  node: GrowthFunnel
  updatedFields: [String!]
  previousValues: GrowthFunnelPreviousValues
}

input GrowthFunnelSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GrowthFunnelWhereInput
  AND: [GrowthFunnelSubscriptionWhereInput!]
  OR: [GrowthFunnelSubscriptionWhereInput!]
  NOT: [GrowthFunnelSubscriptionWhereInput!]
}

enum GrowthFunnelType {
  CUSTOM
  LEADS_TO_CUSTOMERS
}

input GrowthFunnelUpdateInput {
  company: CompanyUpdateOneRequiredWithoutGrowthFunnelsInput
  scenarios: ScenarioUpdateManyWithoutGrowthFunnelsInput
  category: CategoryUpdateOneWithoutGrowthFunnelsInput
  tags: TagUpdateManyWithoutGrowthFunnelsInput
  growthFunnelType: GrowthFunnelType
  buildType: BuildType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  startMetric: MetricUpdateOneWithoutFunnelStartedInput
  growthStages: MetricUpdateManyWithoutGrowthFunnelInput
  endMetric: MetricUpdateOneWithoutFunnelEndedInput
  metrics: MetricUpdateManyWithoutFunnelInput
  data: Json
  isPublished: Boolean
}

input GrowthFunnelUpdateManyDataInput {
  growthFunnelType: GrowthFunnelType
  buildType: BuildType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  isPublished: Boolean
}

input GrowthFunnelUpdateManyMutationInput {
  growthFunnelType: GrowthFunnelType
  buildType: BuildType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  isPublished: Boolean
}

input GrowthFunnelUpdateManyWithoutCategoryInput {
  create: [GrowthFunnelCreateWithoutCategoryInput!]
  delete: [GrowthFunnelWhereUniqueInput!]
  connect: [GrowthFunnelWhereUniqueInput!]
  set: [GrowthFunnelWhereUniqueInput!]
  disconnect: [GrowthFunnelWhereUniqueInput!]
  update: [GrowthFunnelUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [GrowthFunnelUpsertWithWhereUniqueWithoutCategoryInput!]
  deleteMany: [GrowthFunnelScalarWhereInput!]
  updateMany: [GrowthFunnelUpdateManyWithWhereNestedInput!]
}

input GrowthFunnelUpdateManyWithoutCompanyInput {
  create: [GrowthFunnelCreateWithoutCompanyInput!]
  delete: [GrowthFunnelWhereUniqueInput!]
  connect: [GrowthFunnelWhereUniqueInput!]
  set: [GrowthFunnelWhereUniqueInput!]
  disconnect: [GrowthFunnelWhereUniqueInput!]
  update: [GrowthFunnelUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [GrowthFunnelUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [GrowthFunnelScalarWhereInput!]
  updateMany: [GrowthFunnelUpdateManyWithWhereNestedInput!]
}

input GrowthFunnelUpdateManyWithoutScenariosInput {
  create: [GrowthFunnelCreateWithoutScenariosInput!]
  delete: [GrowthFunnelWhereUniqueInput!]
  connect: [GrowthFunnelWhereUniqueInput!]
  set: [GrowthFunnelWhereUniqueInput!]
  disconnect: [GrowthFunnelWhereUniqueInput!]
  update: [GrowthFunnelUpdateWithWhereUniqueWithoutScenariosInput!]
  upsert: [GrowthFunnelUpsertWithWhereUniqueWithoutScenariosInput!]
  deleteMany: [GrowthFunnelScalarWhereInput!]
  updateMany: [GrowthFunnelUpdateManyWithWhereNestedInput!]
}

input GrowthFunnelUpdateManyWithoutTagsInput {
  create: [GrowthFunnelCreateWithoutTagsInput!]
  delete: [GrowthFunnelWhereUniqueInput!]
  connect: [GrowthFunnelWhereUniqueInput!]
  set: [GrowthFunnelWhereUniqueInput!]
  disconnect: [GrowthFunnelWhereUniqueInput!]
  update: [GrowthFunnelUpdateWithWhereUniqueWithoutTagsInput!]
  upsert: [GrowthFunnelUpsertWithWhereUniqueWithoutTagsInput!]
  deleteMany: [GrowthFunnelScalarWhereInput!]
  updateMany: [GrowthFunnelUpdateManyWithWhereNestedInput!]
}

input GrowthFunnelUpdateManyWithWhereNestedInput {
  where: GrowthFunnelScalarWhereInput!
  data: GrowthFunnelUpdateManyDataInput!
}

input GrowthFunnelUpdateOneWithoutEndMetricInput {
  create: GrowthFunnelCreateWithoutEndMetricInput
  update: GrowthFunnelUpdateWithoutEndMetricDataInput
  upsert: GrowthFunnelUpsertWithoutEndMetricInput
  delete: Boolean
  disconnect: Boolean
  connect: GrowthFunnelWhereUniqueInput
}

input GrowthFunnelUpdateOneWithoutGrowthStagesInput {
  create: GrowthFunnelCreateWithoutGrowthStagesInput
  update: GrowthFunnelUpdateWithoutGrowthStagesDataInput
  upsert: GrowthFunnelUpsertWithoutGrowthStagesInput
  delete: Boolean
  disconnect: Boolean
  connect: GrowthFunnelWhereUniqueInput
}

input GrowthFunnelUpdateOneWithoutMetricsInput {
  create: GrowthFunnelCreateWithoutMetricsInput
  update: GrowthFunnelUpdateWithoutMetricsDataInput
  upsert: GrowthFunnelUpsertWithoutMetricsInput
  delete: Boolean
  disconnect: Boolean
  connect: GrowthFunnelWhereUniqueInput
}

input GrowthFunnelUpdateOneWithoutStartMetricInput {
  create: GrowthFunnelCreateWithoutStartMetricInput
  update: GrowthFunnelUpdateWithoutStartMetricDataInput
  upsert: GrowthFunnelUpsertWithoutStartMetricInput
  delete: Boolean
  disconnect: Boolean
  connect: GrowthFunnelWhereUniqueInput
}

input GrowthFunnelUpdateWithoutCategoryDataInput {
  company: CompanyUpdateOneRequiredWithoutGrowthFunnelsInput
  scenarios: ScenarioUpdateManyWithoutGrowthFunnelsInput
  tags: TagUpdateManyWithoutGrowthFunnelsInput
  growthFunnelType: GrowthFunnelType
  buildType: BuildType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  startMetric: MetricUpdateOneWithoutFunnelStartedInput
  growthStages: MetricUpdateManyWithoutGrowthFunnelInput
  endMetric: MetricUpdateOneWithoutFunnelEndedInput
  metrics: MetricUpdateManyWithoutFunnelInput
  data: Json
  isPublished: Boolean
}

input GrowthFunnelUpdateWithoutCompanyDataInput {
  scenarios: ScenarioUpdateManyWithoutGrowthFunnelsInput
  category: CategoryUpdateOneWithoutGrowthFunnelsInput
  tags: TagUpdateManyWithoutGrowthFunnelsInput
  growthFunnelType: GrowthFunnelType
  buildType: BuildType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  startMetric: MetricUpdateOneWithoutFunnelStartedInput
  growthStages: MetricUpdateManyWithoutGrowthFunnelInput
  endMetric: MetricUpdateOneWithoutFunnelEndedInput
  metrics: MetricUpdateManyWithoutFunnelInput
  data: Json
  isPublished: Boolean
}

input GrowthFunnelUpdateWithoutEndMetricDataInput {
  company: CompanyUpdateOneRequiredWithoutGrowthFunnelsInput
  scenarios: ScenarioUpdateManyWithoutGrowthFunnelsInput
  category: CategoryUpdateOneWithoutGrowthFunnelsInput
  tags: TagUpdateManyWithoutGrowthFunnelsInput
  growthFunnelType: GrowthFunnelType
  buildType: BuildType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  startMetric: MetricUpdateOneWithoutFunnelStartedInput
  growthStages: MetricUpdateManyWithoutGrowthFunnelInput
  metrics: MetricUpdateManyWithoutFunnelInput
  data: Json
  isPublished: Boolean
}

input GrowthFunnelUpdateWithoutGrowthStagesDataInput {
  company: CompanyUpdateOneRequiredWithoutGrowthFunnelsInput
  scenarios: ScenarioUpdateManyWithoutGrowthFunnelsInput
  category: CategoryUpdateOneWithoutGrowthFunnelsInput
  tags: TagUpdateManyWithoutGrowthFunnelsInput
  growthFunnelType: GrowthFunnelType
  buildType: BuildType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  startMetric: MetricUpdateOneWithoutFunnelStartedInput
  endMetric: MetricUpdateOneWithoutFunnelEndedInput
  metrics: MetricUpdateManyWithoutFunnelInput
  data: Json
  isPublished: Boolean
}

input GrowthFunnelUpdateWithoutMetricsDataInput {
  company: CompanyUpdateOneRequiredWithoutGrowthFunnelsInput
  scenarios: ScenarioUpdateManyWithoutGrowthFunnelsInput
  category: CategoryUpdateOneWithoutGrowthFunnelsInput
  tags: TagUpdateManyWithoutGrowthFunnelsInput
  growthFunnelType: GrowthFunnelType
  buildType: BuildType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  startMetric: MetricUpdateOneWithoutFunnelStartedInput
  growthStages: MetricUpdateManyWithoutGrowthFunnelInput
  endMetric: MetricUpdateOneWithoutFunnelEndedInput
  data: Json
  isPublished: Boolean
}

input GrowthFunnelUpdateWithoutScenariosDataInput {
  company: CompanyUpdateOneRequiredWithoutGrowthFunnelsInput
  category: CategoryUpdateOneWithoutGrowthFunnelsInput
  tags: TagUpdateManyWithoutGrowthFunnelsInput
  growthFunnelType: GrowthFunnelType
  buildType: BuildType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  startMetric: MetricUpdateOneWithoutFunnelStartedInput
  growthStages: MetricUpdateManyWithoutGrowthFunnelInput
  endMetric: MetricUpdateOneWithoutFunnelEndedInput
  metrics: MetricUpdateManyWithoutFunnelInput
  data: Json
  isPublished: Boolean
}

input GrowthFunnelUpdateWithoutStartMetricDataInput {
  company: CompanyUpdateOneRequiredWithoutGrowthFunnelsInput
  scenarios: ScenarioUpdateManyWithoutGrowthFunnelsInput
  category: CategoryUpdateOneWithoutGrowthFunnelsInput
  tags: TagUpdateManyWithoutGrowthFunnelsInput
  growthFunnelType: GrowthFunnelType
  buildType: BuildType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  growthStages: MetricUpdateManyWithoutGrowthFunnelInput
  endMetric: MetricUpdateOneWithoutFunnelEndedInput
  metrics: MetricUpdateManyWithoutFunnelInput
  data: Json
  isPublished: Boolean
}

input GrowthFunnelUpdateWithoutTagsDataInput {
  company: CompanyUpdateOneRequiredWithoutGrowthFunnelsInput
  scenarios: ScenarioUpdateManyWithoutGrowthFunnelsInput
  category: CategoryUpdateOneWithoutGrowthFunnelsInput
  growthFunnelType: GrowthFunnelType
  buildType: BuildType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  startMetric: MetricUpdateOneWithoutFunnelStartedInput
  growthStages: MetricUpdateManyWithoutGrowthFunnelInput
  endMetric: MetricUpdateOneWithoutFunnelEndedInput
  metrics: MetricUpdateManyWithoutFunnelInput
  data: Json
  isPublished: Boolean
}

input GrowthFunnelUpdateWithWhereUniqueWithoutCategoryInput {
  where: GrowthFunnelWhereUniqueInput!
  data: GrowthFunnelUpdateWithoutCategoryDataInput!
}

input GrowthFunnelUpdateWithWhereUniqueWithoutCompanyInput {
  where: GrowthFunnelWhereUniqueInput!
  data: GrowthFunnelUpdateWithoutCompanyDataInput!
}

input GrowthFunnelUpdateWithWhereUniqueWithoutScenariosInput {
  where: GrowthFunnelWhereUniqueInput!
  data: GrowthFunnelUpdateWithoutScenariosDataInput!
}

input GrowthFunnelUpdateWithWhereUniqueWithoutTagsInput {
  where: GrowthFunnelWhereUniqueInput!
  data: GrowthFunnelUpdateWithoutTagsDataInput!
}

input GrowthFunnelUpsertWithoutEndMetricInput {
  update: GrowthFunnelUpdateWithoutEndMetricDataInput!
  create: GrowthFunnelCreateWithoutEndMetricInput!
}

input GrowthFunnelUpsertWithoutGrowthStagesInput {
  update: GrowthFunnelUpdateWithoutGrowthStagesDataInput!
  create: GrowthFunnelCreateWithoutGrowthStagesInput!
}

input GrowthFunnelUpsertWithoutMetricsInput {
  update: GrowthFunnelUpdateWithoutMetricsDataInput!
  create: GrowthFunnelCreateWithoutMetricsInput!
}

input GrowthFunnelUpsertWithoutStartMetricInput {
  update: GrowthFunnelUpdateWithoutStartMetricDataInput!
  create: GrowthFunnelCreateWithoutStartMetricInput!
}

input GrowthFunnelUpsertWithWhereUniqueWithoutCategoryInput {
  where: GrowthFunnelWhereUniqueInput!
  update: GrowthFunnelUpdateWithoutCategoryDataInput!
  create: GrowthFunnelCreateWithoutCategoryInput!
}

input GrowthFunnelUpsertWithWhereUniqueWithoutCompanyInput {
  where: GrowthFunnelWhereUniqueInput!
  update: GrowthFunnelUpdateWithoutCompanyDataInput!
  create: GrowthFunnelCreateWithoutCompanyInput!
}

input GrowthFunnelUpsertWithWhereUniqueWithoutScenariosInput {
  where: GrowthFunnelWhereUniqueInput!
  update: GrowthFunnelUpdateWithoutScenariosDataInput!
  create: GrowthFunnelCreateWithoutScenariosInput!
}

input GrowthFunnelUpsertWithWhereUniqueWithoutTagsInput {
  where: GrowthFunnelWhereUniqueInput!
  update: GrowthFunnelUpdateWithoutTagsDataInput!
  create: GrowthFunnelCreateWithoutTagsInput!
}

input GrowthFunnelWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  company: CompanyWhereInput
  scenarios_every: ScenarioWhereInput
  scenarios_some: ScenarioWhereInput
  scenarios_none: ScenarioWhereInput
  category: CategoryWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  growthFunnelType: GrowthFunnelType
  growthFunnelType_not: GrowthFunnelType
  growthFunnelType_in: [GrowthFunnelType!]
  growthFunnelType_not_in: [GrowthFunnelType!]
  buildType: BuildType
  buildType_not: BuildType
  buildType_in: [BuildType!]
  buildType_not_in: [BuildType!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  startTimestamp: DateTime
  startTimestamp_not: DateTime
  startTimestamp_in: [DateTime!]
  startTimestamp_not_in: [DateTime!]
  startTimestamp_lt: DateTime
  startTimestamp_lte: DateTime
  startTimestamp_gt: DateTime
  startTimestamp_gte: DateTime
  endTimestamp: DateTime
  endTimestamp_not: DateTime
  endTimestamp_in: [DateTime!]
  endTimestamp_not_in: [DateTime!]
  endTimestamp_lt: DateTime
  endTimestamp_lte: DateTime
  endTimestamp_gt: DateTime
  endTimestamp_gte: DateTime
  startMetric: MetricWhereInput
  growthStages_every: MetricWhereInput
  growthStages_some: MetricWhereInput
  growthStages_none: MetricWhereInput
  endMetric: MetricWhereInput
  metrics_every: MetricWhereInput
  metrics_some: MetricWhereInput
  metrics_none: MetricWhereInput
  isPublished: Boolean
  isPublished_not: Boolean
  AND: [GrowthFunnelWhereInput!]
  OR: [GrowthFunnelWhereInput!]
  NOT: [GrowthFunnelWhereInput!]
}

input GrowthFunnelWhereUniqueInput {
  id: ID
}

type Integration {
  id: ID!
  user: User!
  timeEdited: String!
  integrationType: IntegrationType!
  isConnected: String!
  tokenSet: Json!
  accountNumber: String!
}

type IntegrationConnection {
  pageInfo: PageInfo!
  edges: [IntegrationEdge]!
  aggregate: AggregateIntegration!
}

input IntegrationCreateInput {
  id: ID
  user: UserCreateOneWithoutIntegrationsInput!
  timeEdited: String!
  integrationType: IntegrationType!
  isConnected: String!
  tokenSet: Json!
  accountNumber: String!
}

input IntegrationCreateManyWithoutUserInput {
  create: [IntegrationCreateWithoutUserInput!]
  connect: [IntegrationWhereUniqueInput!]
}

input IntegrationCreateWithoutUserInput {
  id: ID
  timeEdited: String!
  integrationType: IntegrationType!
  isConnected: String!
  tokenSet: Json!
  accountNumber: String!
}

type IntegrationEdge {
  node: Integration!
  cursor: String!
}

enum IntegrationOrderByInput {
  id_ASC
  id_DESC
  timeEdited_ASC
  timeEdited_DESC
  integrationType_ASC
  integrationType_DESC
  isConnected_ASC
  isConnected_DESC
  tokenSet_ASC
  tokenSet_DESC
  accountNumber_ASC
  accountNumber_DESC
}

type IntegrationPreviousValues {
  id: ID!
  timeEdited: String!
  integrationType: IntegrationType!
  isConnected: String!
  tokenSet: Json!
  accountNumber: String!
}

input IntegrationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  timeEdited: String
  timeEdited_not: String
  timeEdited_in: [String!]
  timeEdited_not_in: [String!]
  timeEdited_lt: String
  timeEdited_lte: String
  timeEdited_gt: String
  timeEdited_gte: String
  timeEdited_contains: String
  timeEdited_not_contains: String
  timeEdited_starts_with: String
  timeEdited_not_starts_with: String
  timeEdited_ends_with: String
  timeEdited_not_ends_with: String
  integrationType: IntegrationType
  integrationType_not: IntegrationType
  integrationType_in: [IntegrationType!]
  integrationType_not_in: [IntegrationType!]
  isConnected: String
  isConnected_not: String
  isConnected_in: [String!]
  isConnected_not_in: [String!]
  isConnected_lt: String
  isConnected_lte: String
  isConnected_gt: String
  isConnected_gte: String
  isConnected_contains: String
  isConnected_not_contains: String
  isConnected_starts_with: String
  isConnected_not_starts_with: String
  isConnected_ends_with: String
  isConnected_not_ends_with: String
  accountNumber: String
  accountNumber_not: String
  accountNumber_in: [String!]
  accountNumber_not_in: [String!]
  accountNumber_lt: String
  accountNumber_lte: String
  accountNumber_gt: String
  accountNumber_gte: String
  accountNumber_contains: String
  accountNumber_not_contains: String
  accountNumber_starts_with: String
  accountNumber_not_starts_with: String
  accountNumber_ends_with: String
  accountNumber_not_ends_with: String
  AND: [IntegrationScalarWhereInput!]
  OR: [IntegrationScalarWhereInput!]
  NOT: [IntegrationScalarWhereInput!]
}

type IntegrationSubscriptionPayload {
  mutation: MutationType!
  node: Integration
  updatedFields: [String!]
  previousValues: IntegrationPreviousValues
}

input IntegrationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IntegrationWhereInput
  AND: [IntegrationSubscriptionWhereInput!]
  OR: [IntegrationSubscriptionWhereInput!]
  NOT: [IntegrationSubscriptionWhereInput!]
}

enum IntegrationType {
  QUICKBOOKS
  XERO
}

input IntegrationUpdateInput {
  user: UserUpdateOneRequiredWithoutIntegrationsInput
  timeEdited: String
  integrationType: IntegrationType
  isConnected: String
  tokenSet: Json
  accountNumber: String
}

input IntegrationUpdateManyDataInput {
  timeEdited: String
  integrationType: IntegrationType
  isConnected: String
  tokenSet: Json
  accountNumber: String
}

input IntegrationUpdateManyMutationInput {
  timeEdited: String
  integrationType: IntegrationType
  isConnected: String
  tokenSet: Json
  accountNumber: String
}

input IntegrationUpdateManyWithoutUserInput {
  create: [IntegrationCreateWithoutUserInput!]
  delete: [IntegrationWhereUniqueInput!]
  connect: [IntegrationWhereUniqueInput!]
  set: [IntegrationWhereUniqueInput!]
  disconnect: [IntegrationWhereUniqueInput!]
  update: [IntegrationUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [IntegrationUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [IntegrationScalarWhereInput!]
  updateMany: [IntegrationUpdateManyWithWhereNestedInput!]
}

input IntegrationUpdateManyWithWhereNestedInput {
  where: IntegrationScalarWhereInput!
  data: IntegrationUpdateManyDataInput!
}

input IntegrationUpdateWithoutUserDataInput {
  timeEdited: String
  integrationType: IntegrationType
  isConnected: String
  tokenSet: Json
  accountNumber: String
}

input IntegrationUpdateWithWhereUniqueWithoutUserInput {
  where: IntegrationWhereUniqueInput!
  data: IntegrationUpdateWithoutUserDataInput!
}

input IntegrationUpsertWithWhereUniqueWithoutUserInput {
  where: IntegrationWhereUniqueInput!
  update: IntegrationUpdateWithoutUserDataInput!
  create: IntegrationCreateWithoutUserInput!
}

input IntegrationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  timeEdited: String
  timeEdited_not: String
  timeEdited_in: [String!]
  timeEdited_not_in: [String!]
  timeEdited_lt: String
  timeEdited_lte: String
  timeEdited_gt: String
  timeEdited_gte: String
  timeEdited_contains: String
  timeEdited_not_contains: String
  timeEdited_starts_with: String
  timeEdited_not_starts_with: String
  timeEdited_ends_with: String
  timeEdited_not_ends_with: String
  integrationType: IntegrationType
  integrationType_not: IntegrationType
  integrationType_in: [IntegrationType!]
  integrationType_not_in: [IntegrationType!]
  isConnected: String
  isConnected_not: String
  isConnected_in: [String!]
  isConnected_not_in: [String!]
  isConnected_lt: String
  isConnected_lte: String
  isConnected_gt: String
  isConnected_gte: String
  isConnected_contains: String
  isConnected_not_contains: String
  isConnected_starts_with: String
  isConnected_not_starts_with: String
  isConnected_ends_with: String
  isConnected_not_ends_with: String
  accountNumber: String
  accountNumber_not: String
  accountNumber_in: [String!]
  accountNumber_not_in: [String!]
  accountNumber_lt: String
  accountNumber_lte: String
  accountNumber_gt: String
  accountNumber_gte: String
  accountNumber_contains: String
  accountNumber_not_contains: String
  accountNumber_starts_with: String
  accountNumber_not_starts_with: String
  accountNumber_ends_with: String
  accountNumber_not_ends_with: String
  AND: [IntegrationWhereInput!]
  OR: [IntegrationWhereInput!]
  NOT: [IntegrationWhereInput!]
}

input IntegrationWhereUniqueInput {
  id: ID
}

scalar Json

type Liability {
  id: ID!
  createdAt: DateTime!
  company: Company!
  scenarios(where: ScenarioWhereInput, orderBy: ScenarioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Scenario!]
  category: Category
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  liabilityType: LiabilityType!
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  data: Json!
  metrics(where: MetricWhereInput, orderBy: MetricOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Metric!]
  isPublished: Boolean
}

type LiabilityConnection {
  pageInfo: PageInfo!
  edges: [LiabilityEdge]!
  aggregate: AggregateLiability!
}

input LiabilityCreateInput {
  id: ID
  company: CompanyCreateOneWithoutLiabilitiesInput!
  scenarios: ScenarioCreateManyWithoutLiabilitiesInput
  category: CategoryCreateOneWithoutLiabilitiesInput
  tags: TagCreateManyWithoutLiabilitiesInput
  liabilityType: LiabilityType!
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  data: Json!
  metrics: MetricCreateManyWithoutLiabilityInput
  isPublished: Boolean
}

input LiabilityCreateManyWithoutCategoryInput {
  create: [LiabilityCreateWithoutCategoryInput!]
  connect: [LiabilityWhereUniqueInput!]
}

input LiabilityCreateManyWithoutCompanyInput {
  create: [LiabilityCreateWithoutCompanyInput!]
  connect: [LiabilityWhereUniqueInput!]
}

input LiabilityCreateManyWithoutScenariosInput {
  create: [LiabilityCreateWithoutScenariosInput!]
  connect: [LiabilityWhereUniqueInput!]
}

input LiabilityCreateManyWithoutTagsInput {
  create: [LiabilityCreateWithoutTagsInput!]
  connect: [LiabilityWhereUniqueInput!]
}

input LiabilityCreateOneWithoutMetricsInput {
  create: LiabilityCreateWithoutMetricsInput
  connect: LiabilityWhereUniqueInput
}

input LiabilityCreateWithoutCategoryInput {
  id: ID
  company: CompanyCreateOneWithoutLiabilitiesInput!
  scenarios: ScenarioCreateManyWithoutLiabilitiesInput
  tags: TagCreateManyWithoutLiabilitiesInput
  liabilityType: LiabilityType!
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  data: Json!
  metrics: MetricCreateManyWithoutLiabilityInput
  isPublished: Boolean
}

input LiabilityCreateWithoutCompanyInput {
  id: ID
  scenarios: ScenarioCreateManyWithoutLiabilitiesInput
  category: CategoryCreateOneWithoutLiabilitiesInput
  tags: TagCreateManyWithoutLiabilitiesInput
  liabilityType: LiabilityType!
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  data: Json!
  metrics: MetricCreateManyWithoutLiabilityInput
  isPublished: Boolean
}

input LiabilityCreateWithoutMetricsInput {
  id: ID
  company: CompanyCreateOneWithoutLiabilitiesInput!
  scenarios: ScenarioCreateManyWithoutLiabilitiesInput
  category: CategoryCreateOneWithoutLiabilitiesInput
  tags: TagCreateManyWithoutLiabilitiesInput
  liabilityType: LiabilityType!
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  data: Json!
  isPublished: Boolean
}

input LiabilityCreateWithoutScenariosInput {
  id: ID
  company: CompanyCreateOneWithoutLiabilitiesInput!
  category: CategoryCreateOneWithoutLiabilitiesInput
  tags: TagCreateManyWithoutLiabilitiesInput
  liabilityType: LiabilityType!
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  data: Json!
  metrics: MetricCreateManyWithoutLiabilityInput
  isPublished: Boolean
}

input LiabilityCreateWithoutTagsInput {
  id: ID
  company: CompanyCreateOneWithoutLiabilitiesInput!
  scenarios: ScenarioCreateManyWithoutLiabilitiesInput
  category: CategoryCreateOneWithoutLiabilitiesInput
  liabilityType: LiabilityType!
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  data: Json!
  metrics: MetricCreateManyWithoutLiabilityInput
  isPublished: Boolean
}

type LiabilityEdge {
  node: Liability!
  cursor: String!
}

enum LiabilityOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  liabilityType_ASC
  liabilityType_DESC
  name_ASC
  name_DESC
  startTimestamp_ASC
  startTimestamp_DESC
  endTimestamp_ASC
  endTimestamp_DESC
  data_ASC
  data_DESC
  isPublished_ASC
  isPublished_DESC
}

type LiabilityPreviousValues {
  id: ID!
  createdAt: DateTime!
  liabilityType: LiabilityType!
  name: String!
  startTimestamp: DateTime!
  endTimestamp: DateTime
  data: Json!
  isPublished: Boolean
}

input LiabilityScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  liabilityType: LiabilityType
  liabilityType_not: LiabilityType
  liabilityType_in: [LiabilityType!]
  liabilityType_not_in: [LiabilityType!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  startTimestamp: DateTime
  startTimestamp_not: DateTime
  startTimestamp_in: [DateTime!]
  startTimestamp_not_in: [DateTime!]
  startTimestamp_lt: DateTime
  startTimestamp_lte: DateTime
  startTimestamp_gt: DateTime
  startTimestamp_gte: DateTime
  endTimestamp: DateTime
  endTimestamp_not: DateTime
  endTimestamp_in: [DateTime!]
  endTimestamp_not_in: [DateTime!]
  endTimestamp_lt: DateTime
  endTimestamp_lte: DateTime
  endTimestamp_gt: DateTime
  endTimestamp_gte: DateTime
  isPublished: Boolean
  isPublished_not: Boolean
  AND: [LiabilityScalarWhereInput!]
  OR: [LiabilityScalarWhereInput!]
  NOT: [LiabilityScalarWhereInput!]
}

type LiabilitySubscriptionPayload {
  mutation: MutationType!
  node: Liability
  updatedFields: [String!]
  previousValues: LiabilityPreviousValues
}

input LiabilitySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LiabilityWhereInput
  AND: [LiabilitySubscriptionWhereInput!]
  OR: [LiabilitySubscriptionWhereInput!]
  NOT: [LiabilitySubscriptionWhereInput!]
}

enum LiabilityType {
  LIABILITIES_ACCOUNTS_PAYABLE
  LIABILITIES_UNEARNED_REVENUE
  LIABILITIES_LONG_TERM_DEBT
  LIABILITIES_CUSTOM
}

input LiabilityUpdateInput {
  company: CompanyUpdateOneRequiredWithoutLiabilitiesInput
  scenarios: ScenarioUpdateManyWithoutLiabilitiesInput
  category: CategoryUpdateOneWithoutLiabilitiesInput
  tags: TagUpdateManyWithoutLiabilitiesInput
  liabilityType: LiabilityType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  metrics: MetricUpdateManyWithoutLiabilityInput
  isPublished: Boolean
}

input LiabilityUpdateManyDataInput {
  liabilityType: LiabilityType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  isPublished: Boolean
}

input LiabilityUpdateManyMutationInput {
  liabilityType: LiabilityType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  isPublished: Boolean
}

input LiabilityUpdateManyWithoutCategoryInput {
  create: [LiabilityCreateWithoutCategoryInput!]
  delete: [LiabilityWhereUniqueInput!]
  connect: [LiabilityWhereUniqueInput!]
  set: [LiabilityWhereUniqueInput!]
  disconnect: [LiabilityWhereUniqueInput!]
  update: [LiabilityUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [LiabilityUpsertWithWhereUniqueWithoutCategoryInput!]
  deleteMany: [LiabilityScalarWhereInput!]
  updateMany: [LiabilityUpdateManyWithWhereNestedInput!]
}

input LiabilityUpdateManyWithoutCompanyInput {
  create: [LiabilityCreateWithoutCompanyInput!]
  delete: [LiabilityWhereUniqueInput!]
  connect: [LiabilityWhereUniqueInput!]
  set: [LiabilityWhereUniqueInput!]
  disconnect: [LiabilityWhereUniqueInput!]
  update: [LiabilityUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [LiabilityUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [LiabilityScalarWhereInput!]
  updateMany: [LiabilityUpdateManyWithWhereNestedInput!]
}

input LiabilityUpdateManyWithoutScenariosInput {
  create: [LiabilityCreateWithoutScenariosInput!]
  delete: [LiabilityWhereUniqueInput!]
  connect: [LiabilityWhereUniqueInput!]
  set: [LiabilityWhereUniqueInput!]
  disconnect: [LiabilityWhereUniqueInput!]
  update: [LiabilityUpdateWithWhereUniqueWithoutScenariosInput!]
  upsert: [LiabilityUpsertWithWhereUniqueWithoutScenariosInput!]
  deleteMany: [LiabilityScalarWhereInput!]
  updateMany: [LiabilityUpdateManyWithWhereNestedInput!]
}

input LiabilityUpdateManyWithoutTagsInput {
  create: [LiabilityCreateWithoutTagsInput!]
  delete: [LiabilityWhereUniqueInput!]
  connect: [LiabilityWhereUniqueInput!]
  set: [LiabilityWhereUniqueInput!]
  disconnect: [LiabilityWhereUniqueInput!]
  update: [LiabilityUpdateWithWhereUniqueWithoutTagsInput!]
  upsert: [LiabilityUpsertWithWhereUniqueWithoutTagsInput!]
  deleteMany: [LiabilityScalarWhereInput!]
  updateMany: [LiabilityUpdateManyWithWhereNestedInput!]
}

input LiabilityUpdateManyWithWhereNestedInput {
  where: LiabilityScalarWhereInput!
  data: LiabilityUpdateManyDataInput!
}

input LiabilityUpdateOneWithoutMetricsInput {
  create: LiabilityCreateWithoutMetricsInput
  update: LiabilityUpdateWithoutMetricsDataInput
  upsert: LiabilityUpsertWithoutMetricsInput
  delete: Boolean
  disconnect: Boolean
  connect: LiabilityWhereUniqueInput
}

input LiabilityUpdateWithoutCategoryDataInput {
  company: CompanyUpdateOneRequiredWithoutLiabilitiesInput
  scenarios: ScenarioUpdateManyWithoutLiabilitiesInput
  tags: TagUpdateManyWithoutLiabilitiesInput
  liabilityType: LiabilityType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  metrics: MetricUpdateManyWithoutLiabilityInput
  isPublished: Boolean
}

input LiabilityUpdateWithoutCompanyDataInput {
  scenarios: ScenarioUpdateManyWithoutLiabilitiesInput
  category: CategoryUpdateOneWithoutLiabilitiesInput
  tags: TagUpdateManyWithoutLiabilitiesInput
  liabilityType: LiabilityType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  metrics: MetricUpdateManyWithoutLiabilityInput
  isPublished: Boolean
}

input LiabilityUpdateWithoutMetricsDataInput {
  company: CompanyUpdateOneRequiredWithoutLiabilitiesInput
  scenarios: ScenarioUpdateManyWithoutLiabilitiesInput
  category: CategoryUpdateOneWithoutLiabilitiesInput
  tags: TagUpdateManyWithoutLiabilitiesInput
  liabilityType: LiabilityType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  isPublished: Boolean
}

input LiabilityUpdateWithoutScenariosDataInput {
  company: CompanyUpdateOneRequiredWithoutLiabilitiesInput
  category: CategoryUpdateOneWithoutLiabilitiesInput
  tags: TagUpdateManyWithoutLiabilitiesInput
  liabilityType: LiabilityType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  metrics: MetricUpdateManyWithoutLiabilityInput
  isPublished: Boolean
}

input LiabilityUpdateWithoutTagsDataInput {
  company: CompanyUpdateOneRequiredWithoutLiabilitiesInput
  scenarios: ScenarioUpdateManyWithoutLiabilitiesInput
  category: CategoryUpdateOneWithoutLiabilitiesInput
  liabilityType: LiabilityType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  data: Json
  metrics: MetricUpdateManyWithoutLiabilityInput
  isPublished: Boolean
}

input LiabilityUpdateWithWhereUniqueWithoutCategoryInput {
  where: LiabilityWhereUniqueInput!
  data: LiabilityUpdateWithoutCategoryDataInput!
}

input LiabilityUpdateWithWhereUniqueWithoutCompanyInput {
  where: LiabilityWhereUniqueInput!
  data: LiabilityUpdateWithoutCompanyDataInput!
}

input LiabilityUpdateWithWhereUniqueWithoutScenariosInput {
  where: LiabilityWhereUniqueInput!
  data: LiabilityUpdateWithoutScenariosDataInput!
}

input LiabilityUpdateWithWhereUniqueWithoutTagsInput {
  where: LiabilityWhereUniqueInput!
  data: LiabilityUpdateWithoutTagsDataInput!
}

input LiabilityUpsertWithoutMetricsInput {
  update: LiabilityUpdateWithoutMetricsDataInput!
  create: LiabilityCreateWithoutMetricsInput!
}

input LiabilityUpsertWithWhereUniqueWithoutCategoryInput {
  where: LiabilityWhereUniqueInput!
  update: LiabilityUpdateWithoutCategoryDataInput!
  create: LiabilityCreateWithoutCategoryInput!
}

input LiabilityUpsertWithWhereUniqueWithoutCompanyInput {
  where: LiabilityWhereUniqueInput!
  update: LiabilityUpdateWithoutCompanyDataInput!
  create: LiabilityCreateWithoutCompanyInput!
}

input LiabilityUpsertWithWhereUniqueWithoutScenariosInput {
  where: LiabilityWhereUniqueInput!
  update: LiabilityUpdateWithoutScenariosDataInput!
  create: LiabilityCreateWithoutScenariosInput!
}

input LiabilityUpsertWithWhereUniqueWithoutTagsInput {
  where: LiabilityWhereUniqueInput!
  update: LiabilityUpdateWithoutTagsDataInput!
  create: LiabilityCreateWithoutTagsInput!
}

input LiabilityWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  company: CompanyWhereInput
  scenarios_every: ScenarioWhereInput
  scenarios_some: ScenarioWhereInput
  scenarios_none: ScenarioWhereInput
  category: CategoryWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  liabilityType: LiabilityType
  liabilityType_not: LiabilityType
  liabilityType_in: [LiabilityType!]
  liabilityType_not_in: [LiabilityType!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  startTimestamp: DateTime
  startTimestamp_not: DateTime
  startTimestamp_in: [DateTime!]
  startTimestamp_not_in: [DateTime!]
  startTimestamp_lt: DateTime
  startTimestamp_lte: DateTime
  startTimestamp_gt: DateTime
  startTimestamp_gte: DateTime
  endTimestamp: DateTime
  endTimestamp_not: DateTime
  endTimestamp_in: [DateTime!]
  endTimestamp_not_in: [DateTime!]
  endTimestamp_lt: DateTime
  endTimestamp_lte: DateTime
  endTimestamp_gt: DateTime
  endTimestamp_gte: DateTime
  metrics_every: MetricWhereInput
  metrics_some: MetricWhereInput
  metrics_none: MetricWhereInput
  isPublished: Boolean
  isPublished_not: Boolean
  AND: [LiabilityWhereInput!]
  OR: [LiabilityWhereInput!]
  NOT: [LiabilityWhereInput!]
}

input LiabilityWhereUniqueInput {
  id: ID
}

scalar Long

type Metric {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  key: String!
  subjectId: ID!
  subjectType: SubjectType!
  metricType: MetricType!
  name: String!
  currentTimestamp: DateTime
  data: Json!
  assumptions(where: AssumptionWhereInput, orderBy: AssumptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Assumption!]
  timelineEntries(where: TimelineEntryWhereInput, orderBy: TimelineEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimelineEntry!]
  asset: Asset
  equity: Equity
  expense: Expense
  person: Person
  product: Product
  liability: Liability
  scenario: Scenario
  funnel: GrowthFunnel
  funnelStarted: GrowthFunnel
  growthFunnel: GrowthFunnel
  funnelEnded: GrowthFunnel
}

type MetricConnection {
  pageInfo: PageInfo!
  edges: [MetricEdge]!
  aggregate: AggregateMetric!
}

input MetricCreateInput {
  id: ID
  key: String!
  subjectId: ID!
  subjectType: SubjectType!
  metricType: MetricType!
  name: String!
  data: Json!
  assumptions: AssumptionCreateManyWithoutMetricInput
  timelineEntries: TimelineEntryCreateManyWithoutMetricInput
  asset: AssetCreateOneWithoutMetricsInput
  equity: EquityCreateOneWithoutMetricsInput
  expense: ExpenseCreateOneWithoutMetricsInput
  person: PersonCreateOneWithoutMetricsInput
  product: ProductCreateOneWithoutMetricsInput
  liability: LiabilityCreateOneWithoutMetricsInput
  scenario: ScenarioCreateOneWithoutMetricsInput
  funnel: GrowthFunnelCreateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelCreateOneWithoutStartMetricInput
  growthFunnel: GrowthFunnelCreateOneWithoutGrowthStagesInput
  funnelEnded: GrowthFunnelCreateOneWithoutEndMetricInput
}

input MetricCreateManyWithoutAssetInput {
  create: [MetricCreateWithoutAssetInput!]
  connect: [MetricWhereUniqueInput!]
}

input MetricCreateManyWithoutEquityInput {
  create: [MetricCreateWithoutEquityInput!]
  connect: [MetricWhereUniqueInput!]
}

input MetricCreateManyWithoutExpenseInput {
  create: [MetricCreateWithoutExpenseInput!]
  connect: [MetricWhereUniqueInput!]
}

input MetricCreateManyWithoutFunnelInput {
  create: [MetricCreateWithoutFunnelInput!]
  connect: [MetricWhereUniqueInput!]
}

input MetricCreateManyWithoutGrowthFunnelInput {
  create: [MetricCreateWithoutGrowthFunnelInput!]
  connect: [MetricWhereUniqueInput!]
}

input MetricCreateManyWithoutLiabilityInput {
  create: [MetricCreateWithoutLiabilityInput!]
  connect: [MetricWhereUniqueInput!]
}

input MetricCreateManyWithoutPersonInput {
  create: [MetricCreateWithoutPersonInput!]
  connect: [MetricWhereUniqueInput!]
}

input MetricCreateManyWithoutProductInput {
  create: [MetricCreateWithoutProductInput!]
  connect: [MetricWhereUniqueInput!]
}

input MetricCreateManyWithoutScenarioInput {
  create: [MetricCreateWithoutScenarioInput!]
  connect: [MetricWhereUniqueInput!]
}

input MetricCreateOneWithoutAssumptionsInput {
  create: MetricCreateWithoutAssumptionsInput
  connect: MetricWhereUniqueInput
}

input MetricCreateOneWithoutFunnelEndedInput {
  create: MetricCreateWithoutFunnelEndedInput
  connect: MetricWhereUniqueInput
}

input MetricCreateOneWithoutFunnelStartedInput {
  create: MetricCreateWithoutFunnelStartedInput
  connect: MetricWhereUniqueInput
}

input MetricCreateOneWithoutTimelineEntriesInput {
  create: MetricCreateWithoutTimelineEntriesInput
  connect: MetricWhereUniqueInput
}

input MetricCreateWithoutAssetInput {
  id: ID
  key: String!
  subjectId: ID!
  subjectType: SubjectType!
  metricType: MetricType!
  name: String!
  data: Json!
  assumptions: AssumptionCreateManyWithoutMetricInput
  timelineEntries: TimelineEntryCreateManyWithoutMetricInput
  equity: EquityCreateOneWithoutMetricsInput
  expense: ExpenseCreateOneWithoutMetricsInput
  person: PersonCreateOneWithoutMetricsInput
  product: ProductCreateOneWithoutMetricsInput
  liability: LiabilityCreateOneWithoutMetricsInput
  scenario: ScenarioCreateOneWithoutMetricsInput
  funnel: GrowthFunnelCreateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelCreateOneWithoutStartMetricInput
  growthFunnel: GrowthFunnelCreateOneWithoutGrowthStagesInput
  funnelEnded: GrowthFunnelCreateOneWithoutEndMetricInput
}

input MetricCreateWithoutAssumptionsInput {
  id: ID
  key: String!
  subjectId: ID!
  subjectType: SubjectType!
  metricType: MetricType!
  name: String!
  data: Json!
  timelineEntries: TimelineEntryCreateManyWithoutMetricInput
  asset: AssetCreateOneWithoutMetricsInput
  equity: EquityCreateOneWithoutMetricsInput
  expense: ExpenseCreateOneWithoutMetricsInput
  person: PersonCreateOneWithoutMetricsInput
  product: ProductCreateOneWithoutMetricsInput
  liability: LiabilityCreateOneWithoutMetricsInput
  scenario: ScenarioCreateOneWithoutMetricsInput
  funnel: GrowthFunnelCreateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelCreateOneWithoutStartMetricInput
  growthFunnel: GrowthFunnelCreateOneWithoutGrowthStagesInput
  funnelEnded: GrowthFunnelCreateOneWithoutEndMetricInput
}

input MetricCreateWithoutEquityInput {
  id: ID
  key: String!
  subjectId: ID!
  subjectType: SubjectType!
  metricType: MetricType!
  name: String!
  data: Json!
  assumptions: AssumptionCreateManyWithoutMetricInput
  timelineEntries: TimelineEntryCreateManyWithoutMetricInput
  asset: AssetCreateOneWithoutMetricsInput
  expense: ExpenseCreateOneWithoutMetricsInput
  person: PersonCreateOneWithoutMetricsInput
  product: ProductCreateOneWithoutMetricsInput
  liability: LiabilityCreateOneWithoutMetricsInput
  scenario: ScenarioCreateOneWithoutMetricsInput
  funnel: GrowthFunnelCreateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelCreateOneWithoutStartMetricInput
  growthFunnel: GrowthFunnelCreateOneWithoutGrowthStagesInput
  funnelEnded: GrowthFunnelCreateOneWithoutEndMetricInput
}

input MetricCreateWithoutExpenseInput {
  id: ID
  key: String!
  subjectId: ID!
  subjectType: SubjectType!
  metricType: MetricType!
  name: String!
  data: Json!
  assumptions: AssumptionCreateManyWithoutMetricInput
  timelineEntries: TimelineEntryCreateManyWithoutMetricInput
  asset: AssetCreateOneWithoutMetricsInput
  equity: EquityCreateOneWithoutMetricsInput
  person: PersonCreateOneWithoutMetricsInput
  product: ProductCreateOneWithoutMetricsInput
  liability: LiabilityCreateOneWithoutMetricsInput
  scenario: ScenarioCreateOneWithoutMetricsInput
  funnel: GrowthFunnelCreateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelCreateOneWithoutStartMetricInput
  growthFunnel: GrowthFunnelCreateOneWithoutGrowthStagesInput
  funnelEnded: GrowthFunnelCreateOneWithoutEndMetricInput
}

input MetricCreateWithoutFunnelEndedInput {
  id: ID
  key: String!
  subjectId: ID!
  subjectType: SubjectType!
  metricType: MetricType!
  name: String!
  data: Json!
  assumptions: AssumptionCreateManyWithoutMetricInput
  timelineEntries: TimelineEntryCreateManyWithoutMetricInput
  asset: AssetCreateOneWithoutMetricsInput
  equity: EquityCreateOneWithoutMetricsInput
  expense: ExpenseCreateOneWithoutMetricsInput
  person: PersonCreateOneWithoutMetricsInput
  product: ProductCreateOneWithoutMetricsInput
  liability: LiabilityCreateOneWithoutMetricsInput
  scenario: ScenarioCreateOneWithoutMetricsInput
  funnel: GrowthFunnelCreateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelCreateOneWithoutStartMetricInput
  growthFunnel: GrowthFunnelCreateOneWithoutGrowthStagesInput
}

input MetricCreateWithoutFunnelInput {
  id: ID
  key: String!
  subjectId: ID!
  subjectType: SubjectType!
  metricType: MetricType!
  name: String!
  data: Json!
  assumptions: AssumptionCreateManyWithoutMetricInput
  timelineEntries: TimelineEntryCreateManyWithoutMetricInput
  asset: AssetCreateOneWithoutMetricsInput
  equity: EquityCreateOneWithoutMetricsInput
  expense: ExpenseCreateOneWithoutMetricsInput
  person: PersonCreateOneWithoutMetricsInput
  product: ProductCreateOneWithoutMetricsInput
  liability: LiabilityCreateOneWithoutMetricsInput
  scenario: ScenarioCreateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelCreateOneWithoutStartMetricInput
  growthFunnel: GrowthFunnelCreateOneWithoutGrowthStagesInput
  funnelEnded: GrowthFunnelCreateOneWithoutEndMetricInput
}

input MetricCreateWithoutFunnelStartedInput {
  id: ID
  key: String!
  subjectId: ID!
  subjectType: SubjectType!
  metricType: MetricType!
  name: String!
  data: Json!
  assumptions: AssumptionCreateManyWithoutMetricInput
  timelineEntries: TimelineEntryCreateManyWithoutMetricInput
  asset: AssetCreateOneWithoutMetricsInput
  equity: EquityCreateOneWithoutMetricsInput
  expense: ExpenseCreateOneWithoutMetricsInput
  person: PersonCreateOneWithoutMetricsInput
  product: ProductCreateOneWithoutMetricsInput
  liability: LiabilityCreateOneWithoutMetricsInput
  scenario: ScenarioCreateOneWithoutMetricsInput
  funnel: GrowthFunnelCreateOneWithoutMetricsInput
  growthFunnel: GrowthFunnelCreateOneWithoutGrowthStagesInput
  funnelEnded: GrowthFunnelCreateOneWithoutEndMetricInput
}

input MetricCreateWithoutGrowthFunnelInput {
  id: ID
  key: String!
  subjectId: ID!
  subjectType: SubjectType!
  metricType: MetricType!
  name: String!
  data: Json!
  assumptions: AssumptionCreateManyWithoutMetricInput
  timelineEntries: TimelineEntryCreateManyWithoutMetricInput
  asset: AssetCreateOneWithoutMetricsInput
  equity: EquityCreateOneWithoutMetricsInput
  expense: ExpenseCreateOneWithoutMetricsInput
  person: PersonCreateOneWithoutMetricsInput
  product: ProductCreateOneWithoutMetricsInput
  liability: LiabilityCreateOneWithoutMetricsInput
  scenario: ScenarioCreateOneWithoutMetricsInput
  funnel: GrowthFunnelCreateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelCreateOneWithoutStartMetricInput
  funnelEnded: GrowthFunnelCreateOneWithoutEndMetricInput
}

input MetricCreateWithoutLiabilityInput {
  id: ID
  key: String!
  subjectId: ID!
  subjectType: SubjectType!
  metricType: MetricType!
  name: String!
  data: Json!
  assumptions: AssumptionCreateManyWithoutMetricInput
  timelineEntries: TimelineEntryCreateManyWithoutMetricInput
  asset: AssetCreateOneWithoutMetricsInput
  equity: EquityCreateOneWithoutMetricsInput
  expense: ExpenseCreateOneWithoutMetricsInput
  person: PersonCreateOneWithoutMetricsInput
  product: ProductCreateOneWithoutMetricsInput
  scenario: ScenarioCreateOneWithoutMetricsInput
  funnel: GrowthFunnelCreateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelCreateOneWithoutStartMetricInput
  growthFunnel: GrowthFunnelCreateOneWithoutGrowthStagesInput
  funnelEnded: GrowthFunnelCreateOneWithoutEndMetricInput
}

input MetricCreateWithoutPersonInput {
  id: ID
  key: String!
  subjectId: ID!
  subjectType: SubjectType!
  metricType: MetricType!
  name: String!
  data: Json!
  assumptions: AssumptionCreateManyWithoutMetricInput
  timelineEntries: TimelineEntryCreateManyWithoutMetricInput
  asset: AssetCreateOneWithoutMetricsInput
  equity: EquityCreateOneWithoutMetricsInput
  expense: ExpenseCreateOneWithoutMetricsInput
  product: ProductCreateOneWithoutMetricsInput
  liability: LiabilityCreateOneWithoutMetricsInput
  scenario: ScenarioCreateOneWithoutMetricsInput
  funnel: GrowthFunnelCreateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelCreateOneWithoutStartMetricInput
  growthFunnel: GrowthFunnelCreateOneWithoutGrowthStagesInput
  funnelEnded: GrowthFunnelCreateOneWithoutEndMetricInput
}

input MetricCreateWithoutProductInput {
  id: ID
  key: String!
  subjectId: ID!
  subjectType: SubjectType!
  metricType: MetricType!
  name: String!
  data: Json!
  assumptions: AssumptionCreateManyWithoutMetricInput
  timelineEntries: TimelineEntryCreateManyWithoutMetricInput
  asset: AssetCreateOneWithoutMetricsInput
  equity: EquityCreateOneWithoutMetricsInput
  expense: ExpenseCreateOneWithoutMetricsInput
  person: PersonCreateOneWithoutMetricsInput
  liability: LiabilityCreateOneWithoutMetricsInput
  scenario: ScenarioCreateOneWithoutMetricsInput
  funnel: GrowthFunnelCreateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelCreateOneWithoutStartMetricInput
  growthFunnel: GrowthFunnelCreateOneWithoutGrowthStagesInput
  funnelEnded: GrowthFunnelCreateOneWithoutEndMetricInput
}

input MetricCreateWithoutScenarioInput {
  id: ID
  key: String!
  subjectId: ID!
  subjectType: SubjectType!
  metricType: MetricType!
  name: String!
  data: Json!
  assumptions: AssumptionCreateManyWithoutMetricInput
  timelineEntries: TimelineEntryCreateManyWithoutMetricInput
  asset: AssetCreateOneWithoutMetricsInput
  equity: EquityCreateOneWithoutMetricsInput
  expense: ExpenseCreateOneWithoutMetricsInput
  person: PersonCreateOneWithoutMetricsInput
  product: ProductCreateOneWithoutMetricsInput
  liability: LiabilityCreateOneWithoutMetricsInput
  funnel: GrowthFunnelCreateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelCreateOneWithoutStartMetricInput
  growthFunnel: GrowthFunnelCreateOneWithoutGrowthStagesInput
  funnelEnded: GrowthFunnelCreateOneWithoutEndMetricInput
}

input MetricCreateWithoutTimelineEntriesInput {
  id: ID
  key: String!
  subjectId: ID!
  subjectType: SubjectType!
  metricType: MetricType!
  name: String!
  data: Json!
  assumptions: AssumptionCreateManyWithoutMetricInput
  asset: AssetCreateOneWithoutMetricsInput
  equity: EquityCreateOneWithoutMetricsInput
  expense: ExpenseCreateOneWithoutMetricsInput
  person: PersonCreateOneWithoutMetricsInput
  product: ProductCreateOneWithoutMetricsInput
  liability: LiabilityCreateOneWithoutMetricsInput
  scenario: ScenarioCreateOneWithoutMetricsInput
  funnel: GrowthFunnelCreateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelCreateOneWithoutStartMetricInput
  growthFunnel: GrowthFunnelCreateOneWithoutGrowthStagesInput
  funnelEnded: GrowthFunnelCreateOneWithoutEndMetricInput
}

type MetricEdge {
  node: Metric!
  cursor: String!
}

enum MetricOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  key_ASC
  key_DESC
  subjectId_ASC
  subjectId_DESC
  subjectType_ASC
  subjectType_DESC
  metricType_ASC
  metricType_DESC
  name_ASC
  name_DESC
  currentTimestamp_ASC
  currentTimestamp_DESC
  data_ASC
  data_DESC
}

type MetricPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  key: String!
  subjectId: ID!
  subjectType: SubjectType!
  metricType: MetricType!
  name: String!
  currentTimestamp: DateTime
  data: Json!
}

input MetricScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_lt: String
  key_lte: String
  key_gt: String
  key_gte: String
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  subjectId: ID
  subjectId_not: ID
  subjectId_in: [ID!]
  subjectId_not_in: [ID!]
  subjectId_lt: ID
  subjectId_lte: ID
  subjectId_gt: ID
  subjectId_gte: ID
  subjectId_contains: ID
  subjectId_not_contains: ID
  subjectId_starts_with: ID
  subjectId_not_starts_with: ID
  subjectId_ends_with: ID
  subjectId_not_ends_with: ID
  subjectType: SubjectType
  subjectType_not: SubjectType
  subjectType_in: [SubjectType!]
  subjectType_not_in: [SubjectType!]
  metricType: MetricType
  metricType_not: MetricType
  metricType_in: [MetricType!]
  metricType_not_in: [MetricType!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  currentTimestamp: DateTime
  currentTimestamp_not: DateTime
  currentTimestamp_in: [DateTime!]
  currentTimestamp_not_in: [DateTime!]
  currentTimestamp_lt: DateTime
  currentTimestamp_lte: DateTime
  currentTimestamp_gt: DateTime
  currentTimestamp_gte: DateTime
  AND: [MetricScalarWhereInput!]
  OR: [MetricScalarWhereInput!]
  NOT: [MetricScalarWhereInput!]
}

type MetricSubscriptionPayload {
  mutation: MutationType!
  node: Metric
  updatedFields: [String!]
  previousValues: MetricPreviousValues
}

input MetricSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MetricWhereInput
  AND: [MetricSubscriptionWhereInput!]
  OR: [MetricSubscriptionWhereInput!]
  NOT: [MetricSubscriptionWhereInput!]
}

enum MetricType {
  DERIVED
  EQUATION
  OPERATION
  VALUE
  PAST_VALUE
  FUTURE_VALUE
  GROWTH_FUNNEL_AFFILIATE_LEADS
  GROWTH_FUNNEL_CONFERENCE_LEADS
  GROWTH_FUNNEL_INFLUENCER_LEADS
  GROWTH_FUNNEL_LEADS_FROM_SOURCE
  GROWTH_FUNNEL_LEADS_VALUE
  GROWTH_FUNNEL_PAID_LEADS
  GROWTH_FUNNEL_PARTNERSHIP_LEADS
  GROWTH_FUNNEL_CUSTOMER_REFERRAL_LEADS
  GROWTH_FUNNEL_EMAIL_MARKETING_LEADS
  GROWTH_FUNNEL_CONTENT_MARKETING_LEADS
}

input MetricUpdateInput {
  key: String
  subjectId: ID
  subjectType: SubjectType
  metricType: MetricType
  name: String
  data: Json
  assumptions: AssumptionUpdateManyWithoutMetricInput
  timelineEntries: TimelineEntryUpdateManyWithoutMetricInput
  asset: AssetUpdateOneWithoutMetricsInput
  equity: EquityUpdateOneWithoutMetricsInput
  expense: ExpenseUpdateOneWithoutMetricsInput
  person: PersonUpdateOneWithoutMetricsInput
  product: ProductUpdateOneWithoutMetricsInput
  liability: LiabilityUpdateOneWithoutMetricsInput
  scenario: ScenarioUpdateOneWithoutMetricsInput
  funnel: GrowthFunnelUpdateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelUpdateOneWithoutStartMetricInput
  growthFunnel: GrowthFunnelUpdateOneWithoutGrowthStagesInput
  funnelEnded: GrowthFunnelUpdateOneWithoutEndMetricInput
}

input MetricUpdateManyDataInput {
  key: String
  subjectId: ID
  subjectType: SubjectType
  metricType: MetricType
  name: String
  data: Json
}

input MetricUpdateManyMutationInput {
  key: String
  subjectId: ID
  subjectType: SubjectType
  metricType: MetricType
  name: String
  data: Json
}

input MetricUpdateManyWithoutAssetInput {
  create: [MetricCreateWithoutAssetInput!]
  delete: [MetricWhereUniqueInput!]
  connect: [MetricWhereUniqueInput!]
  set: [MetricWhereUniqueInput!]
  disconnect: [MetricWhereUniqueInput!]
  update: [MetricUpdateWithWhereUniqueWithoutAssetInput!]
  upsert: [MetricUpsertWithWhereUniqueWithoutAssetInput!]
  deleteMany: [MetricScalarWhereInput!]
  updateMany: [MetricUpdateManyWithWhereNestedInput!]
}

input MetricUpdateManyWithoutEquityInput {
  create: [MetricCreateWithoutEquityInput!]
  delete: [MetricWhereUniqueInput!]
  connect: [MetricWhereUniqueInput!]
  set: [MetricWhereUniqueInput!]
  disconnect: [MetricWhereUniqueInput!]
  update: [MetricUpdateWithWhereUniqueWithoutEquityInput!]
  upsert: [MetricUpsertWithWhereUniqueWithoutEquityInput!]
  deleteMany: [MetricScalarWhereInput!]
  updateMany: [MetricUpdateManyWithWhereNestedInput!]
}

input MetricUpdateManyWithoutExpenseInput {
  create: [MetricCreateWithoutExpenseInput!]
  delete: [MetricWhereUniqueInput!]
  connect: [MetricWhereUniqueInput!]
  set: [MetricWhereUniqueInput!]
  disconnect: [MetricWhereUniqueInput!]
  update: [MetricUpdateWithWhereUniqueWithoutExpenseInput!]
  upsert: [MetricUpsertWithWhereUniqueWithoutExpenseInput!]
  deleteMany: [MetricScalarWhereInput!]
  updateMany: [MetricUpdateManyWithWhereNestedInput!]
}

input MetricUpdateManyWithoutFunnelInput {
  create: [MetricCreateWithoutFunnelInput!]
  delete: [MetricWhereUniqueInput!]
  connect: [MetricWhereUniqueInput!]
  set: [MetricWhereUniqueInput!]
  disconnect: [MetricWhereUniqueInput!]
  update: [MetricUpdateWithWhereUniqueWithoutFunnelInput!]
  upsert: [MetricUpsertWithWhereUniqueWithoutFunnelInput!]
  deleteMany: [MetricScalarWhereInput!]
  updateMany: [MetricUpdateManyWithWhereNestedInput!]
}

input MetricUpdateManyWithoutGrowthFunnelInput {
  create: [MetricCreateWithoutGrowthFunnelInput!]
  delete: [MetricWhereUniqueInput!]
  connect: [MetricWhereUniqueInput!]
  set: [MetricWhereUniqueInput!]
  disconnect: [MetricWhereUniqueInput!]
  update: [MetricUpdateWithWhereUniqueWithoutGrowthFunnelInput!]
  upsert: [MetricUpsertWithWhereUniqueWithoutGrowthFunnelInput!]
  deleteMany: [MetricScalarWhereInput!]
  updateMany: [MetricUpdateManyWithWhereNestedInput!]
}

input MetricUpdateManyWithoutLiabilityInput {
  create: [MetricCreateWithoutLiabilityInput!]
  delete: [MetricWhereUniqueInput!]
  connect: [MetricWhereUniqueInput!]
  set: [MetricWhereUniqueInput!]
  disconnect: [MetricWhereUniqueInput!]
  update: [MetricUpdateWithWhereUniqueWithoutLiabilityInput!]
  upsert: [MetricUpsertWithWhereUniqueWithoutLiabilityInput!]
  deleteMany: [MetricScalarWhereInput!]
  updateMany: [MetricUpdateManyWithWhereNestedInput!]
}

input MetricUpdateManyWithoutPersonInput {
  create: [MetricCreateWithoutPersonInput!]
  delete: [MetricWhereUniqueInput!]
  connect: [MetricWhereUniqueInput!]
  set: [MetricWhereUniqueInput!]
  disconnect: [MetricWhereUniqueInput!]
  update: [MetricUpdateWithWhereUniqueWithoutPersonInput!]
  upsert: [MetricUpsertWithWhereUniqueWithoutPersonInput!]
  deleteMany: [MetricScalarWhereInput!]
  updateMany: [MetricUpdateManyWithWhereNestedInput!]
}

input MetricUpdateManyWithoutProductInput {
  create: [MetricCreateWithoutProductInput!]
  delete: [MetricWhereUniqueInput!]
  connect: [MetricWhereUniqueInput!]
  set: [MetricWhereUniqueInput!]
  disconnect: [MetricWhereUniqueInput!]
  update: [MetricUpdateWithWhereUniqueWithoutProductInput!]
  upsert: [MetricUpsertWithWhereUniqueWithoutProductInput!]
  deleteMany: [MetricScalarWhereInput!]
  updateMany: [MetricUpdateManyWithWhereNestedInput!]
}

input MetricUpdateManyWithoutScenarioInput {
  create: [MetricCreateWithoutScenarioInput!]
  delete: [MetricWhereUniqueInput!]
  connect: [MetricWhereUniqueInput!]
  set: [MetricWhereUniqueInput!]
  disconnect: [MetricWhereUniqueInput!]
  update: [MetricUpdateWithWhereUniqueWithoutScenarioInput!]
  upsert: [MetricUpsertWithWhereUniqueWithoutScenarioInput!]
  deleteMany: [MetricScalarWhereInput!]
  updateMany: [MetricUpdateManyWithWhereNestedInput!]
}

input MetricUpdateManyWithWhereNestedInput {
  where: MetricScalarWhereInput!
  data: MetricUpdateManyDataInput!
}

input MetricUpdateOneRequiredWithoutAssumptionsInput {
  create: MetricCreateWithoutAssumptionsInput
  update: MetricUpdateWithoutAssumptionsDataInput
  upsert: MetricUpsertWithoutAssumptionsInput
  connect: MetricWhereUniqueInput
}

input MetricUpdateOneRequiredWithoutTimelineEntriesInput {
  create: MetricCreateWithoutTimelineEntriesInput
  update: MetricUpdateWithoutTimelineEntriesDataInput
  upsert: MetricUpsertWithoutTimelineEntriesInput
  connect: MetricWhereUniqueInput
}

input MetricUpdateOneWithoutFunnelEndedInput {
  create: MetricCreateWithoutFunnelEndedInput
  update: MetricUpdateWithoutFunnelEndedDataInput
  upsert: MetricUpsertWithoutFunnelEndedInput
  delete: Boolean
  disconnect: Boolean
  connect: MetricWhereUniqueInput
}

input MetricUpdateOneWithoutFunnelStartedInput {
  create: MetricCreateWithoutFunnelStartedInput
  update: MetricUpdateWithoutFunnelStartedDataInput
  upsert: MetricUpsertWithoutFunnelStartedInput
  delete: Boolean
  disconnect: Boolean
  connect: MetricWhereUniqueInput
}

input MetricUpdateWithoutAssetDataInput {
  key: String
  subjectId: ID
  subjectType: SubjectType
  metricType: MetricType
  name: String
  data: Json
  assumptions: AssumptionUpdateManyWithoutMetricInput
  timelineEntries: TimelineEntryUpdateManyWithoutMetricInput
  equity: EquityUpdateOneWithoutMetricsInput
  expense: ExpenseUpdateOneWithoutMetricsInput
  person: PersonUpdateOneWithoutMetricsInput
  product: ProductUpdateOneWithoutMetricsInput
  liability: LiabilityUpdateOneWithoutMetricsInput
  scenario: ScenarioUpdateOneWithoutMetricsInput
  funnel: GrowthFunnelUpdateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelUpdateOneWithoutStartMetricInput
  growthFunnel: GrowthFunnelUpdateOneWithoutGrowthStagesInput
  funnelEnded: GrowthFunnelUpdateOneWithoutEndMetricInput
}

input MetricUpdateWithoutAssumptionsDataInput {
  key: String
  subjectId: ID
  subjectType: SubjectType
  metricType: MetricType
  name: String
  data: Json
  timelineEntries: TimelineEntryUpdateManyWithoutMetricInput
  asset: AssetUpdateOneWithoutMetricsInput
  equity: EquityUpdateOneWithoutMetricsInput
  expense: ExpenseUpdateOneWithoutMetricsInput
  person: PersonUpdateOneWithoutMetricsInput
  product: ProductUpdateOneWithoutMetricsInput
  liability: LiabilityUpdateOneWithoutMetricsInput
  scenario: ScenarioUpdateOneWithoutMetricsInput
  funnel: GrowthFunnelUpdateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelUpdateOneWithoutStartMetricInput
  growthFunnel: GrowthFunnelUpdateOneWithoutGrowthStagesInput
  funnelEnded: GrowthFunnelUpdateOneWithoutEndMetricInput
}

input MetricUpdateWithoutEquityDataInput {
  key: String
  subjectId: ID
  subjectType: SubjectType
  metricType: MetricType
  name: String
  data: Json
  assumptions: AssumptionUpdateManyWithoutMetricInput
  timelineEntries: TimelineEntryUpdateManyWithoutMetricInput
  asset: AssetUpdateOneWithoutMetricsInput
  expense: ExpenseUpdateOneWithoutMetricsInput
  person: PersonUpdateOneWithoutMetricsInput
  product: ProductUpdateOneWithoutMetricsInput
  liability: LiabilityUpdateOneWithoutMetricsInput
  scenario: ScenarioUpdateOneWithoutMetricsInput
  funnel: GrowthFunnelUpdateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelUpdateOneWithoutStartMetricInput
  growthFunnel: GrowthFunnelUpdateOneWithoutGrowthStagesInput
  funnelEnded: GrowthFunnelUpdateOneWithoutEndMetricInput
}

input MetricUpdateWithoutExpenseDataInput {
  key: String
  subjectId: ID
  subjectType: SubjectType
  metricType: MetricType
  name: String
  data: Json
  assumptions: AssumptionUpdateManyWithoutMetricInput
  timelineEntries: TimelineEntryUpdateManyWithoutMetricInput
  asset: AssetUpdateOneWithoutMetricsInput
  equity: EquityUpdateOneWithoutMetricsInput
  person: PersonUpdateOneWithoutMetricsInput
  product: ProductUpdateOneWithoutMetricsInput
  liability: LiabilityUpdateOneWithoutMetricsInput
  scenario: ScenarioUpdateOneWithoutMetricsInput
  funnel: GrowthFunnelUpdateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelUpdateOneWithoutStartMetricInput
  growthFunnel: GrowthFunnelUpdateOneWithoutGrowthStagesInput
  funnelEnded: GrowthFunnelUpdateOneWithoutEndMetricInput
}

input MetricUpdateWithoutFunnelDataInput {
  key: String
  subjectId: ID
  subjectType: SubjectType
  metricType: MetricType
  name: String
  data: Json
  assumptions: AssumptionUpdateManyWithoutMetricInput
  timelineEntries: TimelineEntryUpdateManyWithoutMetricInput
  asset: AssetUpdateOneWithoutMetricsInput
  equity: EquityUpdateOneWithoutMetricsInput
  expense: ExpenseUpdateOneWithoutMetricsInput
  person: PersonUpdateOneWithoutMetricsInput
  product: ProductUpdateOneWithoutMetricsInput
  liability: LiabilityUpdateOneWithoutMetricsInput
  scenario: ScenarioUpdateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelUpdateOneWithoutStartMetricInput
  growthFunnel: GrowthFunnelUpdateOneWithoutGrowthStagesInput
  funnelEnded: GrowthFunnelUpdateOneWithoutEndMetricInput
}

input MetricUpdateWithoutFunnelEndedDataInput {
  key: String
  subjectId: ID
  subjectType: SubjectType
  metricType: MetricType
  name: String
  data: Json
  assumptions: AssumptionUpdateManyWithoutMetricInput
  timelineEntries: TimelineEntryUpdateManyWithoutMetricInput
  asset: AssetUpdateOneWithoutMetricsInput
  equity: EquityUpdateOneWithoutMetricsInput
  expense: ExpenseUpdateOneWithoutMetricsInput
  person: PersonUpdateOneWithoutMetricsInput
  product: ProductUpdateOneWithoutMetricsInput
  liability: LiabilityUpdateOneWithoutMetricsInput
  scenario: ScenarioUpdateOneWithoutMetricsInput
  funnel: GrowthFunnelUpdateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelUpdateOneWithoutStartMetricInput
  growthFunnel: GrowthFunnelUpdateOneWithoutGrowthStagesInput
}

input MetricUpdateWithoutFunnelStartedDataInput {
  key: String
  subjectId: ID
  subjectType: SubjectType
  metricType: MetricType
  name: String
  data: Json
  assumptions: AssumptionUpdateManyWithoutMetricInput
  timelineEntries: TimelineEntryUpdateManyWithoutMetricInput
  asset: AssetUpdateOneWithoutMetricsInput
  equity: EquityUpdateOneWithoutMetricsInput
  expense: ExpenseUpdateOneWithoutMetricsInput
  person: PersonUpdateOneWithoutMetricsInput
  product: ProductUpdateOneWithoutMetricsInput
  liability: LiabilityUpdateOneWithoutMetricsInput
  scenario: ScenarioUpdateOneWithoutMetricsInput
  funnel: GrowthFunnelUpdateOneWithoutMetricsInput
  growthFunnel: GrowthFunnelUpdateOneWithoutGrowthStagesInput
  funnelEnded: GrowthFunnelUpdateOneWithoutEndMetricInput
}

input MetricUpdateWithoutGrowthFunnelDataInput {
  key: String
  subjectId: ID
  subjectType: SubjectType
  metricType: MetricType
  name: String
  data: Json
  assumptions: AssumptionUpdateManyWithoutMetricInput
  timelineEntries: TimelineEntryUpdateManyWithoutMetricInput
  asset: AssetUpdateOneWithoutMetricsInput
  equity: EquityUpdateOneWithoutMetricsInput
  expense: ExpenseUpdateOneWithoutMetricsInput
  person: PersonUpdateOneWithoutMetricsInput
  product: ProductUpdateOneWithoutMetricsInput
  liability: LiabilityUpdateOneWithoutMetricsInput
  scenario: ScenarioUpdateOneWithoutMetricsInput
  funnel: GrowthFunnelUpdateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelUpdateOneWithoutStartMetricInput
  funnelEnded: GrowthFunnelUpdateOneWithoutEndMetricInput
}

input MetricUpdateWithoutLiabilityDataInput {
  key: String
  subjectId: ID
  subjectType: SubjectType
  metricType: MetricType
  name: String
  data: Json
  assumptions: AssumptionUpdateManyWithoutMetricInput
  timelineEntries: TimelineEntryUpdateManyWithoutMetricInput
  asset: AssetUpdateOneWithoutMetricsInput
  equity: EquityUpdateOneWithoutMetricsInput
  expense: ExpenseUpdateOneWithoutMetricsInput
  person: PersonUpdateOneWithoutMetricsInput
  product: ProductUpdateOneWithoutMetricsInput
  scenario: ScenarioUpdateOneWithoutMetricsInput
  funnel: GrowthFunnelUpdateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelUpdateOneWithoutStartMetricInput
  growthFunnel: GrowthFunnelUpdateOneWithoutGrowthStagesInput
  funnelEnded: GrowthFunnelUpdateOneWithoutEndMetricInput
}

input MetricUpdateWithoutPersonDataInput {
  key: String
  subjectId: ID
  subjectType: SubjectType
  metricType: MetricType
  name: String
  data: Json
  assumptions: AssumptionUpdateManyWithoutMetricInput
  timelineEntries: TimelineEntryUpdateManyWithoutMetricInput
  asset: AssetUpdateOneWithoutMetricsInput
  equity: EquityUpdateOneWithoutMetricsInput
  expense: ExpenseUpdateOneWithoutMetricsInput
  product: ProductUpdateOneWithoutMetricsInput
  liability: LiabilityUpdateOneWithoutMetricsInput
  scenario: ScenarioUpdateOneWithoutMetricsInput
  funnel: GrowthFunnelUpdateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelUpdateOneWithoutStartMetricInput
  growthFunnel: GrowthFunnelUpdateOneWithoutGrowthStagesInput
  funnelEnded: GrowthFunnelUpdateOneWithoutEndMetricInput
}

input MetricUpdateWithoutProductDataInput {
  key: String
  subjectId: ID
  subjectType: SubjectType
  metricType: MetricType
  name: String
  data: Json
  assumptions: AssumptionUpdateManyWithoutMetricInput
  timelineEntries: TimelineEntryUpdateManyWithoutMetricInput
  asset: AssetUpdateOneWithoutMetricsInput
  equity: EquityUpdateOneWithoutMetricsInput
  expense: ExpenseUpdateOneWithoutMetricsInput
  person: PersonUpdateOneWithoutMetricsInput
  liability: LiabilityUpdateOneWithoutMetricsInput
  scenario: ScenarioUpdateOneWithoutMetricsInput
  funnel: GrowthFunnelUpdateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelUpdateOneWithoutStartMetricInput
  growthFunnel: GrowthFunnelUpdateOneWithoutGrowthStagesInput
  funnelEnded: GrowthFunnelUpdateOneWithoutEndMetricInput
}

input MetricUpdateWithoutScenarioDataInput {
  key: String
  subjectId: ID
  subjectType: SubjectType
  metricType: MetricType
  name: String
  data: Json
  assumptions: AssumptionUpdateManyWithoutMetricInput
  timelineEntries: TimelineEntryUpdateManyWithoutMetricInput
  asset: AssetUpdateOneWithoutMetricsInput
  equity: EquityUpdateOneWithoutMetricsInput
  expense: ExpenseUpdateOneWithoutMetricsInput
  person: PersonUpdateOneWithoutMetricsInput
  product: ProductUpdateOneWithoutMetricsInput
  liability: LiabilityUpdateOneWithoutMetricsInput
  funnel: GrowthFunnelUpdateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelUpdateOneWithoutStartMetricInput
  growthFunnel: GrowthFunnelUpdateOneWithoutGrowthStagesInput
  funnelEnded: GrowthFunnelUpdateOneWithoutEndMetricInput
}

input MetricUpdateWithoutTimelineEntriesDataInput {
  key: String
  subjectId: ID
  subjectType: SubjectType
  metricType: MetricType
  name: String
  data: Json
  assumptions: AssumptionUpdateManyWithoutMetricInput
  asset: AssetUpdateOneWithoutMetricsInput
  equity: EquityUpdateOneWithoutMetricsInput
  expense: ExpenseUpdateOneWithoutMetricsInput
  person: PersonUpdateOneWithoutMetricsInput
  product: ProductUpdateOneWithoutMetricsInput
  liability: LiabilityUpdateOneWithoutMetricsInput
  scenario: ScenarioUpdateOneWithoutMetricsInput
  funnel: GrowthFunnelUpdateOneWithoutMetricsInput
  funnelStarted: GrowthFunnelUpdateOneWithoutStartMetricInput
  growthFunnel: GrowthFunnelUpdateOneWithoutGrowthStagesInput
  funnelEnded: GrowthFunnelUpdateOneWithoutEndMetricInput
}

input MetricUpdateWithWhereUniqueWithoutAssetInput {
  where: MetricWhereUniqueInput!
  data: MetricUpdateWithoutAssetDataInput!
}

input MetricUpdateWithWhereUniqueWithoutEquityInput {
  where: MetricWhereUniqueInput!
  data: MetricUpdateWithoutEquityDataInput!
}

input MetricUpdateWithWhereUniqueWithoutExpenseInput {
  where: MetricWhereUniqueInput!
  data: MetricUpdateWithoutExpenseDataInput!
}

input MetricUpdateWithWhereUniqueWithoutFunnelInput {
  where: MetricWhereUniqueInput!
  data: MetricUpdateWithoutFunnelDataInput!
}

input MetricUpdateWithWhereUniqueWithoutGrowthFunnelInput {
  where: MetricWhereUniqueInput!
  data: MetricUpdateWithoutGrowthFunnelDataInput!
}

input MetricUpdateWithWhereUniqueWithoutLiabilityInput {
  where: MetricWhereUniqueInput!
  data: MetricUpdateWithoutLiabilityDataInput!
}

input MetricUpdateWithWhereUniqueWithoutPersonInput {
  where: MetricWhereUniqueInput!
  data: MetricUpdateWithoutPersonDataInput!
}

input MetricUpdateWithWhereUniqueWithoutProductInput {
  where: MetricWhereUniqueInput!
  data: MetricUpdateWithoutProductDataInput!
}

input MetricUpdateWithWhereUniqueWithoutScenarioInput {
  where: MetricWhereUniqueInput!
  data: MetricUpdateWithoutScenarioDataInput!
}

input MetricUpsertWithoutAssumptionsInput {
  update: MetricUpdateWithoutAssumptionsDataInput!
  create: MetricCreateWithoutAssumptionsInput!
}

input MetricUpsertWithoutFunnelEndedInput {
  update: MetricUpdateWithoutFunnelEndedDataInput!
  create: MetricCreateWithoutFunnelEndedInput!
}

input MetricUpsertWithoutFunnelStartedInput {
  update: MetricUpdateWithoutFunnelStartedDataInput!
  create: MetricCreateWithoutFunnelStartedInput!
}

input MetricUpsertWithoutTimelineEntriesInput {
  update: MetricUpdateWithoutTimelineEntriesDataInput!
  create: MetricCreateWithoutTimelineEntriesInput!
}

input MetricUpsertWithWhereUniqueWithoutAssetInput {
  where: MetricWhereUniqueInput!
  update: MetricUpdateWithoutAssetDataInput!
  create: MetricCreateWithoutAssetInput!
}

input MetricUpsertWithWhereUniqueWithoutEquityInput {
  where: MetricWhereUniqueInput!
  update: MetricUpdateWithoutEquityDataInput!
  create: MetricCreateWithoutEquityInput!
}

input MetricUpsertWithWhereUniqueWithoutExpenseInput {
  where: MetricWhereUniqueInput!
  update: MetricUpdateWithoutExpenseDataInput!
  create: MetricCreateWithoutExpenseInput!
}

input MetricUpsertWithWhereUniqueWithoutFunnelInput {
  where: MetricWhereUniqueInput!
  update: MetricUpdateWithoutFunnelDataInput!
  create: MetricCreateWithoutFunnelInput!
}

input MetricUpsertWithWhereUniqueWithoutGrowthFunnelInput {
  where: MetricWhereUniqueInput!
  update: MetricUpdateWithoutGrowthFunnelDataInput!
  create: MetricCreateWithoutGrowthFunnelInput!
}

input MetricUpsertWithWhereUniqueWithoutLiabilityInput {
  where: MetricWhereUniqueInput!
  update: MetricUpdateWithoutLiabilityDataInput!
  create: MetricCreateWithoutLiabilityInput!
}

input MetricUpsertWithWhereUniqueWithoutPersonInput {
  where: MetricWhereUniqueInput!
  update: MetricUpdateWithoutPersonDataInput!
  create: MetricCreateWithoutPersonInput!
}

input MetricUpsertWithWhereUniqueWithoutProductInput {
  where: MetricWhereUniqueInput!
  update: MetricUpdateWithoutProductDataInput!
  create: MetricCreateWithoutProductInput!
}

input MetricUpsertWithWhereUniqueWithoutScenarioInput {
  where: MetricWhereUniqueInput!
  update: MetricUpdateWithoutScenarioDataInput!
  create: MetricCreateWithoutScenarioInput!
}

input MetricWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_lt: String
  key_lte: String
  key_gt: String
  key_gte: String
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  subjectId: ID
  subjectId_not: ID
  subjectId_in: [ID!]
  subjectId_not_in: [ID!]
  subjectId_lt: ID
  subjectId_lte: ID
  subjectId_gt: ID
  subjectId_gte: ID
  subjectId_contains: ID
  subjectId_not_contains: ID
  subjectId_starts_with: ID
  subjectId_not_starts_with: ID
  subjectId_ends_with: ID
  subjectId_not_ends_with: ID
  subjectType: SubjectType
  subjectType_not: SubjectType
  subjectType_in: [SubjectType!]
  subjectType_not_in: [SubjectType!]
  metricType: MetricType
  metricType_not: MetricType
  metricType_in: [MetricType!]
  metricType_not_in: [MetricType!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  currentTimestamp: DateTime
  currentTimestamp_not: DateTime
  currentTimestamp_in: [DateTime!]
  currentTimestamp_not_in: [DateTime!]
  currentTimestamp_lt: DateTime
  currentTimestamp_lte: DateTime
  currentTimestamp_gt: DateTime
  currentTimestamp_gte: DateTime
  assumptions_every: AssumptionWhereInput
  assumptions_some: AssumptionWhereInput
  assumptions_none: AssumptionWhereInput
  timelineEntries_every: TimelineEntryWhereInput
  timelineEntries_some: TimelineEntryWhereInput
  timelineEntries_none: TimelineEntryWhereInput
  asset: AssetWhereInput
  equity: EquityWhereInput
  expense: ExpenseWhereInput
  person: PersonWhereInput
  product: ProductWhereInput
  liability: LiabilityWhereInput
  scenario: ScenarioWhereInput
  funnel: GrowthFunnelWhereInput
  funnelStarted: GrowthFunnelWhereInput
  growthFunnel: GrowthFunnelWhereInput
  funnelEnded: GrowthFunnelWhereInput
  AND: [MetricWhereInput!]
  OR: [MetricWhereInput!]
  NOT: [MetricWhereInput!]
}

input MetricWhereUniqueInput {
  id: ID
  key: String
}

type Mutation {
  createAsset(data: AssetCreateInput!): Asset!
  updateAsset(data: AssetUpdateInput!, where: AssetWhereUniqueInput!): Asset
  updateManyAssets(data: AssetUpdateManyMutationInput!, where: AssetWhereInput): BatchPayload!
  upsertAsset(where: AssetWhereUniqueInput!, create: AssetCreateInput!, update: AssetUpdateInput!): Asset!
  deleteAsset(where: AssetWhereUniqueInput!): Asset
  deleteManyAssets(where: AssetWhereInput): BatchPayload!
  createAssumption(data: AssumptionCreateInput!): Assumption!
  updateAssumption(data: AssumptionUpdateInput!, where: AssumptionWhereUniqueInput!): Assumption
  updateManyAssumptions(data: AssumptionUpdateManyMutationInput!, where: AssumptionWhereInput): BatchPayload!
  upsertAssumption(where: AssumptionWhereUniqueInput!, create: AssumptionCreateInput!, update: AssumptionUpdateInput!): Assumption!
  deleteAssumption(where: AssumptionWhereUniqueInput!): Assumption
  deleteManyAssumptions(where: AssumptionWhereInput): BatchPayload!
  createCategory(data: CategoryCreateInput!): Category!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  createCompany(data: CompanyCreateInput!): Company!
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updateManyCompanies(data: CompanyUpdateManyMutationInput!, where: CompanyWhereInput): BatchPayload!
  upsertCompany(where: CompanyWhereUniqueInput!, create: CompanyCreateInput!, update: CompanyUpdateInput!): Company!
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteManyCompanies(where: CompanyWhereInput): BatchPayload!
  createDepartment(data: DepartmentCreateInput!): Department!
  updateDepartment(data: DepartmentUpdateInput!, where: DepartmentWhereUniqueInput!): Department
  updateManyDepartments(data: DepartmentUpdateManyMutationInput!, where: DepartmentWhereInput): BatchPayload!
  upsertDepartment(where: DepartmentWhereUniqueInput!, create: DepartmentCreateInput!, update: DepartmentUpdateInput!): Department!
  deleteDepartment(where: DepartmentWhereUniqueInput!): Department
  deleteManyDepartments(where: DepartmentWhereInput): BatchPayload!
  createEquity(data: EquityCreateInput!): Equity!
  updateEquity(data: EquityUpdateInput!, where: EquityWhereUniqueInput!): Equity
  updateManyEquities(data: EquityUpdateManyMutationInput!, where: EquityWhereInput): BatchPayload!
  upsertEquity(where: EquityWhereUniqueInput!, create: EquityCreateInput!, update: EquityUpdateInput!): Equity!
  deleteEquity(where: EquityWhereUniqueInput!): Equity
  deleteManyEquities(where: EquityWhereInput): BatchPayload!
  createExpense(data: ExpenseCreateInput!): Expense!
  updateExpense(data: ExpenseUpdateInput!, where: ExpenseWhereUniqueInput!): Expense
  updateManyExpenses(data: ExpenseUpdateManyMutationInput!, where: ExpenseWhereInput): BatchPayload!
  upsertExpense(where: ExpenseWhereUniqueInput!, create: ExpenseCreateInput!, update: ExpenseUpdateInput!): Expense!
  deleteExpense(where: ExpenseWhereUniqueInput!): Expense
  deleteManyExpenses(where: ExpenseWhereInput): BatchPayload!
  createGrowthFunnel(data: GrowthFunnelCreateInput!): GrowthFunnel!
  updateGrowthFunnel(data: GrowthFunnelUpdateInput!, where: GrowthFunnelWhereUniqueInput!): GrowthFunnel
  updateManyGrowthFunnels(data: GrowthFunnelUpdateManyMutationInput!, where: GrowthFunnelWhereInput): BatchPayload!
  upsertGrowthFunnel(where: GrowthFunnelWhereUniqueInput!, create: GrowthFunnelCreateInput!, update: GrowthFunnelUpdateInput!): GrowthFunnel!
  deleteGrowthFunnel(where: GrowthFunnelWhereUniqueInput!): GrowthFunnel
  deleteManyGrowthFunnels(where: GrowthFunnelWhereInput): BatchPayload!
  createIntegration(data: IntegrationCreateInput!): Integration!
  updateIntegration(data: IntegrationUpdateInput!, where: IntegrationWhereUniqueInput!): Integration
  updateManyIntegrations(data: IntegrationUpdateManyMutationInput!, where: IntegrationWhereInput): BatchPayload!
  upsertIntegration(where: IntegrationWhereUniqueInput!, create: IntegrationCreateInput!, update: IntegrationUpdateInput!): Integration!
  deleteIntegration(where: IntegrationWhereUniqueInput!): Integration
  deleteManyIntegrations(where: IntegrationWhereInput): BatchPayload!
  createLiability(data: LiabilityCreateInput!): Liability!
  updateLiability(data: LiabilityUpdateInput!, where: LiabilityWhereUniqueInput!): Liability
  updateManyLiabilities(data: LiabilityUpdateManyMutationInput!, where: LiabilityWhereInput): BatchPayload!
  upsertLiability(where: LiabilityWhereUniqueInput!, create: LiabilityCreateInput!, update: LiabilityUpdateInput!): Liability!
  deleteLiability(where: LiabilityWhereUniqueInput!): Liability
  deleteManyLiabilities(where: LiabilityWhereInput): BatchPayload!
  createMetric(data: MetricCreateInput!): Metric!
  updateMetric(data: MetricUpdateInput!, where: MetricWhereUniqueInput!): Metric
  updateManyMetrics(data: MetricUpdateManyMutationInput!, where: MetricWhereInput): BatchPayload!
  upsertMetric(where: MetricWhereUniqueInput!, create: MetricCreateInput!, update: MetricUpdateInput!): Metric!
  deleteMetric(where: MetricWhereUniqueInput!): Metric
  deleteManyMetrics(where: MetricWhereInput): BatchPayload!
  createPaymentCard(data: PaymentCardCreateInput!): PaymentCard!
  updatePaymentCard(data: PaymentCardUpdateInput!, where: PaymentCardWhereUniqueInput!): PaymentCard
  updateManyPaymentCards(data: PaymentCardUpdateManyMutationInput!, where: PaymentCardWhereInput): BatchPayload!
  upsertPaymentCard(where: PaymentCardWhereUniqueInput!, create: PaymentCardCreateInput!, update: PaymentCardUpdateInput!): PaymentCard!
  deletePaymentCard(where: PaymentCardWhereUniqueInput!): PaymentCard
  deleteManyPaymentCards(where: PaymentCardWhereInput): BatchPayload!
  createPaymentMethod(data: PaymentMethodCreateInput!): PaymentMethod!
  updatePaymentMethod(data: PaymentMethodUpdateInput!, where: PaymentMethodWhereUniqueInput!): PaymentMethod
  updateManyPaymentMethods(data: PaymentMethodUpdateManyMutationInput!, where: PaymentMethodWhereInput): BatchPayload!
  upsertPaymentMethod(where: PaymentMethodWhereUniqueInput!, create: PaymentMethodCreateInput!, update: PaymentMethodUpdateInput!): PaymentMethod!
  deletePaymentMethod(where: PaymentMethodWhereUniqueInput!): PaymentMethod
  deleteManyPaymentMethods(where: PaymentMethodWhereInput): BatchPayload!
  createPerson(data: PersonCreateInput!): Person!
  updatePerson(data: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person
  updateManyPersons(data: PersonUpdateManyMutationInput!, where: PersonWhereInput): BatchPayload!
  upsertPerson(where: PersonWhereUniqueInput!, create: PersonCreateInput!, update: PersonUpdateInput!): Person!
  deletePerson(where: PersonWhereUniqueInput!): Person
  deleteManyPersons(where: PersonWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createRegistration(data: RegistrationCreateInput!): Registration!
  updateRegistration(data: RegistrationUpdateInput!, where: RegistrationWhereUniqueInput!): Registration
  updateManyRegistrations(data: RegistrationUpdateManyMutationInput!, where: RegistrationWhereInput): BatchPayload!
  upsertRegistration(where: RegistrationWhereUniqueInput!, create: RegistrationCreateInput!, update: RegistrationUpdateInput!): Registration!
  deleteRegistration(where: RegistrationWhereUniqueInput!): Registration
  deleteManyRegistrations(where: RegistrationWhereInput): BatchPayload!
  createRevenueStream(data: RevenueStreamCreateInput!): RevenueStream!
  updateRevenueStream(data: RevenueStreamUpdateInput!, where: RevenueStreamWhereUniqueInput!): RevenueStream
  updateManyRevenueStreams(data: RevenueStreamUpdateManyMutationInput!, where: RevenueStreamWhereInput): BatchPayload!
  upsertRevenueStream(where: RevenueStreamWhereUniqueInput!, create: RevenueStreamCreateInput!, update: RevenueStreamUpdateInput!): RevenueStream!
  deleteRevenueStream(where: RevenueStreamWhereUniqueInput!): RevenueStream
  deleteManyRevenueStreams(where: RevenueStreamWhereInput): BatchPayload!
  createScenario(data: ScenarioCreateInput!): Scenario!
  updateScenario(data: ScenarioUpdateInput!, where: ScenarioWhereUniqueInput!): Scenario
  updateManyScenarios(data: ScenarioUpdateManyMutationInput!, where: ScenarioWhereInput): BatchPayload!
  upsertScenario(where: ScenarioWhereUniqueInput!, create: ScenarioCreateInput!, update: ScenarioUpdateInput!): Scenario!
  deleteScenario(where: ScenarioWhereUniqueInput!): Scenario
  deleteManyScenarios(where: ScenarioWhereInput): BatchPayload!
  createTag(data: TagCreateInput!): Tag!
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateManyTags(data: TagUpdateManyMutationInput!, where: TagWhereInput): BatchPayload!
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteManyTags(where: TagWhereInput): BatchPayload!
  createTimeline(data: TimelineCreateInput!): Timeline!
  updateTimeline(data: TimelineUpdateInput!, where: TimelineWhereUniqueInput!): Timeline
  updateManyTimelines(data: TimelineUpdateManyMutationInput!, where: TimelineWhereInput): BatchPayload!
  upsertTimeline(where: TimelineWhereUniqueInput!, create: TimelineCreateInput!, update: TimelineUpdateInput!): Timeline!
  deleteTimeline(where: TimelineWhereUniqueInput!): Timeline
  deleteManyTimelines(where: TimelineWhereInput): BatchPayload!
  createTimelineEntry(data: TimelineEntryCreateInput!): TimelineEntry!
  updateTimelineEntry(data: TimelineEntryUpdateInput!, where: TimelineEntryWhereUniqueInput!): TimelineEntry
  updateManyTimelineEntries(data: TimelineEntryUpdateManyMutationInput!, where: TimelineEntryWhereInput): BatchPayload!
  upsertTimelineEntry(where: TimelineEntryWhereUniqueInput!, create: TimelineEntryCreateInput!, update: TimelineEntryUpdateInput!): TimelineEntry!
  deleteTimelineEntry(where: TimelineEntryWhereUniqueInput!): TimelineEntry
  deleteManyTimelineEntries(where: TimelineEntryWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PaymentCard {
  id: ID!
  customerId: String!
  brand: String!
  country: String!
  expYear: Int!
  expMonth: Int!
  ccLast4: String!
  isDefault: Boolean!
}

type PaymentCardConnection {
  pageInfo: PageInfo!
  edges: [PaymentCardEdge]!
  aggregate: AggregatePaymentCard!
}

input PaymentCardCreateInput {
  id: ID
  customerId: String!
  brand: String!
  country: String!
  expYear: Int!
  expMonth: Int!
  ccLast4: String!
  isDefault: Boolean!
}

type PaymentCardEdge {
  node: PaymentCard!
  cursor: String!
}

enum PaymentCardOrderByInput {
  id_ASC
  id_DESC
  customerId_ASC
  customerId_DESC
  brand_ASC
  brand_DESC
  country_ASC
  country_DESC
  expYear_ASC
  expYear_DESC
  expMonth_ASC
  expMonth_DESC
  ccLast4_ASC
  ccLast4_DESC
  isDefault_ASC
  isDefault_DESC
}

type PaymentCardPreviousValues {
  id: ID!
  customerId: String!
  brand: String!
  country: String!
  expYear: Int!
  expMonth: Int!
  ccLast4: String!
  isDefault: Boolean!
}

type PaymentCardSubscriptionPayload {
  mutation: MutationType!
  node: PaymentCard
  updatedFields: [String!]
  previousValues: PaymentCardPreviousValues
}

input PaymentCardSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PaymentCardWhereInput
  AND: [PaymentCardSubscriptionWhereInput!]
  OR: [PaymentCardSubscriptionWhereInput!]
  NOT: [PaymentCardSubscriptionWhereInput!]
}

input PaymentCardUpdateInput {
  customerId: String
  brand: String
  country: String
  expYear: Int
  expMonth: Int
  ccLast4: String
  isDefault: Boolean
}

input PaymentCardUpdateManyMutationInput {
  customerId: String
  brand: String
  country: String
  expYear: Int
  expMonth: Int
  ccLast4: String
  isDefault: Boolean
}

input PaymentCardWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  customerId: String
  customerId_not: String
  customerId_in: [String!]
  customerId_not_in: [String!]
  customerId_lt: String
  customerId_lte: String
  customerId_gt: String
  customerId_gte: String
  customerId_contains: String
  customerId_not_contains: String
  customerId_starts_with: String
  customerId_not_starts_with: String
  customerId_ends_with: String
  customerId_not_ends_with: String
  brand: String
  brand_not: String
  brand_in: [String!]
  brand_not_in: [String!]
  brand_lt: String
  brand_lte: String
  brand_gt: String
  brand_gte: String
  brand_contains: String
  brand_not_contains: String
  brand_starts_with: String
  brand_not_starts_with: String
  brand_ends_with: String
  brand_not_ends_with: String
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  expYear: Int
  expYear_not: Int
  expYear_in: [Int!]
  expYear_not_in: [Int!]
  expYear_lt: Int
  expYear_lte: Int
  expYear_gt: Int
  expYear_gte: Int
  expMonth: Int
  expMonth_not: Int
  expMonth_in: [Int!]
  expMonth_not_in: [Int!]
  expMonth_lt: Int
  expMonth_lte: Int
  expMonth_gt: Int
  expMonth_gte: Int
  ccLast4: String
  ccLast4_not: String
  ccLast4_in: [String!]
  ccLast4_not_in: [String!]
  ccLast4_lt: String
  ccLast4_lte: String
  ccLast4_gt: String
  ccLast4_gte: String
  ccLast4_contains: String
  ccLast4_not_contains: String
  ccLast4_starts_with: String
  ccLast4_not_starts_with: String
  ccLast4_ends_with: String
  ccLast4_not_ends_with: String
  isDefault: Boolean
  isDefault_not: Boolean
  AND: [PaymentCardWhereInput!]
  OR: [PaymentCardWhereInput!]
  NOT: [PaymentCardWhereInput!]
}

input PaymentCardWhereUniqueInput {
  id: ID
}

type PaymentMethod {
  id: ID!
  createdAt: DateTime!
  user: User!
  zip: String!
  country: String
  stripeId: String!
  cardId: String
  ccLast4: String!
}

type PaymentMethodConnection {
  pageInfo: PageInfo!
  edges: [PaymentMethodEdge]!
  aggregate: AggregatePaymentMethod!
}

input PaymentMethodCreateInput {
  id: ID
  user: UserCreateOneWithoutPaymentMethodsInput!
  zip: String!
  country: String
  stripeId: String!
  cardId: String
  ccLast4: String!
}

input PaymentMethodCreateManyWithoutUserInput {
  create: [PaymentMethodCreateWithoutUserInput!]
  connect: [PaymentMethodWhereUniqueInput!]
}

input PaymentMethodCreateWithoutUserInput {
  id: ID
  zip: String!
  country: String
  stripeId: String!
  cardId: String
  ccLast4: String!
}

type PaymentMethodEdge {
  node: PaymentMethod!
  cursor: String!
}

enum PaymentMethodOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  zip_ASC
  zip_DESC
  country_ASC
  country_DESC
  stripeId_ASC
  stripeId_DESC
  cardId_ASC
  cardId_DESC
  ccLast4_ASC
  ccLast4_DESC
}

type PaymentMethodPreviousValues {
  id: ID!
  createdAt: DateTime!
  zip: String!
  country: String
  stripeId: String!
  cardId: String
  ccLast4: String!
}

input PaymentMethodScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  zip: String
  zip_not: String
  zip_in: [String!]
  zip_not_in: [String!]
  zip_lt: String
  zip_lte: String
  zip_gt: String
  zip_gte: String
  zip_contains: String
  zip_not_contains: String
  zip_starts_with: String
  zip_not_starts_with: String
  zip_ends_with: String
  zip_not_ends_with: String
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  stripeId: String
  stripeId_not: String
  stripeId_in: [String!]
  stripeId_not_in: [String!]
  stripeId_lt: String
  stripeId_lte: String
  stripeId_gt: String
  stripeId_gte: String
  stripeId_contains: String
  stripeId_not_contains: String
  stripeId_starts_with: String
  stripeId_not_starts_with: String
  stripeId_ends_with: String
  stripeId_not_ends_with: String
  cardId: String
  cardId_not: String
  cardId_in: [String!]
  cardId_not_in: [String!]
  cardId_lt: String
  cardId_lte: String
  cardId_gt: String
  cardId_gte: String
  cardId_contains: String
  cardId_not_contains: String
  cardId_starts_with: String
  cardId_not_starts_with: String
  cardId_ends_with: String
  cardId_not_ends_with: String
  ccLast4: String
  ccLast4_not: String
  ccLast4_in: [String!]
  ccLast4_not_in: [String!]
  ccLast4_lt: String
  ccLast4_lte: String
  ccLast4_gt: String
  ccLast4_gte: String
  ccLast4_contains: String
  ccLast4_not_contains: String
  ccLast4_starts_with: String
  ccLast4_not_starts_with: String
  ccLast4_ends_with: String
  ccLast4_not_ends_with: String
  AND: [PaymentMethodScalarWhereInput!]
  OR: [PaymentMethodScalarWhereInput!]
  NOT: [PaymentMethodScalarWhereInput!]
}

type PaymentMethodSubscriptionPayload {
  mutation: MutationType!
  node: PaymentMethod
  updatedFields: [String!]
  previousValues: PaymentMethodPreviousValues
}

input PaymentMethodSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PaymentMethodWhereInput
  AND: [PaymentMethodSubscriptionWhereInput!]
  OR: [PaymentMethodSubscriptionWhereInput!]
  NOT: [PaymentMethodSubscriptionWhereInput!]
}

input PaymentMethodUpdateInput {
  user: UserUpdateOneRequiredWithoutPaymentMethodsInput
  zip: String
  country: String
  stripeId: String
  cardId: String
  ccLast4: String
}

input PaymentMethodUpdateManyDataInput {
  zip: String
  country: String
  stripeId: String
  cardId: String
  ccLast4: String
}

input PaymentMethodUpdateManyMutationInput {
  zip: String
  country: String
  stripeId: String
  cardId: String
  ccLast4: String
}

input PaymentMethodUpdateManyWithoutUserInput {
  create: [PaymentMethodCreateWithoutUserInput!]
  delete: [PaymentMethodWhereUniqueInput!]
  connect: [PaymentMethodWhereUniqueInput!]
  set: [PaymentMethodWhereUniqueInput!]
  disconnect: [PaymentMethodWhereUniqueInput!]
  update: [PaymentMethodUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [PaymentMethodUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [PaymentMethodScalarWhereInput!]
  updateMany: [PaymentMethodUpdateManyWithWhereNestedInput!]
}

input PaymentMethodUpdateManyWithWhereNestedInput {
  where: PaymentMethodScalarWhereInput!
  data: PaymentMethodUpdateManyDataInput!
}

input PaymentMethodUpdateWithoutUserDataInput {
  zip: String
  country: String
  stripeId: String
  cardId: String
  ccLast4: String
}

input PaymentMethodUpdateWithWhereUniqueWithoutUserInput {
  where: PaymentMethodWhereUniqueInput!
  data: PaymentMethodUpdateWithoutUserDataInput!
}

input PaymentMethodUpsertWithWhereUniqueWithoutUserInput {
  where: PaymentMethodWhereUniqueInput!
  update: PaymentMethodUpdateWithoutUserDataInput!
  create: PaymentMethodCreateWithoutUserInput!
}

input PaymentMethodWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  user: UserWhereInput
  zip: String
  zip_not: String
  zip_in: [String!]
  zip_not_in: [String!]
  zip_lt: String
  zip_lte: String
  zip_gt: String
  zip_gte: String
  zip_contains: String
  zip_not_contains: String
  zip_starts_with: String
  zip_not_starts_with: String
  zip_ends_with: String
  zip_not_ends_with: String
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  stripeId: String
  stripeId_not: String
  stripeId_in: [String!]
  stripeId_not_in: [String!]
  stripeId_lt: String
  stripeId_lte: String
  stripeId_gt: String
  stripeId_gte: String
  stripeId_contains: String
  stripeId_not_contains: String
  stripeId_starts_with: String
  stripeId_not_starts_with: String
  stripeId_ends_with: String
  stripeId_not_ends_with: String
  cardId: String
  cardId_not: String
  cardId_in: [String!]
  cardId_not_in: [String!]
  cardId_lt: String
  cardId_lte: String
  cardId_gt: String
  cardId_gte: String
  cardId_contains: String
  cardId_not_contains: String
  cardId_starts_with: String
  cardId_not_starts_with: String
  cardId_ends_with: String
  cardId_not_ends_with: String
  ccLast4: String
  ccLast4_not: String
  ccLast4_in: [String!]
  ccLast4_not_in: [String!]
  ccLast4_lt: String
  ccLast4_lte: String
  ccLast4_gt: String
  ccLast4_gte: String
  ccLast4_contains: String
  ccLast4_not_contains: String
  ccLast4_starts_with: String
  ccLast4_not_starts_with: String
  ccLast4_ends_with: String
  ccLast4_not_ends_with: String
  AND: [PaymentMethodWhereInput!]
  OR: [PaymentMethodWhereInput!]
  NOT: [PaymentMethodWhereInput!]
}

input PaymentMethodWhereUniqueInput {
  id: ID
  stripeId: String
}

type Person {
  id: ID!
  createdAt: DateTime!
  department: Department!
  category: Category
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  name: String!
  startDate: DateTime!
  endDate: DateTime
  data: Json!
  metrics(where: MetricWhereInput, orderBy: MetricOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Metric!]
}

type PersonConnection {
  pageInfo: PageInfo!
  edges: [PersonEdge]!
  aggregate: AggregatePerson!
}

input PersonCreateInput {
  id: ID
  department: DepartmentCreateOneWithoutPeopleInput!
  category: CategoryCreateOneWithoutPeopleInput
  tags: TagCreateManyWithoutPeopleInput
  name: String!
  startDate: DateTime!
  endDate: DateTime
  data: Json!
  metrics: MetricCreateManyWithoutPersonInput
}

input PersonCreateManyWithoutCategoryInput {
  create: [PersonCreateWithoutCategoryInput!]
  connect: [PersonWhereUniqueInput!]
}

input PersonCreateManyWithoutDepartmentInput {
  create: [PersonCreateWithoutDepartmentInput!]
  connect: [PersonWhereUniqueInput!]
}

input PersonCreateManyWithoutTagsInput {
  create: [PersonCreateWithoutTagsInput!]
  connect: [PersonWhereUniqueInput!]
}

input PersonCreateOneWithoutMetricsInput {
  create: PersonCreateWithoutMetricsInput
  connect: PersonWhereUniqueInput
}

input PersonCreateWithoutCategoryInput {
  id: ID
  department: DepartmentCreateOneWithoutPeopleInput!
  tags: TagCreateManyWithoutPeopleInput
  name: String!
  startDate: DateTime!
  endDate: DateTime
  data: Json!
  metrics: MetricCreateManyWithoutPersonInput
}

input PersonCreateWithoutDepartmentInput {
  id: ID
  category: CategoryCreateOneWithoutPeopleInput
  tags: TagCreateManyWithoutPeopleInput
  name: String!
  startDate: DateTime!
  endDate: DateTime
  data: Json!
  metrics: MetricCreateManyWithoutPersonInput
}

input PersonCreateWithoutMetricsInput {
  id: ID
  department: DepartmentCreateOneWithoutPeopleInput!
  category: CategoryCreateOneWithoutPeopleInput
  tags: TagCreateManyWithoutPeopleInput
  name: String!
  startDate: DateTime!
  endDate: DateTime
  data: Json!
}

input PersonCreateWithoutTagsInput {
  id: ID
  department: DepartmentCreateOneWithoutPeopleInput!
  category: CategoryCreateOneWithoutPeopleInput
  name: String!
  startDate: DateTime!
  endDate: DateTime
  data: Json!
  metrics: MetricCreateManyWithoutPersonInput
}

type PersonEdge {
  node: Person!
  cursor: String!
}

enum PersonOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  data_ASC
  data_DESC
}

type PersonPreviousValues {
  id: ID!
  createdAt: DateTime!
  name: String!
  startDate: DateTime!
  endDate: DateTime
  data: Json!
}

input PersonScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  endDate: DateTime
  endDate_not: DateTime
  endDate_in: [DateTime!]
  endDate_not_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  AND: [PersonScalarWhereInput!]
  OR: [PersonScalarWhereInput!]
  NOT: [PersonScalarWhereInput!]
}

type PersonSubscriptionPayload {
  mutation: MutationType!
  node: Person
  updatedFields: [String!]
  previousValues: PersonPreviousValues
}

input PersonSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PersonWhereInput
  AND: [PersonSubscriptionWhereInput!]
  OR: [PersonSubscriptionWhereInput!]
  NOT: [PersonSubscriptionWhereInput!]
}

input PersonUpdateInput {
  department: DepartmentUpdateOneRequiredWithoutPeopleInput
  category: CategoryUpdateOneWithoutPeopleInput
  tags: TagUpdateManyWithoutPeopleInput
  name: String
  startDate: DateTime
  endDate: DateTime
  data: Json
  metrics: MetricUpdateManyWithoutPersonInput
}

input PersonUpdateManyDataInput {
  name: String
  startDate: DateTime
  endDate: DateTime
  data: Json
}

input PersonUpdateManyMutationInput {
  name: String
  startDate: DateTime
  endDate: DateTime
  data: Json
}

input PersonUpdateManyWithoutCategoryInput {
  create: [PersonCreateWithoutCategoryInput!]
  delete: [PersonWhereUniqueInput!]
  connect: [PersonWhereUniqueInput!]
  set: [PersonWhereUniqueInput!]
  disconnect: [PersonWhereUniqueInput!]
  update: [PersonUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [PersonUpsertWithWhereUniqueWithoutCategoryInput!]
  deleteMany: [PersonScalarWhereInput!]
  updateMany: [PersonUpdateManyWithWhereNestedInput!]
}

input PersonUpdateManyWithoutDepartmentInput {
  create: [PersonCreateWithoutDepartmentInput!]
  delete: [PersonWhereUniqueInput!]
  connect: [PersonWhereUniqueInput!]
  set: [PersonWhereUniqueInput!]
  disconnect: [PersonWhereUniqueInput!]
  update: [PersonUpdateWithWhereUniqueWithoutDepartmentInput!]
  upsert: [PersonUpsertWithWhereUniqueWithoutDepartmentInput!]
  deleteMany: [PersonScalarWhereInput!]
  updateMany: [PersonUpdateManyWithWhereNestedInput!]
}

input PersonUpdateManyWithoutTagsInput {
  create: [PersonCreateWithoutTagsInput!]
  delete: [PersonWhereUniqueInput!]
  connect: [PersonWhereUniqueInput!]
  set: [PersonWhereUniqueInput!]
  disconnect: [PersonWhereUniqueInput!]
  update: [PersonUpdateWithWhereUniqueWithoutTagsInput!]
  upsert: [PersonUpsertWithWhereUniqueWithoutTagsInput!]
  deleteMany: [PersonScalarWhereInput!]
  updateMany: [PersonUpdateManyWithWhereNestedInput!]
}

input PersonUpdateManyWithWhereNestedInput {
  where: PersonScalarWhereInput!
  data: PersonUpdateManyDataInput!
}

input PersonUpdateOneWithoutMetricsInput {
  create: PersonCreateWithoutMetricsInput
  update: PersonUpdateWithoutMetricsDataInput
  upsert: PersonUpsertWithoutMetricsInput
  delete: Boolean
  disconnect: Boolean
  connect: PersonWhereUniqueInput
}

input PersonUpdateWithoutCategoryDataInput {
  department: DepartmentUpdateOneRequiredWithoutPeopleInput
  tags: TagUpdateManyWithoutPeopleInput
  name: String
  startDate: DateTime
  endDate: DateTime
  data: Json
  metrics: MetricUpdateManyWithoutPersonInput
}

input PersonUpdateWithoutDepartmentDataInput {
  category: CategoryUpdateOneWithoutPeopleInput
  tags: TagUpdateManyWithoutPeopleInput
  name: String
  startDate: DateTime
  endDate: DateTime
  data: Json
  metrics: MetricUpdateManyWithoutPersonInput
}

input PersonUpdateWithoutMetricsDataInput {
  department: DepartmentUpdateOneRequiredWithoutPeopleInput
  category: CategoryUpdateOneWithoutPeopleInput
  tags: TagUpdateManyWithoutPeopleInput
  name: String
  startDate: DateTime
  endDate: DateTime
  data: Json
}

input PersonUpdateWithoutTagsDataInput {
  department: DepartmentUpdateOneRequiredWithoutPeopleInput
  category: CategoryUpdateOneWithoutPeopleInput
  name: String
  startDate: DateTime
  endDate: DateTime
  data: Json
  metrics: MetricUpdateManyWithoutPersonInput
}

input PersonUpdateWithWhereUniqueWithoutCategoryInput {
  where: PersonWhereUniqueInput!
  data: PersonUpdateWithoutCategoryDataInput!
}

input PersonUpdateWithWhereUniqueWithoutDepartmentInput {
  where: PersonWhereUniqueInput!
  data: PersonUpdateWithoutDepartmentDataInput!
}

input PersonUpdateWithWhereUniqueWithoutTagsInput {
  where: PersonWhereUniqueInput!
  data: PersonUpdateWithoutTagsDataInput!
}

input PersonUpsertWithoutMetricsInput {
  update: PersonUpdateWithoutMetricsDataInput!
  create: PersonCreateWithoutMetricsInput!
}

input PersonUpsertWithWhereUniqueWithoutCategoryInput {
  where: PersonWhereUniqueInput!
  update: PersonUpdateWithoutCategoryDataInput!
  create: PersonCreateWithoutCategoryInput!
}

input PersonUpsertWithWhereUniqueWithoutDepartmentInput {
  where: PersonWhereUniqueInput!
  update: PersonUpdateWithoutDepartmentDataInput!
  create: PersonCreateWithoutDepartmentInput!
}

input PersonUpsertWithWhereUniqueWithoutTagsInput {
  where: PersonWhereUniqueInput!
  update: PersonUpdateWithoutTagsDataInput!
  create: PersonCreateWithoutTagsInput!
}

input PersonWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  department: DepartmentWhereInput
  category: CategoryWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  endDate: DateTime
  endDate_not: DateTime
  endDate_in: [DateTime!]
  endDate_not_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  metrics_every: MetricWhereInput
  metrics_some: MetricWhereInput
  metrics_none: MetricWhereInput
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
}

input PersonWhereUniqueInput {
  id: ID
}

type Product {
  id: ID!
  createdAt: DateTime!
  revenueStream: RevenueStream!
  category: Category
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  revenueModel: String!
  name: String!
  data: Json!
  metrics(where: MetricWhereInput, orderBy: MetricOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Metric!]
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  id: ID
  revenueStream: RevenueStreamCreateOneWithoutProductsInput!
  category: CategoryCreateOneWithoutProductsInput
  tags: TagCreateManyWithoutProductsInput
  revenueModel: String!
  name: String!
  data: Json!
  metrics: MetricCreateManyWithoutProductInput
}

input ProductCreateManyWithoutCategoryInput {
  create: [ProductCreateWithoutCategoryInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutRevenueStreamInput {
  create: [ProductCreateWithoutRevenueStreamInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutTagsInput {
  create: [ProductCreateWithoutTagsInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateOneWithoutMetricsInput {
  create: ProductCreateWithoutMetricsInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutCategoryInput {
  id: ID
  revenueStream: RevenueStreamCreateOneWithoutProductsInput!
  tags: TagCreateManyWithoutProductsInput
  revenueModel: String!
  name: String!
  data: Json!
  metrics: MetricCreateManyWithoutProductInput
}

input ProductCreateWithoutMetricsInput {
  id: ID
  revenueStream: RevenueStreamCreateOneWithoutProductsInput!
  category: CategoryCreateOneWithoutProductsInput
  tags: TagCreateManyWithoutProductsInput
  revenueModel: String!
  name: String!
  data: Json!
}

input ProductCreateWithoutRevenueStreamInput {
  id: ID
  category: CategoryCreateOneWithoutProductsInput
  tags: TagCreateManyWithoutProductsInput
  revenueModel: String!
  name: String!
  data: Json!
  metrics: MetricCreateManyWithoutProductInput
}

input ProductCreateWithoutTagsInput {
  id: ID
  revenueStream: RevenueStreamCreateOneWithoutProductsInput!
  category: CategoryCreateOneWithoutProductsInput
  revenueModel: String!
  name: String!
  data: Json!
  metrics: MetricCreateManyWithoutProductInput
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  revenueModel_ASC
  revenueModel_DESC
  name_ASC
  name_DESC
  data_ASC
  data_DESC
}

type ProductPreviousValues {
  id: ID!
  createdAt: DateTime!
  revenueModel: String!
  name: String!
  data: Json!
}

input ProductScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  revenueModel: String
  revenueModel_not: String
  revenueModel_in: [String!]
  revenueModel_not_in: [String!]
  revenueModel_lt: String
  revenueModel_lte: String
  revenueModel_gt: String
  revenueModel_gte: String
  revenueModel_contains: String
  revenueModel_not_contains: String
  revenueModel_starts_with: String
  revenueModel_not_starts_with: String
  revenueModel_ends_with: String
  revenueModel_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateInput {
  revenueStream: RevenueStreamUpdateOneRequiredWithoutProductsInput
  category: CategoryUpdateOneWithoutProductsInput
  tags: TagUpdateManyWithoutProductsInput
  revenueModel: String
  name: String
  data: Json
  metrics: MetricUpdateManyWithoutProductInput
}

input ProductUpdateManyDataInput {
  revenueModel: String
  name: String
  data: Json
}

input ProductUpdateManyMutationInput {
  revenueModel: String
  name: String
  data: Json
}

input ProductUpdateManyWithoutCategoryInput {
  create: [ProductCreateWithoutCategoryInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCategoryInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithoutRevenueStreamInput {
  create: [ProductCreateWithoutRevenueStreamInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutRevenueStreamInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutRevenueStreamInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithoutTagsInput {
  create: [ProductCreateWithoutTagsInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutTagsInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutTagsInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateOneWithoutMetricsInput {
  create: ProductCreateWithoutMetricsInput
  update: ProductUpdateWithoutMetricsDataInput
  upsert: ProductUpsertWithoutMetricsInput
  delete: Boolean
  disconnect: Boolean
  connect: ProductWhereUniqueInput
}

input ProductUpdateWithoutCategoryDataInput {
  revenueStream: RevenueStreamUpdateOneRequiredWithoutProductsInput
  tags: TagUpdateManyWithoutProductsInput
  revenueModel: String
  name: String
  data: Json
  metrics: MetricUpdateManyWithoutProductInput
}

input ProductUpdateWithoutMetricsDataInput {
  revenueStream: RevenueStreamUpdateOneRequiredWithoutProductsInput
  category: CategoryUpdateOneWithoutProductsInput
  tags: TagUpdateManyWithoutProductsInput
  revenueModel: String
  name: String
  data: Json
}

input ProductUpdateWithoutRevenueStreamDataInput {
  category: CategoryUpdateOneWithoutProductsInput
  tags: TagUpdateManyWithoutProductsInput
  revenueModel: String
  name: String
  data: Json
  metrics: MetricUpdateManyWithoutProductInput
}

input ProductUpdateWithoutTagsDataInput {
  revenueStream: RevenueStreamUpdateOneRequiredWithoutProductsInput
  category: CategoryUpdateOneWithoutProductsInput
  revenueModel: String
  name: String
  data: Json
  metrics: MetricUpdateManyWithoutProductInput
}

input ProductUpdateWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutCategoryDataInput!
}

input ProductUpdateWithWhereUniqueWithoutRevenueStreamInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutRevenueStreamDataInput!
}

input ProductUpdateWithWhereUniqueWithoutTagsInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutTagsDataInput!
}

input ProductUpsertWithoutMetricsInput {
  update: ProductUpdateWithoutMetricsDataInput!
  create: ProductCreateWithoutMetricsInput!
}

input ProductUpsertWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutCategoryDataInput!
  create: ProductCreateWithoutCategoryInput!
}

input ProductUpsertWithWhereUniqueWithoutRevenueStreamInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutRevenueStreamDataInput!
  create: ProductCreateWithoutRevenueStreamInput!
}

input ProductUpsertWithWhereUniqueWithoutTagsInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutTagsDataInput!
  create: ProductCreateWithoutTagsInput!
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  revenueStream: RevenueStreamWhereInput
  category: CategoryWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  revenueModel: String
  revenueModel_not: String
  revenueModel_in: [String!]
  revenueModel_not_in: [String!]
  revenueModel_lt: String
  revenueModel_lte: String
  revenueModel_gt: String
  revenueModel_gte: String
  revenueModel_contains: String
  revenueModel_not_contains: String
  revenueModel_starts_with: String
  revenueModel_not_starts_with: String
  revenueModel_ends_with: String
  revenueModel_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  metrics_every: MetricWhereInput
  metrics_some: MetricWhereInput
  metrics_none: MetricWhereInput
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  asset(where: AssetWhereUniqueInput!): Asset
  assets(where: AssetWhereInput, orderBy: AssetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Asset]!
  assetsConnection(where: AssetWhereInput, orderBy: AssetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AssetConnection!
  assumption(where: AssumptionWhereUniqueInput!): Assumption
  assumptions(where: AssumptionWhereInput, orderBy: AssumptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Assumption]!
  assumptionsConnection(where: AssumptionWhereInput, orderBy: AssumptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AssumptionConnection!
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  company(where: CompanyWhereUniqueInput!): Company
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company]!
  companiesConnection(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyConnection!
  department(where: DepartmentWhereUniqueInput!): Department
  departments(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Department]!
  departmentsConnection(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DepartmentConnection!
  equity(where: EquityWhereUniqueInput!): Equity
  equities(where: EquityWhereInput, orderBy: EquityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Equity]!
  equitiesConnection(where: EquityWhereInput, orderBy: EquityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EquityConnection!
  expense(where: ExpenseWhereUniqueInput!): Expense
  expenses(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense]!
  expensesConnection(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExpenseConnection!
  growthFunnel(where: GrowthFunnelWhereUniqueInput!): GrowthFunnel
  growthFunnels(where: GrowthFunnelWhereInput, orderBy: GrowthFunnelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GrowthFunnel]!
  growthFunnelsConnection(where: GrowthFunnelWhereInput, orderBy: GrowthFunnelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GrowthFunnelConnection!
  integration(where: IntegrationWhereUniqueInput!): Integration
  integrations(where: IntegrationWhereInput, orderBy: IntegrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Integration]!
  integrationsConnection(where: IntegrationWhereInput, orderBy: IntegrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IntegrationConnection!
  liability(where: LiabilityWhereUniqueInput!): Liability
  liabilities(where: LiabilityWhereInput, orderBy: LiabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Liability]!
  liabilitiesConnection(where: LiabilityWhereInput, orderBy: LiabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LiabilityConnection!
  metric(where: MetricWhereUniqueInput!): Metric
  metrics(where: MetricWhereInput, orderBy: MetricOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Metric]!
  metricsConnection(where: MetricWhereInput, orderBy: MetricOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MetricConnection!
  paymentCard(where: PaymentCardWhereUniqueInput!): PaymentCard
  paymentCards(where: PaymentCardWhereInput, orderBy: PaymentCardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PaymentCard]!
  paymentCardsConnection(where: PaymentCardWhereInput, orderBy: PaymentCardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PaymentCardConnection!
  paymentMethod(where: PaymentMethodWhereUniqueInput!): PaymentMethod
  paymentMethods(where: PaymentMethodWhereInput, orderBy: PaymentMethodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PaymentMethod]!
  paymentMethodsConnection(where: PaymentMethodWhereInput, orderBy: PaymentMethodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PaymentMethodConnection!
  person(where: PersonWhereUniqueInput!): Person
  persons(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person]!
  personsConnection(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PersonConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  registration(where: RegistrationWhereUniqueInput!): Registration
  registrations(where: RegistrationWhereInput, orderBy: RegistrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Registration]!
  registrationsConnection(where: RegistrationWhereInput, orderBy: RegistrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RegistrationConnection!
  revenueStream(where: RevenueStreamWhereUniqueInput!): RevenueStream
  revenueStreams(where: RevenueStreamWhereInput, orderBy: RevenueStreamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RevenueStream]!
  revenueStreamsConnection(where: RevenueStreamWhereInput, orderBy: RevenueStreamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RevenueStreamConnection!
  scenario(where: ScenarioWhereUniqueInput!): Scenario
  scenarios(where: ScenarioWhereInput, orderBy: ScenarioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Scenario]!
  scenariosConnection(where: ScenarioWhereInput, orderBy: ScenarioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ScenarioConnection!
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  timeline(where: TimelineWhereUniqueInput!): Timeline
  timelines(where: TimelineWhereInput, orderBy: TimelineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Timeline]!
  timelinesConnection(where: TimelineWhereInput, orderBy: TimelineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TimelineConnection!
  timelineEntry(where: TimelineEntryWhereUniqueInput!): TimelineEntry
  timelineEntries(where: TimelineEntryWhereInput, orderBy: TimelineEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimelineEntry]!
  timelineEntriesConnection(where: TimelineEntryWhereInput, orderBy: TimelineEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TimelineEntryConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Registration {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  token: String!
  email: String!
  user: User
}

type RegistrationConnection {
  pageInfo: PageInfo!
  edges: [RegistrationEdge]!
  aggregate: AggregateRegistration!
}

input RegistrationCreateInput {
  id: ID
  token: String!
  email: String!
  user: UserCreateOneWithoutRegistrationInput
}

input RegistrationCreateOneWithoutUserInput {
  create: RegistrationCreateWithoutUserInput
  connect: RegistrationWhereUniqueInput
}

input RegistrationCreateWithoutUserInput {
  id: ID
  token: String!
  email: String!
}

type RegistrationEdge {
  node: Registration!
  cursor: String!
}

enum RegistrationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  token_ASC
  token_DESC
  email_ASC
  email_DESC
}

type RegistrationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  token: String!
  email: String!
}

type RegistrationSubscriptionPayload {
  mutation: MutationType!
  node: Registration
  updatedFields: [String!]
  previousValues: RegistrationPreviousValues
}

input RegistrationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RegistrationWhereInput
  AND: [RegistrationSubscriptionWhereInput!]
  OR: [RegistrationSubscriptionWhereInput!]
  NOT: [RegistrationSubscriptionWhereInput!]
}

input RegistrationUpdateInput {
  token: String
  email: String
  user: UserUpdateOneWithoutRegistrationInput
}

input RegistrationUpdateManyMutationInput {
  token: String
  email: String
}

input RegistrationUpdateOneWithoutUserInput {
  create: RegistrationCreateWithoutUserInput
  update: RegistrationUpdateWithoutUserDataInput
  upsert: RegistrationUpsertWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  connect: RegistrationWhereUniqueInput
}

input RegistrationUpdateWithoutUserDataInput {
  token: String
  email: String
}

input RegistrationUpsertWithoutUserInput {
  update: RegistrationUpdateWithoutUserDataInput!
  create: RegistrationCreateWithoutUserInput!
}

input RegistrationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  token: String
  token_not: String
  token_in: [String!]
  token_not_in: [String!]
  token_lt: String
  token_lte: String
  token_gt: String
  token_gte: String
  token_contains: String
  token_not_contains: String
  token_starts_with: String
  token_not_starts_with: String
  token_ends_with: String
  token_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  user: UserWhereInput
  AND: [RegistrationWhereInput!]
  OR: [RegistrationWhereInput!]
  NOT: [RegistrationWhereInput!]
}

input RegistrationWhereUniqueInput {
  id: ID
  token: String
  email: String
}

enum RevenueModelType {
  BASIC
  CUSTOM
  ECOMMERCE
  MARKETPLACE
  SERVICES
  SUBSCRIPTION
  TRANSACTIONAL
}

type RevenueStream {
  id: ID!
  createdAt: DateTime!
  company: Company!
  scenarios(where: ScenarioWhereInput, orderBy: ScenarioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Scenario!]
  revenueModel: RevenueModelType!
  buildType: BuildType
  name: String!
  startTimestamp: DateTime
  endTimestamp: DateTime
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
  isPublished: Boolean
}

type RevenueStreamConnection {
  pageInfo: PageInfo!
  edges: [RevenueStreamEdge]!
  aggregate: AggregateRevenueStream!
}

input RevenueStreamCreateInput {
  id: ID
  company: CompanyCreateOneWithoutRevenueStreamsInput!
  scenarios: ScenarioCreateManyWithoutRevenueStreamsInput
  revenueModel: RevenueModelType!
  buildType: BuildType
  name: String!
  startTimestamp: DateTime
  endTimestamp: DateTime
  products: ProductCreateManyWithoutRevenueStreamInput
  isPublished: Boolean
}

input RevenueStreamCreateManyWithoutCompanyInput {
  create: [RevenueStreamCreateWithoutCompanyInput!]
  connect: [RevenueStreamWhereUniqueInput!]
}

input RevenueStreamCreateManyWithoutScenariosInput {
  create: [RevenueStreamCreateWithoutScenariosInput!]
  connect: [RevenueStreamWhereUniqueInput!]
}

input RevenueStreamCreateOneWithoutProductsInput {
  create: RevenueStreamCreateWithoutProductsInput
  connect: RevenueStreamWhereUniqueInput
}

input RevenueStreamCreateWithoutCompanyInput {
  id: ID
  scenarios: ScenarioCreateManyWithoutRevenueStreamsInput
  revenueModel: RevenueModelType!
  buildType: BuildType
  name: String!
  startTimestamp: DateTime
  endTimestamp: DateTime
  products: ProductCreateManyWithoutRevenueStreamInput
  isPublished: Boolean
}

input RevenueStreamCreateWithoutProductsInput {
  id: ID
  company: CompanyCreateOneWithoutRevenueStreamsInput!
  scenarios: ScenarioCreateManyWithoutRevenueStreamsInput
  revenueModel: RevenueModelType!
  buildType: BuildType
  name: String!
  startTimestamp: DateTime
  endTimestamp: DateTime
  isPublished: Boolean
}

input RevenueStreamCreateWithoutScenariosInput {
  id: ID
  company: CompanyCreateOneWithoutRevenueStreamsInput!
  revenueModel: RevenueModelType!
  buildType: BuildType
  name: String!
  startTimestamp: DateTime
  endTimestamp: DateTime
  products: ProductCreateManyWithoutRevenueStreamInput
  isPublished: Boolean
}

type RevenueStreamEdge {
  node: RevenueStream!
  cursor: String!
}

enum RevenueStreamOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  revenueModel_ASC
  revenueModel_DESC
  buildType_ASC
  buildType_DESC
  name_ASC
  name_DESC
  startTimestamp_ASC
  startTimestamp_DESC
  endTimestamp_ASC
  endTimestamp_DESC
  isPublished_ASC
  isPublished_DESC
}

type RevenueStreamPreviousValues {
  id: ID!
  createdAt: DateTime!
  revenueModel: RevenueModelType!
  buildType: BuildType
  name: String!
  startTimestamp: DateTime
  endTimestamp: DateTime
  isPublished: Boolean
}

input RevenueStreamScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  revenueModel: RevenueModelType
  revenueModel_not: RevenueModelType
  revenueModel_in: [RevenueModelType!]
  revenueModel_not_in: [RevenueModelType!]
  buildType: BuildType
  buildType_not: BuildType
  buildType_in: [BuildType!]
  buildType_not_in: [BuildType!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  startTimestamp: DateTime
  startTimestamp_not: DateTime
  startTimestamp_in: [DateTime!]
  startTimestamp_not_in: [DateTime!]
  startTimestamp_lt: DateTime
  startTimestamp_lte: DateTime
  startTimestamp_gt: DateTime
  startTimestamp_gte: DateTime
  endTimestamp: DateTime
  endTimestamp_not: DateTime
  endTimestamp_in: [DateTime!]
  endTimestamp_not_in: [DateTime!]
  endTimestamp_lt: DateTime
  endTimestamp_lte: DateTime
  endTimestamp_gt: DateTime
  endTimestamp_gte: DateTime
  isPublished: Boolean
  isPublished_not: Boolean
  AND: [RevenueStreamScalarWhereInput!]
  OR: [RevenueStreamScalarWhereInput!]
  NOT: [RevenueStreamScalarWhereInput!]
}

type RevenueStreamSubscriptionPayload {
  mutation: MutationType!
  node: RevenueStream
  updatedFields: [String!]
  previousValues: RevenueStreamPreviousValues
}

input RevenueStreamSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RevenueStreamWhereInput
  AND: [RevenueStreamSubscriptionWhereInput!]
  OR: [RevenueStreamSubscriptionWhereInput!]
  NOT: [RevenueStreamSubscriptionWhereInput!]
}

input RevenueStreamUpdateInput {
  company: CompanyUpdateOneRequiredWithoutRevenueStreamsInput
  scenarios: ScenarioUpdateManyWithoutRevenueStreamsInput
  revenueModel: RevenueModelType
  buildType: BuildType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  products: ProductUpdateManyWithoutRevenueStreamInput
  isPublished: Boolean
}

input RevenueStreamUpdateManyDataInput {
  revenueModel: RevenueModelType
  buildType: BuildType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  isPublished: Boolean
}

input RevenueStreamUpdateManyMutationInput {
  revenueModel: RevenueModelType
  buildType: BuildType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  isPublished: Boolean
}

input RevenueStreamUpdateManyWithoutCompanyInput {
  create: [RevenueStreamCreateWithoutCompanyInput!]
  delete: [RevenueStreamWhereUniqueInput!]
  connect: [RevenueStreamWhereUniqueInput!]
  set: [RevenueStreamWhereUniqueInput!]
  disconnect: [RevenueStreamWhereUniqueInput!]
  update: [RevenueStreamUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [RevenueStreamUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [RevenueStreamScalarWhereInput!]
  updateMany: [RevenueStreamUpdateManyWithWhereNestedInput!]
}

input RevenueStreamUpdateManyWithoutScenariosInput {
  create: [RevenueStreamCreateWithoutScenariosInput!]
  delete: [RevenueStreamWhereUniqueInput!]
  connect: [RevenueStreamWhereUniqueInput!]
  set: [RevenueStreamWhereUniqueInput!]
  disconnect: [RevenueStreamWhereUniqueInput!]
  update: [RevenueStreamUpdateWithWhereUniqueWithoutScenariosInput!]
  upsert: [RevenueStreamUpsertWithWhereUniqueWithoutScenariosInput!]
  deleteMany: [RevenueStreamScalarWhereInput!]
  updateMany: [RevenueStreamUpdateManyWithWhereNestedInput!]
}

input RevenueStreamUpdateManyWithWhereNestedInput {
  where: RevenueStreamScalarWhereInput!
  data: RevenueStreamUpdateManyDataInput!
}

input RevenueStreamUpdateOneRequiredWithoutProductsInput {
  create: RevenueStreamCreateWithoutProductsInput
  update: RevenueStreamUpdateWithoutProductsDataInput
  upsert: RevenueStreamUpsertWithoutProductsInput
  connect: RevenueStreamWhereUniqueInput
}

input RevenueStreamUpdateWithoutCompanyDataInput {
  scenarios: ScenarioUpdateManyWithoutRevenueStreamsInput
  revenueModel: RevenueModelType
  buildType: BuildType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  products: ProductUpdateManyWithoutRevenueStreamInput
  isPublished: Boolean
}

input RevenueStreamUpdateWithoutProductsDataInput {
  company: CompanyUpdateOneRequiredWithoutRevenueStreamsInput
  scenarios: ScenarioUpdateManyWithoutRevenueStreamsInput
  revenueModel: RevenueModelType
  buildType: BuildType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  isPublished: Boolean
}

input RevenueStreamUpdateWithoutScenariosDataInput {
  company: CompanyUpdateOneRequiredWithoutRevenueStreamsInput
  revenueModel: RevenueModelType
  buildType: BuildType
  name: String
  startTimestamp: DateTime
  endTimestamp: DateTime
  products: ProductUpdateManyWithoutRevenueStreamInput
  isPublished: Boolean
}

input RevenueStreamUpdateWithWhereUniqueWithoutCompanyInput {
  where: RevenueStreamWhereUniqueInput!
  data: RevenueStreamUpdateWithoutCompanyDataInput!
}

input RevenueStreamUpdateWithWhereUniqueWithoutScenariosInput {
  where: RevenueStreamWhereUniqueInput!
  data: RevenueStreamUpdateWithoutScenariosDataInput!
}

input RevenueStreamUpsertWithoutProductsInput {
  update: RevenueStreamUpdateWithoutProductsDataInput!
  create: RevenueStreamCreateWithoutProductsInput!
}

input RevenueStreamUpsertWithWhereUniqueWithoutCompanyInput {
  where: RevenueStreamWhereUniqueInput!
  update: RevenueStreamUpdateWithoutCompanyDataInput!
  create: RevenueStreamCreateWithoutCompanyInput!
}

input RevenueStreamUpsertWithWhereUniqueWithoutScenariosInput {
  where: RevenueStreamWhereUniqueInput!
  update: RevenueStreamUpdateWithoutScenariosDataInput!
  create: RevenueStreamCreateWithoutScenariosInput!
}

input RevenueStreamWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  company: CompanyWhereInput
  scenarios_every: ScenarioWhereInput
  scenarios_some: ScenarioWhereInput
  scenarios_none: ScenarioWhereInput
  revenueModel: RevenueModelType
  revenueModel_not: RevenueModelType
  revenueModel_in: [RevenueModelType!]
  revenueModel_not_in: [RevenueModelType!]
  buildType: BuildType
  buildType_not: BuildType
  buildType_in: [BuildType!]
  buildType_not_in: [BuildType!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  startTimestamp: DateTime
  startTimestamp_not: DateTime
  startTimestamp_in: [DateTime!]
  startTimestamp_not_in: [DateTime!]
  startTimestamp_lt: DateTime
  startTimestamp_lte: DateTime
  startTimestamp_gt: DateTime
  startTimestamp_gte: DateTime
  endTimestamp: DateTime
  endTimestamp_not: DateTime
  endTimestamp_in: [DateTime!]
  endTimestamp_not_in: [DateTime!]
  endTimestamp_lt: DateTime
  endTimestamp_lte: DateTime
  endTimestamp_gt: DateTime
  endTimestamp_gte: DateTime
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  isPublished: Boolean
  isPublished_not: Boolean
  AND: [RevenueStreamWhereInput!]
  OR: [RevenueStreamWhereInput!]
  NOT: [RevenueStreamWhereInput!]
}

input RevenueStreamWhereUniqueInput {
  id: ID
}

type Scenario {
  id: ID!
  createdAt: DateTime!
  company: Company!
  name: String!
  isContinuous: Boolean!
  startTimestamp: DateTime!
  isDefault: Boolean!
  assets(where: AssetWhereInput, orderBy: AssetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Asset!]
  departments(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Department!]
  equities(where: EquityWhereInput, orderBy: EquityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Equity!]
  expenses(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense!]
  growthFunnels(where: GrowthFunnelWhereInput, orderBy: GrowthFunnelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GrowthFunnel!]
  timelines(where: TimelineWhereInput, orderBy: TimelineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Timeline!]
  liabilities(where: LiabilityWhereInput, orderBy: LiabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Liability!]
  metrics(where: MetricWhereInput, orderBy: MetricOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Metric!]
  revenueStreams(where: RevenueStreamWhereInput, orderBy: RevenueStreamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RevenueStream!]
}

type ScenarioConnection {
  pageInfo: PageInfo!
  edges: [ScenarioEdge]!
  aggregate: AggregateScenario!
}

input ScenarioCreateInput {
  id: ID
  company: CompanyCreateOneWithoutScenariosInput!
  name: String!
  isContinuous: Boolean
  startTimestamp: DateTime!
  isDefault: Boolean
  assets: AssetCreateManyWithoutScenariosInput
  departments: DepartmentCreateManyWithoutScenariosInput
  equities: EquityCreateManyWithoutScenariosInput
  expenses: ExpenseCreateManyWithoutScenariosInput
  growthFunnels: GrowthFunnelCreateManyWithoutScenariosInput
  timelines: TimelineCreateManyWithoutScenarioInput
  liabilities: LiabilityCreateManyWithoutScenariosInput
  metrics: MetricCreateManyWithoutScenarioInput
  revenueStreams: RevenueStreamCreateManyWithoutScenariosInput
}

input ScenarioCreateManyWithoutAssetsInput {
  create: [ScenarioCreateWithoutAssetsInput!]
  connect: [ScenarioWhereUniqueInput!]
}

input ScenarioCreateManyWithoutCompanyInput {
  create: [ScenarioCreateWithoutCompanyInput!]
  connect: [ScenarioWhereUniqueInput!]
}

input ScenarioCreateManyWithoutDepartmentsInput {
  create: [ScenarioCreateWithoutDepartmentsInput!]
  connect: [ScenarioWhereUniqueInput!]
}

input ScenarioCreateManyWithoutEquitiesInput {
  create: [ScenarioCreateWithoutEquitiesInput!]
  connect: [ScenarioWhereUniqueInput!]
}

input ScenarioCreateManyWithoutExpensesInput {
  create: [ScenarioCreateWithoutExpensesInput!]
  connect: [ScenarioWhereUniqueInput!]
}

input ScenarioCreateManyWithoutGrowthFunnelsInput {
  create: [ScenarioCreateWithoutGrowthFunnelsInput!]
  connect: [ScenarioWhereUniqueInput!]
}

input ScenarioCreateManyWithoutLiabilitiesInput {
  create: [ScenarioCreateWithoutLiabilitiesInput!]
  connect: [ScenarioWhereUniqueInput!]
}

input ScenarioCreateManyWithoutRevenueStreamsInput {
  create: [ScenarioCreateWithoutRevenueStreamsInput!]
  connect: [ScenarioWhereUniqueInput!]
}

input ScenarioCreateOneWithoutMetricsInput {
  create: ScenarioCreateWithoutMetricsInput
  connect: ScenarioWhereUniqueInput
}

input ScenarioCreateOneWithoutTimelinesInput {
  create: ScenarioCreateWithoutTimelinesInput
  connect: ScenarioWhereUniqueInput
}

input ScenarioCreateWithoutAssetsInput {
  id: ID
  company: CompanyCreateOneWithoutScenariosInput!
  name: String!
  isContinuous: Boolean
  startTimestamp: DateTime!
  isDefault: Boolean
  departments: DepartmentCreateManyWithoutScenariosInput
  equities: EquityCreateManyWithoutScenariosInput
  expenses: ExpenseCreateManyWithoutScenariosInput
  growthFunnels: GrowthFunnelCreateManyWithoutScenariosInput
  timelines: TimelineCreateManyWithoutScenarioInput
  liabilities: LiabilityCreateManyWithoutScenariosInput
  metrics: MetricCreateManyWithoutScenarioInput
  revenueStreams: RevenueStreamCreateManyWithoutScenariosInput
}

input ScenarioCreateWithoutCompanyInput {
  id: ID
  name: String!
  isContinuous: Boolean
  startTimestamp: DateTime!
  isDefault: Boolean
  assets: AssetCreateManyWithoutScenariosInput
  departments: DepartmentCreateManyWithoutScenariosInput
  equities: EquityCreateManyWithoutScenariosInput
  expenses: ExpenseCreateManyWithoutScenariosInput
  growthFunnels: GrowthFunnelCreateManyWithoutScenariosInput
  timelines: TimelineCreateManyWithoutScenarioInput
  liabilities: LiabilityCreateManyWithoutScenariosInput
  metrics: MetricCreateManyWithoutScenarioInput
  revenueStreams: RevenueStreamCreateManyWithoutScenariosInput
}

input ScenarioCreateWithoutDepartmentsInput {
  id: ID
  company: CompanyCreateOneWithoutScenariosInput!
  name: String!
  isContinuous: Boolean
  startTimestamp: DateTime!
  isDefault: Boolean
  assets: AssetCreateManyWithoutScenariosInput
  equities: EquityCreateManyWithoutScenariosInput
  expenses: ExpenseCreateManyWithoutScenariosInput
  growthFunnels: GrowthFunnelCreateManyWithoutScenariosInput
  timelines: TimelineCreateManyWithoutScenarioInput
  liabilities: LiabilityCreateManyWithoutScenariosInput
  metrics: MetricCreateManyWithoutScenarioInput
  revenueStreams: RevenueStreamCreateManyWithoutScenariosInput
}

input ScenarioCreateWithoutEquitiesInput {
  id: ID
  company: CompanyCreateOneWithoutScenariosInput!
  name: String!
  isContinuous: Boolean
  startTimestamp: DateTime!
  isDefault: Boolean
  assets: AssetCreateManyWithoutScenariosInput
  departments: DepartmentCreateManyWithoutScenariosInput
  expenses: ExpenseCreateManyWithoutScenariosInput
  growthFunnels: GrowthFunnelCreateManyWithoutScenariosInput
  timelines: TimelineCreateManyWithoutScenarioInput
  liabilities: LiabilityCreateManyWithoutScenariosInput
  metrics: MetricCreateManyWithoutScenarioInput
  revenueStreams: RevenueStreamCreateManyWithoutScenariosInput
}

input ScenarioCreateWithoutExpensesInput {
  id: ID
  company: CompanyCreateOneWithoutScenariosInput!
  name: String!
  isContinuous: Boolean
  startTimestamp: DateTime!
  isDefault: Boolean
  assets: AssetCreateManyWithoutScenariosInput
  departments: DepartmentCreateManyWithoutScenariosInput
  equities: EquityCreateManyWithoutScenariosInput
  growthFunnels: GrowthFunnelCreateManyWithoutScenariosInput
  timelines: TimelineCreateManyWithoutScenarioInput
  liabilities: LiabilityCreateManyWithoutScenariosInput
  metrics: MetricCreateManyWithoutScenarioInput
  revenueStreams: RevenueStreamCreateManyWithoutScenariosInput
}

input ScenarioCreateWithoutGrowthFunnelsInput {
  id: ID
  company: CompanyCreateOneWithoutScenariosInput!
  name: String!
  isContinuous: Boolean
  startTimestamp: DateTime!
  isDefault: Boolean
  assets: AssetCreateManyWithoutScenariosInput
  departments: DepartmentCreateManyWithoutScenariosInput
  equities: EquityCreateManyWithoutScenariosInput
  expenses: ExpenseCreateManyWithoutScenariosInput
  timelines: TimelineCreateManyWithoutScenarioInput
  liabilities: LiabilityCreateManyWithoutScenariosInput
  metrics: MetricCreateManyWithoutScenarioInput
  revenueStreams: RevenueStreamCreateManyWithoutScenariosInput
}

input ScenarioCreateWithoutLiabilitiesInput {
  id: ID
  company: CompanyCreateOneWithoutScenariosInput!
  name: String!
  isContinuous: Boolean
  startTimestamp: DateTime!
  isDefault: Boolean
  assets: AssetCreateManyWithoutScenariosInput
  departments: DepartmentCreateManyWithoutScenariosInput
  equities: EquityCreateManyWithoutScenariosInput
  expenses: ExpenseCreateManyWithoutScenariosInput
  growthFunnels: GrowthFunnelCreateManyWithoutScenariosInput
  timelines: TimelineCreateManyWithoutScenarioInput
  metrics: MetricCreateManyWithoutScenarioInput
  revenueStreams: RevenueStreamCreateManyWithoutScenariosInput
}

input ScenarioCreateWithoutMetricsInput {
  id: ID
  company: CompanyCreateOneWithoutScenariosInput!
  name: String!
  isContinuous: Boolean
  startTimestamp: DateTime!
  isDefault: Boolean
  assets: AssetCreateManyWithoutScenariosInput
  departments: DepartmentCreateManyWithoutScenariosInput
  equities: EquityCreateManyWithoutScenariosInput
  expenses: ExpenseCreateManyWithoutScenariosInput
  growthFunnels: GrowthFunnelCreateManyWithoutScenariosInput
  timelines: TimelineCreateManyWithoutScenarioInput
  liabilities: LiabilityCreateManyWithoutScenariosInput
  revenueStreams: RevenueStreamCreateManyWithoutScenariosInput
}

input ScenarioCreateWithoutRevenueStreamsInput {
  id: ID
  company: CompanyCreateOneWithoutScenariosInput!
  name: String!
  isContinuous: Boolean
  startTimestamp: DateTime!
  isDefault: Boolean
  assets: AssetCreateManyWithoutScenariosInput
  departments: DepartmentCreateManyWithoutScenariosInput
  equities: EquityCreateManyWithoutScenariosInput
  expenses: ExpenseCreateManyWithoutScenariosInput
  growthFunnels: GrowthFunnelCreateManyWithoutScenariosInput
  timelines: TimelineCreateManyWithoutScenarioInput
  liabilities: LiabilityCreateManyWithoutScenariosInput
  metrics: MetricCreateManyWithoutScenarioInput
}

input ScenarioCreateWithoutTimelinesInput {
  id: ID
  company: CompanyCreateOneWithoutScenariosInput!
  name: String!
  isContinuous: Boolean
  startTimestamp: DateTime!
  isDefault: Boolean
  assets: AssetCreateManyWithoutScenariosInput
  departments: DepartmentCreateManyWithoutScenariosInput
  equities: EquityCreateManyWithoutScenariosInput
  expenses: ExpenseCreateManyWithoutScenariosInput
  growthFunnels: GrowthFunnelCreateManyWithoutScenariosInput
  liabilities: LiabilityCreateManyWithoutScenariosInput
  metrics: MetricCreateManyWithoutScenarioInput
  revenueStreams: RevenueStreamCreateManyWithoutScenariosInput
}

type ScenarioEdge {
  node: Scenario!
  cursor: String!
}

enum ScenarioOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  isContinuous_ASC
  isContinuous_DESC
  startTimestamp_ASC
  startTimestamp_DESC
  isDefault_ASC
  isDefault_DESC
}

type ScenarioPreviousValues {
  id: ID!
  createdAt: DateTime!
  name: String!
  isContinuous: Boolean!
  startTimestamp: DateTime!
  isDefault: Boolean!
}

input ScenarioScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  isContinuous: Boolean
  isContinuous_not: Boolean
  startTimestamp: DateTime
  startTimestamp_not: DateTime
  startTimestamp_in: [DateTime!]
  startTimestamp_not_in: [DateTime!]
  startTimestamp_lt: DateTime
  startTimestamp_lte: DateTime
  startTimestamp_gt: DateTime
  startTimestamp_gte: DateTime
  isDefault: Boolean
  isDefault_not: Boolean
  AND: [ScenarioScalarWhereInput!]
  OR: [ScenarioScalarWhereInput!]
  NOT: [ScenarioScalarWhereInput!]
}

type ScenarioSubscriptionPayload {
  mutation: MutationType!
  node: Scenario
  updatedFields: [String!]
  previousValues: ScenarioPreviousValues
}

input ScenarioSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ScenarioWhereInput
  AND: [ScenarioSubscriptionWhereInput!]
  OR: [ScenarioSubscriptionWhereInput!]
  NOT: [ScenarioSubscriptionWhereInput!]
}

input ScenarioUpdateInput {
  company: CompanyUpdateOneRequiredWithoutScenariosInput
  name: String
  isContinuous: Boolean
  startTimestamp: DateTime
  isDefault: Boolean
  assets: AssetUpdateManyWithoutScenariosInput
  departments: DepartmentUpdateManyWithoutScenariosInput
  equities: EquityUpdateManyWithoutScenariosInput
  expenses: ExpenseUpdateManyWithoutScenariosInput
  growthFunnels: GrowthFunnelUpdateManyWithoutScenariosInput
  timelines: TimelineUpdateManyWithoutScenarioInput
  liabilities: LiabilityUpdateManyWithoutScenariosInput
  metrics: MetricUpdateManyWithoutScenarioInput
  revenueStreams: RevenueStreamUpdateManyWithoutScenariosInput
}

input ScenarioUpdateManyDataInput {
  name: String
  isContinuous: Boolean
  startTimestamp: DateTime
  isDefault: Boolean
}

input ScenarioUpdateManyMutationInput {
  name: String
  isContinuous: Boolean
  startTimestamp: DateTime
  isDefault: Boolean
}

input ScenarioUpdateManyWithoutAssetsInput {
  create: [ScenarioCreateWithoutAssetsInput!]
  delete: [ScenarioWhereUniqueInput!]
  connect: [ScenarioWhereUniqueInput!]
  set: [ScenarioWhereUniqueInput!]
  disconnect: [ScenarioWhereUniqueInput!]
  update: [ScenarioUpdateWithWhereUniqueWithoutAssetsInput!]
  upsert: [ScenarioUpsertWithWhereUniqueWithoutAssetsInput!]
  deleteMany: [ScenarioScalarWhereInput!]
  updateMany: [ScenarioUpdateManyWithWhereNestedInput!]
}

input ScenarioUpdateManyWithoutCompanyInput {
  create: [ScenarioCreateWithoutCompanyInput!]
  delete: [ScenarioWhereUniqueInput!]
  connect: [ScenarioWhereUniqueInput!]
  set: [ScenarioWhereUniqueInput!]
  disconnect: [ScenarioWhereUniqueInput!]
  update: [ScenarioUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [ScenarioUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [ScenarioScalarWhereInput!]
  updateMany: [ScenarioUpdateManyWithWhereNestedInput!]
}

input ScenarioUpdateManyWithoutDepartmentsInput {
  create: [ScenarioCreateWithoutDepartmentsInput!]
  delete: [ScenarioWhereUniqueInput!]
  connect: [ScenarioWhereUniqueInput!]
  set: [ScenarioWhereUniqueInput!]
  disconnect: [ScenarioWhereUniqueInput!]
  update: [ScenarioUpdateWithWhereUniqueWithoutDepartmentsInput!]
  upsert: [ScenarioUpsertWithWhereUniqueWithoutDepartmentsInput!]
  deleteMany: [ScenarioScalarWhereInput!]
  updateMany: [ScenarioUpdateManyWithWhereNestedInput!]
}

input ScenarioUpdateManyWithoutEquitiesInput {
  create: [ScenarioCreateWithoutEquitiesInput!]
  delete: [ScenarioWhereUniqueInput!]
  connect: [ScenarioWhereUniqueInput!]
  set: [ScenarioWhereUniqueInput!]
  disconnect: [ScenarioWhereUniqueInput!]
  update: [ScenarioUpdateWithWhereUniqueWithoutEquitiesInput!]
  upsert: [ScenarioUpsertWithWhereUniqueWithoutEquitiesInput!]
  deleteMany: [ScenarioScalarWhereInput!]
  updateMany: [ScenarioUpdateManyWithWhereNestedInput!]
}

input ScenarioUpdateManyWithoutExpensesInput {
  create: [ScenarioCreateWithoutExpensesInput!]
  delete: [ScenarioWhereUniqueInput!]
  connect: [ScenarioWhereUniqueInput!]
  set: [ScenarioWhereUniqueInput!]
  disconnect: [ScenarioWhereUniqueInput!]
  update: [ScenarioUpdateWithWhereUniqueWithoutExpensesInput!]
  upsert: [ScenarioUpsertWithWhereUniqueWithoutExpensesInput!]
  deleteMany: [ScenarioScalarWhereInput!]
  updateMany: [ScenarioUpdateManyWithWhereNestedInput!]
}

input ScenarioUpdateManyWithoutGrowthFunnelsInput {
  create: [ScenarioCreateWithoutGrowthFunnelsInput!]
  delete: [ScenarioWhereUniqueInput!]
  connect: [ScenarioWhereUniqueInput!]
  set: [ScenarioWhereUniqueInput!]
  disconnect: [ScenarioWhereUniqueInput!]
  update: [ScenarioUpdateWithWhereUniqueWithoutGrowthFunnelsInput!]
  upsert: [ScenarioUpsertWithWhereUniqueWithoutGrowthFunnelsInput!]
  deleteMany: [ScenarioScalarWhereInput!]
  updateMany: [ScenarioUpdateManyWithWhereNestedInput!]
}

input ScenarioUpdateManyWithoutLiabilitiesInput {
  create: [ScenarioCreateWithoutLiabilitiesInput!]
  delete: [ScenarioWhereUniqueInput!]
  connect: [ScenarioWhereUniqueInput!]
  set: [ScenarioWhereUniqueInput!]
  disconnect: [ScenarioWhereUniqueInput!]
  update: [ScenarioUpdateWithWhereUniqueWithoutLiabilitiesInput!]
  upsert: [ScenarioUpsertWithWhereUniqueWithoutLiabilitiesInput!]
  deleteMany: [ScenarioScalarWhereInput!]
  updateMany: [ScenarioUpdateManyWithWhereNestedInput!]
}

input ScenarioUpdateManyWithoutRevenueStreamsInput {
  create: [ScenarioCreateWithoutRevenueStreamsInput!]
  delete: [ScenarioWhereUniqueInput!]
  connect: [ScenarioWhereUniqueInput!]
  set: [ScenarioWhereUniqueInput!]
  disconnect: [ScenarioWhereUniqueInput!]
  update: [ScenarioUpdateWithWhereUniqueWithoutRevenueStreamsInput!]
  upsert: [ScenarioUpsertWithWhereUniqueWithoutRevenueStreamsInput!]
  deleteMany: [ScenarioScalarWhereInput!]
  updateMany: [ScenarioUpdateManyWithWhereNestedInput!]
}

input ScenarioUpdateManyWithWhereNestedInput {
  where: ScenarioScalarWhereInput!
  data: ScenarioUpdateManyDataInput!
}

input ScenarioUpdateOneRequiredWithoutTimelinesInput {
  create: ScenarioCreateWithoutTimelinesInput
  update: ScenarioUpdateWithoutTimelinesDataInput
  upsert: ScenarioUpsertWithoutTimelinesInput
  connect: ScenarioWhereUniqueInput
}

input ScenarioUpdateOneWithoutMetricsInput {
  create: ScenarioCreateWithoutMetricsInput
  update: ScenarioUpdateWithoutMetricsDataInput
  upsert: ScenarioUpsertWithoutMetricsInput
  delete: Boolean
  disconnect: Boolean
  connect: ScenarioWhereUniqueInput
}

input ScenarioUpdateWithoutAssetsDataInput {
  company: CompanyUpdateOneRequiredWithoutScenariosInput
  name: String
  isContinuous: Boolean
  startTimestamp: DateTime
  isDefault: Boolean
  departments: DepartmentUpdateManyWithoutScenariosInput
  equities: EquityUpdateManyWithoutScenariosInput
  expenses: ExpenseUpdateManyWithoutScenariosInput
  growthFunnels: GrowthFunnelUpdateManyWithoutScenariosInput
  timelines: TimelineUpdateManyWithoutScenarioInput
  liabilities: LiabilityUpdateManyWithoutScenariosInput
  metrics: MetricUpdateManyWithoutScenarioInput
  revenueStreams: RevenueStreamUpdateManyWithoutScenariosInput
}

input ScenarioUpdateWithoutCompanyDataInput {
  name: String
  isContinuous: Boolean
  startTimestamp: DateTime
  isDefault: Boolean
  assets: AssetUpdateManyWithoutScenariosInput
  departments: DepartmentUpdateManyWithoutScenariosInput
  equities: EquityUpdateManyWithoutScenariosInput
  expenses: ExpenseUpdateManyWithoutScenariosInput
  growthFunnels: GrowthFunnelUpdateManyWithoutScenariosInput
  timelines: TimelineUpdateManyWithoutScenarioInput
  liabilities: LiabilityUpdateManyWithoutScenariosInput
  metrics: MetricUpdateManyWithoutScenarioInput
  revenueStreams: RevenueStreamUpdateManyWithoutScenariosInput
}

input ScenarioUpdateWithoutDepartmentsDataInput {
  company: CompanyUpdateOneRequiredWithoutScenariosInput
  name: String
  isContinuous: Boolean
  startTimestamp: DateTime
  isDefault: Boolean
  assets: AssetUpdateManyWithoutScenariosInput
  equities: EquityUpdateManyWithoutScenariosInput
  expenses: ExpenseUpdateManyWithoutScenariosInput
  growthFunnels: GrowthFunnelUpdateManyWithoutScenariosInput
  timelines: TimelineUpdateManyWithoutScenarioInput
  liabilities: LiabilityUpdateManyWithoutScenariosInput
  metrics: MetricUpdateManyWithoutScenarioInput
  revenueStreams: RevenueStreamUpdateManyWithoutScenariosInput
}

input ScenarioUpdateWithoutEquitiesDataInput {
  company: CompanyUpdateOneRequiredWithoutScenariosInput
  name: String
  isContinuous: Boolean
  startTimestamp: DateTime
  isDefault: Boolean
  assets: AssetUpdateManyWithoutScenariosInput
  departments: DepartmentUpdateManyWithoutScenariosInput
  expenses: ExpenseUpdateManyWithoutScenariosInput
  growthFunnels: GrowthFunnelUpdateManyWithoutScenariosInput
  timelines: TimelineUpdateManyWithoutScenarioInput
  liabilities: LiabilityUpdateManyWithoutScenariosInput
  metrics: MetricUpdateManyWithoutScenarioInput
  revenueStreams: RevenueStreamUpdateManyWithoutScenariosInput
}

input ScenarioUpdateWithoutExpensesDataInput {
  company: CompanyUpdateOneRequiredWithoutScenariosInput
  name: String
  isContinuous: Boolean
  startTimestamp: DateTime
  isDefault: Boolean
  assets: AssetUpdateManyWithoutScenariosInput
  departments: DepartmentUpdateManyWithoutScenariosInput
  equities: EquityUpdateManyWithoutScenariosInput
  growthFunnels: GrowthFunnelUpdateManyWithoutScenariosInput
  timelines: TimelineUpdateManyWithoutScenarioInput
  liabilities: LiabilityUpdateManyWithoutScenariosInput
  metrics: MetricUpdateManyWithoutScenarioInput
  revenueStreams: RevenueStreamUpdateManyWithoutScenariosInput
}

input ScenarioUpdateWithoutGrowthFunnelsDataInput {
  company: CompanyUpdateOneRequiredWithoutScenariosInput
  name: String
  isContinuous: Boolean
  startTimestamp: DateTime
  isDefault: Boolean
  assets: AssetUpdateManyWithoutScenariosInput
  departments: DepartmentUpdateManyWithoutScenariosInput
  equities: EquityUpdateManyWithoutScenariosInput
  expenses: ExpenseUpdateManyWithoutScenariosInput
  timelines: TimelineUpdateManyWithoutScenarioInput
  liabilities: LiabilityUpdateManyWithoutScenariosInput
  metrics: MetricUpdateManyWithoutScenarioInput
  revenueStreams: RevenueStreamUpdateManyWithoutScenariosInput
}

input ScenarioUpdateWithoutLiabilitiesDataInput {
  company: CompanyUpdateOneRequiredWithoutScenariosInput
  name: String
  isContinuous: Boolean
  startTimestamp: DateTime
  isDefault: Boolean
  assets: AssetUpdateManyWithoutScenariosInput
  departments: DepartmentUpdateManyWithoutScenariosInput
  equities: EquityUpdateManyWithoutScenariosInput
  expenses: ExpenseUpdateManyWithoutScenariosInput
  growthFunnels: GrowthFunnelUpdateManyWithoutScenariosInput
  timelines: TimelineUpdateManyWithoutScenarioInput
  metrics: MetricUpdateManyWithoutScenarioInput
  revenueStreams: RevenueStreamUpdateManyWithoutScenariosInput
}

input ScenarioUpdateWithoutMetricsDataInput {
  company: CompanyUpdateOneRequiredWithoutScenariosInput
  name: String
  isContinuous: Boolean
  startTimestamp: DateTime
  isDefault: Boolean
  assets: AssetUpdateManyWithoutScenariosInput
  departments: DepartmentUpdateManyWithoutScenariosInput
  equities: EquityUpdateManyWithoutScenariosInput
  expenses: ExpenseUpdateManyWithoutScenariosInput
  growthFunnels: GrowthFunnelUpdateManyWithoutScenariosInput
  timelines: TimelineUpdateManyWithoutScenarioInput
  liabilities: LiabilityUpdateManyWithoutScenariosInput
  revenueStreams: RevenueStreamUpdateManyWithoutScenariosInput
}

input ScenarioUpdateWithoutRevenueStreamsDataInput {
  company: CompanyUpdateOneRequiredWithoutScenariosInput
  name: String
  isContinuous: Boolean
  startTimestamp: DateTime
  isDefault: Boolean
  assets: AssetUpdateManyWithoutScenariosInput
  departments: DepartmentUpdateManyWithoutScenariosInput
  equities: EquityUpdateManyWithoutScenariosInput
  expenses: ExpenseUpdateManyWithoutScenariosInput
  growthFunnels: GrowthFunnelUpdateManyWithoutScenariosInput
  timelines: TimelineUpdateManyWithoutScenarioInput
  liabilities: LiabilityUpdateManyWithoutScenariosInput
  metrics: MetricUpdateManyWithoutScenarioInput
}

input ScenarioUpdateWithoutTimelinesDataInput {
  company: CompanyUpdateOneRequiredWithoutScenariosInput
  name: String
  isContinuous: Boolean
  startTimestamp: DateTime
  isDefault: Boolean
  assets: AssetUpdateManyWithoutScenariosInput
  departments: DepartmentUpdateManyWithoutScenariosInput
  equities: EquityUpdateManyWithoutScenariosInput
  expenses: ExpenseUpdateManyWithoutScenariosInput
  growthFunnels: GrowthFunnelUpdateManyWithoutScenariosInput
  liabilities: LiabilityUpdateManyWithoutScenariosInput
  metrics: MetricUpdateManyWithoutScenarioInput
  revenueStreams: RevenueStreamUpdateManyWithoutScenariosInput
}

input ScenarioUpdateWithWhereUniqueWithoutAssetsInput {
  where: ScenarioWhereUniqueInput!
  data: ScenarioUpdateWithoutAssetsDataInput!
}

input ScenarioUpdateWithWhereUniqueWithoutCompanyInput {
  where: ScenarioWhereUniqueInput!
  data: ScenarioUpdateWithoutCompanyDataInput!
}

input ScenarioUpdateWithWhereUniqueWithoutDepartmentsInput {
  where: ScenarioWhereUniqueInput!
  data: ScenarioUpdateWithoutDepartmentsDataInput!
}

input ScenarioUpdateWithWhereUniqueWithoutEquitiesInput {
  where: ScenarioWhereUniqueInput!
  data: ScenarioUpdateWithoutEquitiesDataInput!
}

input ScenarioUpdateWithWhereUniqueWithoutExpensesInput {
  where: ScenarioWhereUniqueInput!
  data: ScenarioUpdateWithoutExpensesDataInput!
}

input ScenarioUpdateWithWhereUniqueWithoutGrowthFunnelsInput {
  where: ScenarioWhereUniqueInput!
  data: ScenarioUpdateWithoutGrowthFunnelsDataInput!
}

input ScenarioUpdateWithWhereUniqueWithoutLiabilitiesInput {
  where: ScenarioWhereUniqueInput!
  data: ScenarioUpdateWithoutLiabilitiesDataInput!
}

input ScenarioUpdateWithWhereUniqueWithoutRevenueStreamsInput {
  where: ScenarioWhereUniqueInput!
  data: ScenarioUpdateWithoutRevenueStreamsDataInput!
}

input ScenarioUpsertWithoutMetricsInput {
  update: ScenarioUpdateWithoutMetricsDataInput!
  create: ScenarioCreateWithoutMetricsInput!
}

input ScenarioUpsertWithoutTimelinesInput {
  update: ScenarioUpdateWithoutTimelinesDataInput!
  create: ScenarioCreateWithoutTimelinesInput!
}

input ScenarioUpsertWithWhereUniqueWithoutAssetsInput {
  where: ScenarioWhereUniqueInput!
  update: ScenarioUpdateWithoutAssetsDataInput!
  create: ScenarioCreateWithoutAssetsInput!
}

input ScenarioUpsertWithWhereUniqueWithoutCompanyInput {
  where: ScenarioWhereUniqueInput!
  update: ScenarioUpdateWithoutCompanyDataInput!
  create: ScenarioCreateWithoutCompanyInput!
}

input ScenarioUpsertWithWhereUniqueWithoutDepartmentsInput {
  where: ScenarioWhereUniqueInput!
  update: ScenarioUpdateWithoutDepartmentsDataInput!
  create: ScenarioCreateWithoutDepartmentsInput!
}

input ScenarioUpsertWithWhereUniqueWithoutEquitiesInput {
  where: ScenarioWhereUniqueInput!
  update: ScenarioUpdateWithoutEquitiesDataInput!
  create: ScenarioCreateWithoutEquitiesInput!
}

input ScenarioUpsertWithWhereUniqueWithoutExpensesInput {
  where: ScenarioWhereUniqueInput!
  update: ScenarioUpdateWithoutExpensesDataInput!
  create: ScenarioCreateWithoutExpensesInput!
}

input ScenarioUpsertWithWhereUniqueWithoutGrowthFunnelsInput {
  where: ScenarioWhereUniqueInput!
  update: ScenarioUpdateWithoutGrowthFunnelsDataInput!
  create: ScenarioCreateWithoutGrowthFunnelsInput!
}

input ScenarioUpsertWithWhereUniqueWithoutLiabilitiesInput {
  where: ScenarioWhereUniqueInput!
  update: ScenarioUpdateWithoutLiabilitiesDataInput!
  create: ScenarioCreateWithoutLiabilitiesInput!
}

input ScenarioUpsertWithWhereUniqueWithoutRevenueStreamsInput {
  where: ScenarioWhereUniqueInput!
  update: ScenarioUpdateWithoutRevenueStreamsDataInput!
  create: ScenarioCreateWithoutRevenueStreamsInput!
}

input ScenarioWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  company: CompanyWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  isContinuous: Boolean
  isContinuous_not: Boolean
  startTimestamp: DateTime
  startTimestamp_not: DateTime
  startTimestamp_in: [DateTime!]
  startTimestamp_not_in: [DateTime!]
  startTimestamp_lt: DateTime
  startTimestamp_lte: DateTime
  startTimestamp_gt: DateTime
  startTimestamp_gte: DateTime
  isDefault: Boolean
  isDefault_not: Boolean
  assets_every: AssetWhereInput
  assets_some: AssetWhereInput
  assets_none: AssetWhereInput
  departments_every: DepartmentWhereInput
  departments_some: DepartmentWhereInput
  departments_none: DepartmentWhereInput
  equities_every: EquityWhereInput
  equities_some: EquityWhereInput
  equities_none: EquityWhereInput
  expenses_every: ExpenseWhereInput
  expenses_some: ExpenseWhereInput
  expenses_none: ExpenseWhereInput
  growthFunnels_every: GrowthFunnelWhereInput
  growthFunnels_some: GrowthFunnelWhereInput
  growthFunnels_none: GrowthFunnelWhereInput
  timelines_every: TimelineWhereInput
  timelines_some: TimelineWhereInput
  timelines_none: TimelineWhereInput
  liabilities_every: LiabilityWhereInput
  liabilities_some: LiabilityWhereInput
  liabilities_none: LiabilityWhereInput
  metrics_every: MetricWhereInput
  metrics_some: MetricWhereInput
  metrics_none: MetricWhereInput
  revenueStreams_every: RevenueStreamWhereInput
  revenueStreams_some: RevenueStreamWhereInput
  revenueStreams_none: RevenueStreamWhereInput
  AND: [ScenarioWhereInput!]
  OR: [ScenarioWhereInput!]
  NOT: [ScenarioWhereInput!]
}

input ScenarioWhereUniqueInput {
  id: ID
}

enum SubjectType {
  ASSET
  EQUITY
  EXPENSE
  GROWTH_FUNNEL
  GROWTH_FUNNEL_START
  GROWTH_FUNNEL_STAGE
  GROWTH_FUNNEL_END
  LIABILITY
  PERSON
  PRODUCT
  SCENARIO
}

type Subscription {
  asset(where: AssetSubscriptionWhereInput): AssetSubscriptionPayload
  assumption(where: AssumptionSubscriptionWhereInput): AssumptionSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  company(where: CompanySubscriptionWhereInput): CompanySubscriptionPayload
  department(where: DepartmentSubscriptionWhereInput): DepartmentSubscriptionPayload
  equity(where: EquitySubscriptionWhereInput): EquitySubscriptionPayload
  expense(where: ExpenseSubscriptionWhereInput): ExpenseSubscriptionPayload
  growthFunnel(where: GrowthFunnelSubscriptionWhereInput): GrowthFunnelSubscriptionPayload
  integration(where: IntegrationSubscriptionWhereInput): IntegrationSubscriptionPayload
  liability(where: LiabilitySubscriptionWhereInput): LiabilitySubscriptionPayload
  metric(where: MetricSubscriptionWhereInput): MetricSubscriptionPayload
  paymentCard(where: PaymentCardSubscriptionWhereInput): PaymentCardSubscriptionPayload
  paymentMethod(where: PaymentMethodSubscriptionWhereInput): PaymentMethodSubscriptionPayload
  person(where: PersonSubscriptionWhereInput): PersonSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  registration(where: RegistrationSubscriptionWhereInput): RegistrationSubscriptionPayload
  revenueStream(where: RevenueStreamSubscriptionWhereInput): RevenueStreamSubscriptionPayload
  scenario(where: ScenarioSubscriptionWhereInput): ScenarioSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  timeline(where: TimelineSubscriptionWhereInput): TimelineSubscriptionPayload
  timelineEntry(where: TimelineEntrySubscriptionWhereInput): TimelineEntrySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Tag {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  key: String!
  company: Company
  assets(where: AssetWhereInput, orderBy: AssetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Asset!]
  equities(where: EquityWhereInput, orderBy: EquityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Equity!]
  expenses(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense!]
  growthFunnels(where: GrowthFunnelWhereInput, orderBy: GrowthFunnelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GrowthFunnel!]
  liabilities(where: LiabilityWhereInput, orderBy: LiabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Liability!]
  people(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person!]
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

type TagConnection {
  pageInfo: PageInfo!
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  id: ID
  name: String!
  key: String!
  company: CompanyCreateOneInput
  assets: AssetCreateManyWithoutTagsInput
  equities: EquityCreateManyWithoutTagsInput
  expenses: ExpenseCreateManyWithoutTagsInput
  growthFunnels: GrowthFunnelCreateManyWithoutTagsInput
  liabilities: LiabilityCreateManyWithoutTagsInput
  people: PersonCreateManyWithoutTagsInput
  products: ProductCreateManyWithoutTagsInput
}

input TagCreateManyWithoutAssetsInput {
  create: [TagCreateWithoutAssetsInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateManyWithoutEquitiesInput {
  create: [TagCreateWithoutEquitiesInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateManyWithoutExpensesInput {
  create: [TagCreateWithoutExpensesInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateManyWithoutGrowthFunnelsInput {
  create: [TagCreateWithoutGrowthFunnelsInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateManyWithoutLiabilitiesInput {
  create: [TagCreateWithoutLiabilitiesInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateManyWithoutPeopleInput {
  create: [TagCreateWithoutPeopleInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateManyWithoutProductsInput {
  create: [TagCreateWithoutProductsInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateWithoutAssetsInput {
  id: ID
  name: String!
  key: String!
  company: CompanyCreateOneInput
  equities: EquityCreateManyWithoutTagsInput
  expenses: ExpenseCreateManyWithoutTagsInput
  growthFunnels: GrowthFunnelCreateManyWithoutTagsInput
  liabilities: LiabilityCreateManyWithoutTagsInput
  people: PersonCreateManyWithoutTagsInput
  products: ProductCreateManyWithoutTagsInput
}

input TagCreateWithoutEquitiesInput {
  id: ID
  name: String!
  key: String!
  company: CompanyCreateOneInput
  assets: AssetCreateManyWithoutTagsInput
  expenses: ExpenseCreateManyWithoutTagsInput
  growthFunnels: GrowthFunnelCreateManyWithoutTagsInput
  liabilities: LiabilityCreateManyWithoutTagsInput
  people: PersonCreateManyWithoutTagsInput
  products: ProductCreateManyWithoutTagsInput
}

input TagCreateWithoutExpensesInput {
  id: ID
  name: String!
  key: String!
  company: CompanyCreateOneInput
  assets: AssetCreateManyWithoutTagsInput
  equities: EquityCreateManyWithoutTagsInput
  growthFunnels: GrowthFunnelCreateManyWithoutTagsInput
  liabilities: LiabilityCreateManyWithoutTagsInput
  people: PersonCreateManyWithoutTagsInput
  products: ProductCreateManyWithoutTagsInput
}

input TagCreateWithoutGrowthFunnelsInput {
  id: ID
  name: String!
  key: String!
  company: CompanyCreateOneInput
  assets: AssetCreateManyWithoutTagsInput
  equities: EquityCreateManyWithoutTagsInput
  expenses: ExpenseCreateManyWithoutTagsInput
  liabilities: LiabilityCreateManyWithoutTagsInput
  people: PersonCreateManyWithoutTagsInput
  products: ProductCreateManyWithoutTagsInput
}

input TagCreateWithoutLiabilitiesInput {
  id: ID
  name: String!
  key: String!
  company: CompanyCreateOneInput
  assets: AssetCreateManyWithoutTagsInput
  equities: EquityCreateManyWithoutTagsInput
  expenses: ExpenseCreateManyWithoutTagsInput
  growthFunnels: GrowthFunnelCreateManyWithoutTagsInput
  people: PersonCreateManyWithoutTagsInput
  products: ProductCreateManyWithoutTagsInput
}

input TagCreateWithoutPeopleInput {
  id: ID
  name: String!
  key: String!
  company: CompanyCreateOneInput
  assets: AssetCreateManyWithoutTagsInput
  equities: EquityCreateManyWithoutTagsInput
  expenses: ExpenseCreateManyWithoutTagsInput
  growthFunnels: GrowthFunnelCreateManyWithoutTagsInput
  liabilities: LiabilityCreateManyWithoutTagsInput
  products: ProductCreateManyWithoutTagsInput
}

input TagCreateWithoutProductsInput {
  id: ID
  name: String!
  key: String!
  company: CompanyCreateOneInput
  assets: AssetCreateManyWithoutTagsInput
  equities: EquityCreateManyWithoutTagsInput
  expenses: ExpenseCreateManyWithoutTagsInput
  growthFunnels: GrowthFunnelCreateManyWithoutTagsInput
  liabilities: LiabilityCreateManyWithoutTagsInput
  people: PersonCreateManyWithoutTagsInput
}

type TagEdge {
  node: Tag!
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  key_ASC
  key_DESC
}

type TagPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  key: String!
}

input TagScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_lt: String
  key_lte: String
  key_gt: String
  key_gte: String
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  AND: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TagWhereInput
  AND: [TagSubscriptionWhereInput!]
  OR: [TagSubscriptionWhereInput!]
  NOT: [TagSubscriptionWhereInput!]
}

input TagUpdateInput {
  name: String
  key: String
  company: CompanyUpdateOneInput
  assets: AssetUpdateManyWithoutTagsInput
  equities: EquityUpdateManyWithoutTagsInput
  expenses: ExpenseUpdateManyWithoutTagsInput
  growthFunnels: GrowthFunnelUpdateManyWithoutTagsInput
  liabilities: LiabilityUpdateManyWithoutTagsInput
  people: PersonUpdateManyWithoutTagsInput
  products: ProductUpdateManyWithoutTagsInput
}

input TagUpdateManyDataInput {
  name: String
  key: String
}

input TagUpdateManyMutationInput {
  name: String
  key: String
}

input TagUpdateManyWithoutAssetsInput {
  create: [TagCreateWithoutAssetsInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutAssetsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutAssetsInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyWithoutEquitiesInput {
  create: [TagCreateWithoutEquitiesInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutEquitiesInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutEquitiesInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyWithoutExpensesInput {
  create: [TagCreateWithoutExpensesInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutExpensesInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutExpensesInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyWithoutGrowthFunnelsInput {
  create: [TagCreateWithoutGrowthFunnelsInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutGrowthFunnelsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutGrowthFunnelsInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyWithoutLiabilitiesInput {
  create: [TagCreateWithoutLiabilitiesInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutLiabilitiesInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutLiabilitiesInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyWithoutPeopleInput {
  create: [TagCreateWithoutPeopleInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutPeopleInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutPeopleInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyWithoutProductsInput {
  create: [TagCreateWithoutProductsInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutProductsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutProductsInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput!
  data: TagUpdateManyDataInput!
}

input TagUpdateWithoutAssetsDataInput {
  name: String
  key: String
  company: CompanyUpdateOneInput
  equities: EquityUpdateManyWithoutTagsInput
  expenses: ExpenseUpdateManyWithoutTagsInput
  growthFunnels: GrowthFunnelUpdateManyWithoutTagsInput
  liabilities: LiabilityUpdateManyWithoutTagsInput
  people: PersonUpdateManyWithoutTagsInput
  products: ProductUpdateManyWithoutTagsInput
}

input TagUpdateWithoutEquitiesDataInput {
  name: String
  key: String
  company: CompanyUpdateOneInput
  assets: AssetUpdateManyWithoutTagsInput
  expenses: ExpenseUpdateManyWithoutTagsInput
  growthFunnels: GrowthFunnelUpdateManyWithoutTagsInput
  liabilities: LiabilityUpdateManyWithoutTagsInput
  people: PersonUpdateManyWithoutTagsInput
  products: ProductUpdateManyWithoutTagsInput
}

input TagUpdateWithoutExpensesDataInput {
  name: String
  key: String
  company: CompanyUpdateOneInput
  assets: AssetUpdateManyWithoutTagsInput
  equities: EquityUpdateManyWithoutTagsInput
  growthFunnels: GrowthFunnelUpdateManyWithoutTagsInput
  liabilities: LiabilityUpdateManyWithoutTagsInput
  people: PersonUpdateManyWithoutTagsInput
  products: ProductUpdateManyWithoutTagsInput
}

input TagUpdateWithoutGrowthFunnelsDataInput {
  name: String
  key: String
  company: CompanyUpdateOneInput
  assets: AssetUpdateManyWithoutTagsInput
  equities: EquityUpdateManyWithoutTagsInput
  expenses: ExpenseUpdateManyWithoutTagsInput
  liabilities: LiabilityUpdateManyWithoutTagsInput
  people: PersonUpdateManyWithoutTagsInput
  products: ProductUpdateManyWithoutTagsInput
}

input TagUpdateWithoutLiabilitiesDataInput {
  name: String
  key: String
  company: CompanyUpdateOneInput
  assets: AssetUpdateManyWithoutTagsInput
  equities: EquityUpdateManyWithoutTagsInput
  expenses: ExpenseUpdateManyWithoutTagsInput
  growthFunnels: GrowthFunnelUpdateManyWithoutTagsInput
  people: PersonUpdateManyWithoutTagsInput
  products: ProductUpdateManyWithoutTagsInput
}

input TagUpdateWithoutPeopleDataInput {
  name: String
  key: String
  company: CompanyUpdateOneInput
  assets: AssetUpdateManyWithoutTagsInput
  equities: EquityUpdateManyWithoutTagsInput
  expenses: ExpenseUpdateManyWithoutTagsInput
  growthFunnels: GrowthFunnelUpdateManyWithoutTagsInput
  liabilities: LiabilityUpdateManyWithoutTagsInput
  products: ProductUpdateManyWithoutTagsInput
}

input TagUpdateWithoutProductsDataInput {
  name: String
  key: String
  company: CompanyUpdateOneInput
  assets: AssetUpdateManyWithoutTagsInput
  equities: EquityUpdateManyWithoutTagsInput
  expenses: ExpenseUpdateManyWithoutTagsInput
  growthFunnels: GrowthFunnelUpdateManyWithoutTagsInput
  liabilities: LiabilityUpdateManyWithoutTagsInput
  people: PersonUpdateManyWithoutTagsInput
}

input TagUpdateWithWhereUniqueWithoutAssetsInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutAssetsDataInput!
}

input TagUpdateWithWhereUniqueWithoutEquitiesInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutEquitiesDataInput!
}

input TagUpdateWithWhereUniqueWithoutExpensesInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutExpensesDataInput!
}

input TagUpdateWithWhereUniqueWithoutGrowthFunnelsInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutGrowthFunnelsDataInput!
}

input TagUpdateWithWhereUniqueWithoutLiabilitiesInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutLiabilitiesDataInput!
}

input TagUpdateWithWhereUniqueWithoutPeopleInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutPeopleDataInput!
}

input TagUpdateWithWhereUniqueWithoutProductsInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutProductsDataInput!
}

input TagUpsertWithWhereUniqueWithoutAssetsInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutAssetsDataInput!
  create: TagCreateWithoutAssetsInput!
}

input TagUpsertWithWhereUniqueWithoutEquitiesInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutEquitiesDataInput!
  create: TagCreateWithoutEquitiesInput!
}

input TagUpsertWithWhereUniqueWithoutExpensesInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutExpensesDataInput!
  create: TagCreateWithoutExpensesInput!
}

input TagUpsertWithWhereUniqueWithoutGrowthFunnelsInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutGrowthFunnelsDataInput!
  create: TagCreateWithoutGrowthFunnelsInput!
}

input TagUpsertWithWhereUniqueWithoutLiabilitiesInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutLiabilitiesDataInput!
  create: TagCreateWithoutLiabilitiesInput!
}

input TagUpsertWithWhereUniqueWithoutPeopleInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutPeopleDataInput!
  create: TagCreateWithoutPeopleInput!
}

input TagUpsertWithWhereUniqueWithoutProductsInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutProductsDataInput!
  create: TagCreateWithoutProductsInput!
}

input TagWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_lt: String
  key_lte: String
  key_gt: String
  key_gte: String
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  company: CompanyWhereInput
  assets_every: AssetWhereInput
  assets_some: AssetWhereInput
  assets_none: AssetWhereInput
  equities_every: EquityWhereInput
  equities_some: EquityWhereInput
  equities_none: EquityWhereInput
  expenses_every: ExpenseWhereInput
  expenses_some: ExpenseWhereInput
  expenses_none: ExpenseWhereInput
  growthFunnels_every: GrowthFunnelWhereInput
  growthFunnels_some: GrowthFunnelWhereInput
  growthFunnels_none: GrowthFunnelWhereInput
  liabilities_every: LiabilityWhereInput
  liabilities_some: LiabilityWhereInput
  liabilities_none: LiabilityWhereInput
  people_every: PersonWhereInput
  people_some: PersonWhereInput
  people_none: PersonWhereInput
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
}

input TagWhereUniqueInput {
  id: ID
  key: String
}

type Timeline {
  id: ID!
  key: String!
  scenario: Scenario!
  timeUnit: TimeUnit!
  timePeriods: Int!
  startTimestamp: DateTime!
  currentTimestamp: DateTime!
  entries(where: TimelineEntryWhereInput, orderBy: TimelineEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimelineEntry!]
}

type TimelineConnection {
  pageInfo: PageInfo!
  edges: [TimelineEdge]!
  aggregate: AggregateTimeline!
}

input TimelineCreateInput {
  id: ID
  key: String!
  scenario: ScenarioCreateOneWithoutTimelinesInput!
  timeUnit: TimeUnit!
  timePeriods: Int!
  startTimestamp: DateTime!
  currentTimestamp: DateTime!
  entries: TimelineEntryCreateManyWithoutTimelineInput
}

input TimelineCreateManyWithoutScenarioInput {
  create: [TimelineCreateWithoutScenarioInput!]
  connect: [TimelineWhereUniqueInput!]
}

input TimelineCreateOneWithoutEntriesInput {
  create: TimelineCreateWithoutEntriesInput
  connect: TimelineWhereUniqueInput
}

input TimelineCreateWithoutEntriesInput {
  id: ID
  key: String!
  scenario: ScenarioCreateOneWithoutTimelinesInput!
  timeUnit: TimeUnit!
  timePeriods: Int!
  startTimestamp: DateTime!
  currentTimestamp: DateTime!
}

input TimelineCreateWithoutScenarioInput {
  id: ID
  key: String!
  timeUnit: TimeUnit!
  timePeriods: Int!
  startTimestamp: DateTime!
  currentTimestamp: DateTime!
  entries: TimelineEntryCreateManyWithoutTimelineInput
}

type TimelineEdge {
  node: Timeline!
  cursor: String!
}

type TimelineEntry {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  key: String!
  timeline: Timeline!
  metric: Metric!
  timestamp: DateTime!
  value: Float!
  data: Json
}

type TimelineEntryConnection {
  pageInfo: PageInfo!
  edges: [TimelineEntryEdge]!
  aggregate: AggregateTimelineEntry!
}

input TimelineEntryCreateInput {
  id: ID
  key: String!
  timeline: TimelineCreateOneWithoutEntriesInput!
  metric: MetricCreateOneWithoutTimelineEntriesInput!
  timestamp: DateTime!
  value: Float!
  data: Json
}

input TimelineEntryCreateManyWithoutMetricInput {
  create: [TimelineEntryCreateWithoutMetricInput!]
  connect: [TimelineEntryWhereUniqueInput!]
}

input TimelineEntryCreateManyWithoutTimelineInput {
  create: [TimelineEntryCreateWithoutTimelineInput!]
  connect: [TimelineEntryWhereUniqueInput!]
}

input TimelineEntryCreateWithoutMetricInput {
  id: ID
  key: String!
  timeline: TimelineCreateOneWithoutEntriesInput!
  timestamp: DateTime!
  value: Float!
  data: Json
}

input TimelineEntryCreateWithoutTimelineInput {
  id: ID
  key: String!
  metric: MetricCreateOneWithoutTimelineEntriesInput!
  timestamp: DateTime!
  value: Float!
  data: Json
}

type TimelineEntryEdge {
  node: TimelineEntry!
  cursor: String!
}

enum TimelineEntryOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  key_ASC
  key_DESC
  timestamp_ASC
  timestamp_DESC
  value_ASC
  value_DESC
  data_ASC
  data_DESC
}

type TimelineEntryPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  key: String!
  timestamp: DateTime!
  value: Float!
  data: Json
}

input TimelineEntryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_lt: String
  key_lte: String
  key_gt: String
  key_gte: String
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  timestamp: DateTime
  timestamp_not: DateTime
  timestamp_in: [DateTime!]
  timestamp_not_in: [DateTime!]
  timestamp_lt: DateTime
  timestamp_lte: DateTime
  timestamp_gt: DateTime
  timestamp_gte: DateTime
  value: Float
  value_not: Float
  value_in: [Float!]
  value_not_in: [Float!]
  value_lt: Float
  value_lte: Float
  value_gt: Float
  value_gte: Float
  AND: [TimelineEntryScalarWhereInput!]
  OR: [TimelineEntryScalarWhereInput!]
  NOT: [TimelineEntryScalarWhereInput!]
}

type TimelineEntrySubscriptionPayload {
  mutation: MutationType!
  node: TimelineEntry
  updatedFields: [String!]
  previousValues: TimelineEntryPreviousValues
}

input TimelineEntrySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TimelineEntryWhereInput
  AND: [TimelineEntrySubscriptionWhereInput!]
  OR: [TimelineEntrySubscriptionWhereInput!]
  NOT: [TimelineEntrySubscriptionWhereInput!]
}

input TimelineEntryUpdateInput {
  key: String
  timeline: TimelineUpdateOneRequiredWithoutEntriesInput
  metric: MetricUpdateOneRequiredWithoutTimelineEntriesInput
  timestamp: DateTime
  value: Float
  data: Json
}

input TimelineEntryUpdateManyDataInput {
  key: String
  timestamp: DateTime
  value: Float
  data: Json
}

input TimelineEntryUpdateManyMutationInput {
  key: String
  timestamp: DateTime
  value: Float
  data: Json
}

input TimelineEntryUpdateManyWithoutMetricInput {
  create: [TimelineEntryCreateWithoutMetricInput!]
  delete: [TimelineEntryWhereUniqueInput!]
  connect: [TimelineEntryWhereUniqueInput!]
  set: [TimelineEntryWhereUniqueInput!]
  disconnect: [TimelineEntryWhereUniqueInput!]
  update: [TimelineEntryUpdateWithWhereUniqueWithoutMetricInput!]
  upsert: [TimelineEntryUpsertWithWhereUniqueWithoutMetricInput!]
  deleteMany: [TimelineEntryScalarWhereInput!]
  updateMany: [TimelineEntryUpdateManyWithWhereNestedInput!]
}

input TimelineEntryUpdateManyWithoutTimelineInput {
  create: [TimelineEntryCreateWithoutTimelineInput!]
  delete: [TimelineEntryWhereUniqueInput!]
  connect: [TimelineEntryWhereUniqueInput!]
  set: [TimelineEntryWhereUniqueInput!]
  disconnect: [TimelineEntryWhereUniqueInput!]
  update: [TimelineEntryUpdateWithWhereUniqueWithoutTimelineInput!]
  upsert: [TimelineEntryUpsertWithWhereUniqueWithoutTimelineInput!]
  deleteMany: [TimelineEntryScalarWhereInput!]
  updateMany: [TimelineEntryUpdateManyWithWhereNestedInput!]
}

input TimelineEntryUpdateManyWithWhereNestedInput {
  where: TimelineEntryScalarWhereInput!
  data: TimelineEntryUpdateManyDataInput!
}

input TimelineEntryUpdateWithoutMetricDataInput {
  key: String
  timeline: TimelineUpdateOneRequiredWithoutEntriesInput
  timestamp: DateTime
  value: Float
  data: Json
}

input TimelineEntryUpdateWithoutTimelineDataInput {
  key: String
  metric: MetricUpdateOneRequiredWithoutTimelineEntriesInput
  timestamp: DateTime
  value: Float
  data: Json
}

input TimelineEntryUpdateWithWhereUniqueWithoutMetricInput {
  where: TimelineEntryWhereUniqueInput!
  data: TimelineEntryUpdateWithoutMetricDataInput!
}

input TimelineEntryUpdateWithWhereUniqueWithoutTimelineInput {
  where: TimelineEntryWhereUniqueInput!
  data: TimelineEntryUpdateWithoutTimelineDataInput!
}

input TimelineEntryUpsertWithWhereUniqueWithoutMetricInput {
  where: TimelineEntryWhereUniqueInput!
  update: TimelineEntryUpdateWithoutMetricDataInput!
  create: TimelineEntryCreateWithoutMetricInput!
}

input TimelineEntryUpsertWithWhereUniqueWithoutTimelineInput {
  where: TimelineEntryWhereUniqueInput!
  update: TimelineEntryUpdateWithoutTimelineDataInput!
  create: TimelineEntryCreateWithoutTimelineInput!
}

input TimelineEntryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_lt: String
  key_lte: String
  key_gt: String
  key_gte: String
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  timeline: TimelineWhereInput
  metric: MetricWhereInput
  timestamp: DateTime
  timestamp_not: DateTime
  timestamp_in: [DateTime!]
  timestamp_not_in: [DateTime!]
  timestamp_lt: DateTime
  timestamp_lte: DateTime
  timestamp_gt: DateTime
  timestamp_gte: DateTime
  value: Float
  value_not: Float
  value_in: [Float!]
  value_not_in: [Float!]
  value_lt: Float
  value_lte: Float
  value_gt: Float
  value_gte: Float
  AND: [TimelineEntryWhereInput!]
  OR: [TimelineEntryWhereInput!]
  NOT: [TimelineEntryWhereInput!]
}

input TimelineEntryWhereUniqueInput {
  id: ID
  key: String
}

enum TimelineOrderByInput {
  id_ASC
  id_DESC
  key_ASC
  key_DESC
  timeUnit_ASC
  timeUnit_DESC
  timePeriods_ASC
  timePeriods_DESC
  startTimestamp_ASC
  startTimestamp_DESC
  currentTimestamp_ASC
  currentTimestamp_DESC
}

type TimelinePreviousValues {
  id: ID!
  key: String!
  timeUnit: TimeUnit!
  timePeriods: Int!
  startTimestamp: DateTime!
  currentTimestamp: DateTime!
}

input TimelineScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_lt: String
  key_lte: String
  key_gt: String
  key_gte: String
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  timeUnit: TimeUnit
  timeUnit_not: TimeUnit
  timeUnit_in: [TimeUnit!]
  timeUnit_not_in: [TimeUnit!]
  timePeriods: Int
  timePeriods_not: Int
  timePeriods_in: [Int!]
  timePeriods_not_in: [Int!]
  timePeriods_lt: Int
  timePeriods_lte: Int
  timePeriods_gt: Int
  timePeriods_gte: Int
  startTimestamp: DateTime
  startTimestamp_not: DateTime
  startTimestamp_in: [DateTime!]
  startTimestamp_not_in: [DateTime!]
  startTimestamp_lt: DateTime
  startTimestamp_lte: DateTime
  startTimestamp_gt: DateTime
  startTimestamp_gte: DateTime
  currentTimestamp: DateTime
  currentTimestamp_not: DateTime
  currentTimestamp_in: [DateTime!]
  currentTimestamp_not_in: [DateTime!]
  currentTimestamp_lt: DateTime
  currentTimestamp_lte: DateTime
  currentTimestamp_gt: DateTime
  currentTimestamp_gte: DateTime
  AND: [TimelineScalarWhereInput!]
  OR: [TimelineScalarWhereInput!]
  NOT: [TimelineScalarWhereInput!]
}

type TimelineSubscriptionPayload {
  mutation: MutationType!
  node: Timeline
  updatedFields: [String!]
  previousValues: TimelinePreviousValues
}

input TimelineSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TimelineWhereInput
  AND: [TimelineSubscriptionWhereInput!]
  OR: [TimelineSubscriptionWhereInput!]
  NOT: [TimelineSubscriptionWhereInput!]
}

input TimelineUpdateInput {
  key: String
  scenario: ScenarioUpdateOneRequiredWithoutTimelinesInput
  timeUnit: TimeUnit
  timePeriods: Int
  startTimestamp: DateTime
  currentTimestamp: DateTime
  entries: TimelineEntryUpdateManyWithoutTimelineInput
}

input TimelineUpdateManyDataInput {
  key: String
  timeUnit: TimeUnit
  timePeriods: Int
  startTimestamp: DateTime
  currentTimestamp: DateTime
}

input TimelineUpdateManyMutationInput {
  key: String
  timeUnit: TimeUnit
  timePeriods: Int
  startTimestamp: DateTime
  currentTimestamp: DateTime
}

input TimelineUpdateManyWithoutScenarioInput {
  create: [TimelineCreateWithoutScenarioInput!]
  delete: [TimelineWhereUniqueInput!]
  connect: [TimelineWhereUniqueInput!]
  set: [TimelineWhereUniqueInput!]
  disconnect: [TimelineWhereUniqueInput!]
  update: [TimelineUpdateWithWhereUniqueWithoutScenarioInput!]
  upsert: [TimelineUpsertWithWhereUniqueWithoutScenarioInput!]
  deleteMany: [TimelineScalarWhereInput!]
  updateMany: [TimelineUpdateManyWithWhereNestedInput!]
}

input TimelineUpdateManyWithWhereNestedInput {
  where: TimelineScalarWhereInput!
  data: TimelineUpdateManyDataInput!
}

input TimelineUpdateOneRequiredWithoutEntriesInput {
  create: TimelineCreateWithoutEntriesInput
  update: TimelineUpdateWithoutEntriesDataInput
  upsert: TimelineUpsertWithoutEntriesInput
  connect: TimelineWhereUniqueInput
}

input TimelineUpdateWithoutEntriesDataInput {
  key: String
  scenario: ScenarioUpdateOneRequiredWithoutTimelinesInput
  timeUnit: TimeUnit
  timePeriods: Int
  startTimestamp: DateTime
  currentTimestamp: DateTime
}

input TimelineUpdateWithoutScenarioDataInput {
  key: String
  timeUnit: TimeUnit
  timePeriods: Int
  startTimestamp: DateTime
  currentTimestamp: DateTime
  entries: TimelineEntryUpdateManyWithoutTimelineInput
}

input TimelineUpdateWithWhereUniqueWithoutScenarioInput {
  where: TimelineWhereUniqueInput!
  data: TimelineUpdateWithoutScenarioDataInput!
}

input TimelineUpsertWithoutEntriesInput {
  update: TimelineUpdateWithoutEntriesDataInput!
  create: TimelineCreateWithoutEntriesInput!
}

input TimelineUpsertWithWhereUniqueWithoutScenarioInput {
  where: TimelineWhereUniqueInput!
  update: TimelineUpdateWithoutScenarioDataInput!
  create: TimelineCreateWithoutScenarioInput!
}

input TimelineWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_lt: String
  key_lte: String
  key_gt: String
  key_gte: String
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  scenario: ScenarioWhereInput
  timeUnit: TimeUnit
  timeUnit_not: TimeUnit
  timeUnit_in: [TimeUnit!]
  timeUnit_not_in: [TimeUnit!]
  timePeriods: Int
  timePeriods_not: Int
  timePeriods_in: [Int!]
  timePeriods_not_in: [Int!]
  timePeriods_lt: Int
  timePeriods_lte: Int
  timePeriods_gt: Int
  timePeriods_gte: Int
  startTimestamp: DateTime
  startTimestamp_not: DateTime
  startTimestamp_in: [DateTime!]
  startTimestamp_not_in: [DateTime!]
  startTimestamp_lt: DateTime
  startTimestamp_lte: DateTime
  startTimestamp_gt: DateTime
  startTimestamp_gte: DateTime
  currentTimestamp: DateTime
  currentTimestamp_not: DateTime
  currentTimestamp_in: [DateTime!]
  currentTimestamp_not_in: [DateTime!]
  currentTimestamp_lt: DateTime
  currentTimestamp_lte: DateTime
  currentTimestamp_gt: DateTime
  currentTimestamp_gte: DateTime
  entries_every: TimelineEntryWhereInput
  entries_some: TimelineEntryWhereInput
  entries_none: TimelineEntryWhereInput
  AND: [TimelineWhereInput!]
  OR: [TimelineWhereInput!]
  NOT: [TimelineWhereInput!]
}

input TimelineWhereUniqueInput {
  id: ID
  key: String
}

enum TimeUnit {
  DAYS
  WEEKS
  MONTHS
  QUARTERS
  YEARS
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  name: String!
  password: String!
  emailVerified: Boolean!
  role: UserRole!
  jobTitle: String
  company: Company
  customerId: String
  defaultPaymentMethodId: String
  registration: Registration
  paymentMethods(where: PaymentMethodWhereInput, orderBy: PaymentMethodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PaymentMethod!]
  integrations(where: IntegrationWhereInput, orderBy: IntegrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Integration!]
  isScheduled: Boolean!
  meta: Json
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  name: String!
  password: String!
  emailVerified: Boolean
  role: UserRole
  jobTitle: String
  company: CompanyCreateOneWithoutTeamInput
  customerId: String
  defaultPaymentMethodId: String
  registration: RegistrationCreateOneWithoutUserInput
  paymentMethods: PaymentMethodCreateManyWithoutUserInput
  integrations: IntegrationCreateManyWithoutUserInput
  isScheduled: Boolean
  meta: Json
}

input UserCreateManyWithoutCompanyInput {
  create: [UserCreateWithoutCompanyInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutIntegrationsInput {
  create: UserCreateWithoutIntegrationsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPaymentMethodsInput {
  create: UserCreateWithoutPaymentMethodsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRegistrationInput {
  create: UserCreateWithoutRegistrationInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCompanyInput {
  id: ID
  email: String!
  name: String!
  password: String!
  emailVerified: Boolean
  role: UserRole
  jobTitle: String
  customerId: String
  defaultPaymentMethodId: String
  registration: RegistrationCreateOneWithoutUserInput
  paymentMethods: PaymentMethodCreateManyWithoutUserInput
  integrations: IntegrationCreateManyWithoutUserInput
  isScheduled: Boolean
  meta: Json
}

input UserCreateWithoutIntegrationsInput {
  id: ID
  email: String!
  name: String!
  password: String!
  emailVerified: Boolean
  role: UserRole
  jobTitle: String
  company: CompanyCreateOneWithoutTeamInput
  customerId: String
  defaultPaymentMethodId: String
  registration: RegistrationCreateOneWithoutUserInput
  paymentMethods: PaymentMethodCreateManyWithoutUserInput
  isScheduled: Boolean
  meta: Json
}

input UserCreateWithoutPaymentMethodsInput {
  id: ID
  email: String!
  name: String!
  password: String!
  emailVerified: Boolean
  role: UserRole
  jobTitle: String
  company: CompanyCreateOneWithoutTeamInput
  customerId: String
  defaultPaymentMethodId: String
  registration: RegistrationCreateOneWithoutUserInput
  integrations: IntegrationCreateManyWithoutUserInput
  isScheduled: Boolean
  meta: Json
}

input UserCreateWithoutRegistrationInput {
  id: ID
  email: String!
  name: String!
  password: String!
  emailVerified: Boolean
  role: UserRole
  jobTitle: String
  company: CompanyCreateOneWithoutTeamInput
  customerId: String
  defaultPaymentMethodId: String
  paymentMethods: PaymentMethodCreateManyWithoutUserInput
  integrations: IntegrationCreateManyWithoutUserInput
  isScheduled: Boolean
  meta: Json
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  emailVerified_ASC
  emailVerified_DESC
  role_ASC
  role_DESC
  jobTitle_ASC
  jobTitle_DESC
  customerId_ASC
  customerId_DESC
  defaultPaymentMethodId_ASC
  defaultPaymentMethodId_DESC
  isScheduled_ASC
  isScheduled_DESC
  meta_ASC
  meta_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  name: String!
  password: String!
  emailVerified: Boolean!
  role: UserRole!
  jobTitle: String
  customerId: String
  defaultPaymentMethodId: String
  isScheduled: Boolean!
  meta: Json
}

enum UserRole {
  REGULAR
  ADMIN
  SUPER_ADMIN
  CLIENT_ADMIN
  COMPANY_FOUNDER
  COMPANY_ADMIN
  COMPANY_EMPLOYEE
  INVESTOR
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  emailVerified: Boolean
  emailVerified_not: Boolean
  role: UserRole
  role_not: UserRole
  role_in: [UserRole!]
  role_not_in: [UserRole!]
  jobTitle: String
  jobTitle_not: String
  jobTitle_in: [String!]
  jobTitle_not_in: [String!]
  jobTitle_lt: String
  jobTitle_lte: String
  jobTitle_gt: String
  jobTitle_gte: String
  jobTitle_contains: String
  jobTitle_not_contains: String
  jobTitle_starts_with: String
  jobTitle_not_starts_with: String
  jobTitle_ends_with: String
  jobTitle_not_ends_with: String
  customerId: String
  customerId_not: String
  customerId_in: [String!]
  customerId_not_in: [String!]
  customerId_lt: String
  customerId_lte: String
  customerId_gt: String
  customerId_gte: String
  customerId_contains: String
  customerId_not_contains: String
  customerId_starts_with: String
  customerId_not_starts_with: String
  customerId_ends_with: String
  customerId_not_ends_with: String
  defaultPaymentMethodId: String
  defaultPaymentMethodId_not: String
  defaultPaymentMethodId_in: [String!]
  defaultPaymentMethodId_not_in: [String!]
  defaultPaymentMethodId_lt: String
  defaultPaymentMethodId_lte: String
  defaultPaymentMethodId_gt: String
  defaultPaymentMethodId_gte: String
  defaultPaymentMethodId_contains: String
  defaultPaymentMethodId_not_contains: String
  defaultPaymentMethodId_starts_with: String
  defaultPaymentMethodId_not_starts_with: String
  defaultPaymentMethodId_ends_with: String
  defaultPaymentMethodId_not_ends_with: String
  isScheduled: Boolean
  isScheduled_not: Boolean
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  name: String
  password: String
  emailVerified: Boolean
  role: UserRole
  jobTitle: String
  company: CompanyUpdateOneWithoutTeamInput
  customerId: String
  defaultPaymentMethodId: String
  registration: RegistrationUpdateOneWithoutUserInput
  paymentMethods: PaymentMethodUpdateManyWithoutUserInput
  integrations: IntegrationUpdateManyWithoutUserInput
  isScheduled: Boolean
  meta: Json
}

input UserUpdateManyDataInput {
  email: String
  name: String
  password: String
  emailVerified: Boolean
  role: UserRole
  jobTitle: String
  customerId: String
  defaultPaymentMethodId: String
  isScheduled: Boolean
  meta: Json
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  password: String
  emailVerified: Boolean
  role: UserRole
  jobTitle: String
  customerId: String
  defaultPaymentMethodId: String
  isScheduled: Boolean
  meta: Json
}

input UserUpdateManyWithoutCompanyInput {
  create: [UserCreateWithoutCompanyInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutIntegrationsInput {
  create: UserCreateWithoutIntegrationsInput
  update: UserUpdateWithoutIntegrationsDataInput
  upsert: UserUpsertWithoutIntegrationsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPaymentMethodsInput {
  create: UserCreateWithoutPaymentMethodsInput
  update: UserUpdateWithoutPaymentMethodsDataInput
  upsert: UserUpsertWithoutPaymentMethodsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutRegistrationInput {
  create: UserCreateWithoutRegistrationInput
  update: UserUpdateWithoutRegistrationDataInput
  upsert: UserUpsertWithoutRegistrationInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCompanyDataInput {
  email: String
  name: String
  password: String
  emailVerified: Boolean
  role: UserRole
  jobTitle: String
  customerId: String
  defaultPaymentMethodId: String
  registration: RegistrationUpdateOneWithoutUserInput
  paymentMethods: PaymentMethodUpdateManyWithoutUserInput
  integrations: IntegrationUpdateManyWithoutUserInput
  isScheduled: Boolean
  meta: Json
}

input UserUpdateWithoutIntegrationsDataInput {
  email: String
  name: String
  password: String
  emailVerified: Boolean
  role: UserRole
  jobTitle: String
  company: CompanyUpdateOneWithoutTeamInput
  customerId: String
  defaultPaymentMethodId: String
  registration: RegistrationUpdateOneWithoutUserInput
  paymentMethods: PaymentMethodUpdateManyWithoutUserInput
  isScheduled: Boolean
  meta: Json
}

input UserUpdateWithoutPaymentMethodsDataInput {
  email: String
  name: String
  password: String
  emailVerified: Boolean
  role: UserRole
  jobTitle: String
  company: CompanyUpdateOneWithoutTeamInput
  customerId: String
  defaultPaymentMethodId: String
  registration: RegistrationUpdateOneWithoutUserInput
  integrations: IntegrationUpdateManyWithoutUserInput
  isScheduled: Boolean
  meta: Json
}

input UserUpdateWithoutRegistrationDataInput {
  email: String
  name: String
  password: String
  emailVerified: Boolean
  role: UserRole
  jobTitle: String
  company: CompanyUpdateOneWithoutTeamInput
  customerId: String
  defaultPaymentMethodId: String
  paymentMethods: PaymentMethodUpdateManyWithoutUserInput
  integrations: IntegrationUpdateManyWithoutUserInput
  isScheduled: Boolean
  meta: Json
}

input UserUpdateWithWhereUniqueWithoutCompanyInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCompanyDataInput!
}

input UserUpsertWithoutIntegrationsInput {
  update: UserUpdateWithoutIntegrationsDataInput!
  create: UserCreateWithoutIntegrationsInput!
}

input UserUpsertWithoutPaymentMethodsInput {
  update: UserUpdateWithoutPaymentMethodsDataInput!
  create: UserCreateWithoutPaymentMethodsInput!
}

input UserUpsertWithoutRegistrationInput {
  update: UserUpdateWithoutRegistrationDataInput!
  create: UserCreateWithoutRegistrationInput!
}

input UserUpsertWithWhereUniqueWithoutCompanyInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCompanyDataInput!
  create: UserCreateWithoutCompanyInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  emailVerified: Boolean
  emailVerified_not: Boolean
  role: UserRole
  role_not: UserRole
  role_in: [UserRole!]
  role_not_in: [UserRole!]
  jobTitle: String
  jobTitle_not: String
  jobTitle_in: [String!]
  jobTitle_not_in: [String!]
  jobTitle_lt: String
  jobTitle_lte: String
  jobTitle_gt: String
  jobTitle_gte: String
  jobTitle_contains: String
  jobTitle_not_contains: String
  jobTitle_starts_with: String
  jobTitle_not_starts_with: String
  jobTitle_ends_with: String
  jobTitle_not_ends_with: String
  company: CompanyWhereInput
  customerId: String
  customerId_not: String
  customerId_in: [String!]
  customerId_not_in: [String!]
  customerId_lt: String
  customerId_lte: String
  customerId_gt: String
  customerId_gte: String
  customerId_contains: String
  customerId_not_contains: String
  customerId_starts_with: String
  customerId_not_starts_with: String
  customerId_ends_with: String
  customerId_not_ends_with: String
  defaultPaymentMethodId: String
  defaultPaymentMethodId_not: String
  defaultPaymentMethodId_in: [String!]
  defaultPaymentMethodId_not_in: [String!]
  defaultPaymentMethodId_lt: String
  defaultPaymentMethodId_lte: String
  defaultPaymentMethodId_gt: String
  defaultPaymentMethodId_gte: String
  defaultPaymentMethodId_contains: String
  defaultPaymentMethodId_not_contains: String
  defaultPaymentMethodId_starts_with: String
  defaultPaymentMethodId_not_starts_with: String
  defaultPaymentMethodId_ends_with: String
  defaultPaymentMethodId_not_ends_with: String
  registration: RegistrationWhereInput
  paymentMethods_every: PaymentMethodWhereInput
  paymentMethods_some: PaymentMethodWhereInput
  paymentMethods_none: PaymentMethodWhereInput
  integrations_every: IntegrationWhereInput
  integrations_some: IntegrationWhereInput
  integrations_none: IntegrationWhereInput
  isScheduled: Boolean
  isScheduled_not: Boolean
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    